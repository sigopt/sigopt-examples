!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADADELTA	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    ADADELTA = "Adadelta"$/;"	v	class:SGDOptimizer
ADAGRAD	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    ADAGRAD = "Adagrad"$/;"	v	class:SGDOptimizer
ADAM	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    ADAM = "Adam"$/;"	v	class:SGDOptimizer
ADAM_EPSILON	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    ADAM_EPSILON = 'adam_epsilon'$/;"	v	class:SGDHyperparameter
ALPHA_CE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    ALPHA_CE = 'alpha_ce'$/;"	v	class:DistillationHyperparameter
ALPHA_SQUAD	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    ALPHA_SQUAD = 'alpha_squad'$/;"	v	class:DistillationHyperparameter
ANNOTATIONS	stanford-augmented-image-classification/stanford_cars_data_config.py	/^    ANNOTATIONS = 'annotations'$/;"	v	class:CarCommonDatasetAttributes
API_TOKEN	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    API_TOKEN = "api_token"$/;"	v	class:OptimizationRunParameters
APP_NAME	amazon-ml-hyperparameter-optimization/config.py	/^APP_NAME = "aws-ml-cross-validation"$/;"	v
ARunDistilBertSquadCLI	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^from squad_distillation_abstract_clis.a_run_squad_w_distillation_cli import ARunDistilBertSquadCLI$/;"	i
ARunDistilBertSquadCLI	bert-distillation-multimetric/squad_distillation_abstract_clis/a_optimizaton_run_squad_cli.py	/^from squad_distillation_abstract_clis.a_run_squad_w_distillation_cli import ARunDistilBertSquadCLI$/;"	i
ARunDistilBertSquadCLI	bert-distillation-multimetric/squad_distillation_abstract_clis/a_run_squad_w_distillation_cli.py	/^class ARunDistilBertSquadCLI(object):$/;"	c
ARunSquadDistillation	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^class ARunSquadDistillation(object):$/;"	c
ARunSquadDistillation	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^from squad_fine_tuning.a_squad_w_distillation import ARunSquadDistillation$/;"	i
ARunSquadDistillation	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^from squad_fine_tuning.a_squad_w_distillation import ARunSquadDistillation$/;"	i
AStanfordCarDataset	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^class AStanfordCarDataset(Dataset):$/;"	c
AStanfordCarDataset	stanford-augmented-image-classification/resnet.py	/^from a_stanford_car_dataset import AStanfordCarDataset$/;"	i
AStanfordCarDataset	stanford-augmented-image-classification/stanford_car_dataset.py	/^from a_stanford_car_dataset import AStanfordCarDataset$/;"	i
AStanfordCarDataset	stanford-augmented-image-classification/stanford_car_dataset_augmented.py	/^from a_stanford_car_dataset import AStanfordCarDataset$/;"	i
AStanfordCarsCLI	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^class AStanfordCarsCLI(object):$/;"	c
AStanfordCarsCLI	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^from a_resnet_training_common_cli import AStanfordCarsCLI, CLI$/;"	i
AStanfordCarsCLI	stanford-augmented-image-classification/stanford_cars_cli.py	/^from a_resnet_training_common_cli import AStanfordCarsCLI, CLI$/;"	i
AStanfordDataProcessor	stanford-augmented-image-classification/a_stanford_data_processor.py	/^class AStanfordDataProcessor(object):$/;"	c
AStanfordDataProcessor	stanford-augmented-image-classification/stanford_augmented_data_processor.py	/^from a_stanford_data_processor import AStanfordDataProcessor$/;"	i
AStanfordDataProcessor	stanford-augmented-image-classification/stanford_data_processor.py	/^from a_stanford_data_processor import AStanfordDataProcessor$/;"	i
ATTENTION_DROPOUT	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    ATTENTION_DROPOUT = 'attention_dropout'  # dropout applied to attention heads$/;"	v	class:ArchitectureHyperparameter
AUGMENTED	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^AUGMENTED = 'augmented'$/;"	v
AUGMENT_MULTIPLIER	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    AUGMENT_MULTIPLIER = 'multiplier'$/;"	v	class:AugmentCLI
AUPRC	xgboost-py-classifier/xgboost_py_classifier.py	/^AUPRC = average_precision_score(y_test, probabilities[:, 1])$/;"	v
Activation	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.layers import Conv, Dropout, Activation, Pooling, GeneralizedCost$/;"	i
Activation	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.layers import Conv, Dropout, Activation, Pooling, GeneralizedCost$/;"	i
Adam	orchestrate/models/example/keras_model.py	/^from keras.optimizers import Adam$/;"	i
AdamW	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from transformers import AdamW, get_linear_schedule_with_warmup$/;"	i
Agent	reinforcement-learning/dqn.py	/^class Agent:$/;"	c
ApiException	classifier/classifier_tuner.py	/^from sigopt.exception import ApiException$/;"	i
ArchitectureHyperparameter	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^class ArchitectureHyperparameter(Enum):$/;"	c
ArchitectureHyperparameter	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^    SGDHyperparameter, ArchitectureHyperparameter$/;"	i
ArchitectureHyperparameter	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_hyperparameter_definition.py	/^    DistillationHyperparameter, SGDHyperparameter$/;"	i
ArchitectureHyperparameter	bert-distillation-multimetric/squad_distillation_abstract_clis/a_run_squad_w_distillation_cli.py	/^    get_default_hyperparameters, SquadArchitectureHyperparameter, ArchitectureHyperparameter$/;"	i
ArchitectureHyperparameter	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_hpo_parameters import ArchitectureHyperparameter, DistillationHyperparameter$/;"	i
ArchitectureHyperparameter	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_hpo_parameters import ArchitectureHyperparameter, DistillationHyperparameter$/;"	i
AugmentCLI	stanford-augmented-image-classification/i_commandline_arguments.py	/^from stanford_cars_augmentation_cli import AugmentHyperparameters, AugmentCLI$/;"	i
AugmentCLI	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^class AugmentCLI(Enum):$/;"	c
AugmentHyperparameters	stanford-augmented-image-classification/i_commandline_arguments.py	/^from stanford_cars_augmentation_cli import AugmentHyperparameters, AugmentCLI$/;"	i
AugmentHyperparameters	stanford-augmented-image-classification/orchestrate_stanford_cars_augmentation_cli.py	/^from stanford_cars_augmentation_cli import StanfordCarsAugmentationCLI, AugmentHyperparameters, CLI$/;"	i
AugmentHyperparameters	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^class AugmentHyperparameters(Enum):$/;"	c
BATCH_SIZE	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    BATCH_SIZE = 'batch_size'$/;"	v	class:Hyperparameters
BATCH_SIZE	stanford-car-classification/resnet_stanford_cars_cli.py	/^    BATCH_SIZE = 'batch_size'$/;"	v	class:Hyperparameters
BBOX_X1	stanford-augmented-image-classification/stanford_cars_data_config.py	/^    BBOX_X1 = 'bbox_x1'$/;"	v	class:CarDatasetAttributes
BBOX_X2	stanford-augmented-image-classification/stanford_cars_data_config.py	/^    BBOX_X2 = 'bbox_x2'$/;"	v	class:CarDatasetAttributes
BBOX_Y1	stanford-augmented-image-classification/stanford_cars_data_config.py	/^    BBOX_Y1 = 'bbox_y1'$/;"	v	class:CarDatasetAttributes
BBOX_Y2	stanford-augmented-image-classification/stanford_cars_data_config.py	/^    BBOX_Y2 = 'bbox_y2'$/;"	v	class:CarDatasetAttributes
BETA_1	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    BETA_1 = 'beta_1'$/;"	v	class:SGDHyperparameter
BETA_1	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    BETA_1 = "beta_1"$/;"	v	class:ParametersList
BETA_2	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    BETA_2 = 'beta_2'$/;"	v	class:SGDHyperparameter
BETA_2	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    BETA_2 = "beta_2"$/;"	v	class:ParametersList
BRIGHTNESS	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    BRIGHTNESS = 'brightness'$/;"	v	class:AugmentHyperparameters
BeautifulSoup	sigopt-beats-vegas/predictor/bet_reader.py	/^import BeautifulSoup$/;"	i
BertConfig	bert-distillation-multimetric/distilbert_data_model_loaders/load_transfomer_model.py	/^    BertForQuestionAnswering, BertTokenizer, DistilBertTokenizer$/;"	i
BertForQuestionAnswering	bert-distillation-multimetric/distilbert_data_model_loaders/load_transfomer_model.py	/^    BertForQuestionAnswering, BertTokenizer, DistilBertTokenizer$/;"	i
BertTokenizer	bert-distillation-multimetric/distilbert_data_model_loaders/load_transfomer_model.py	/^    BertForQuestionAnswering, BertTokenizer, DistilBertTokenizer$/;"	i
CACHE_DIR	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    CACHE_DIR = 'cache_dir'$/;"	v	class:RunParameters
CACHE_S3_BUCKET	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    CACHE_S3_BUCKET = "cache_s3_bucket"$/;"	v	class:RunParameters
CATEGORICAL	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_datatypes.py	/^    CATEGORICAL = 'categorical'$/;"	v	class:SigOptDataTypes
CHECKPOINT	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    CHECKPOINT = 'path_model_checkpoint'$/;"	v	class:CLI
CHECKPOINT	stanford-car-classification/resnet_stanford_cars_cli.py	/^    CHECKPOINT = 'path_model_checkpoint'$/;"	v	class:CLI
CHECKPOINT_FREQUENCY	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    CHECKPOINT_FREQUENCY = 'checkpoint_frequency'$/;"	v	class:CLI
CHECKPOINT_FREQUENCY	stanford-car-classification/resnet_stanford_cars_cli.py	/^    CHECKPOINT_FREQUENCY = 'checkpoint_frequency'$/;"	v	class:CLI
CLASSIFIER_TYPE_TO_PARAMS	classifier/classifier_tuner.py	/^from constant import CLASSIFIER_TYPE_TO_PARAMS, NUM_SIGOPT_SUGGESTIONS, GRID_SEARCH_WIDTH, NUM_RANDOM_SEARCHES, Dataset$/;"	i
CLASSIFIER_TYPE_TO_PARAMS	classifier/constant.py	/^CLASSIFIER_TYPE_TO_PARAMS = {$/;"	v
CLEAN_RAYTUNE_OUTPUT	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    CLEAN_RAYTUNE_OUTPUT = "clean_raytune_output"$/;"	v	class:RayTuneRunParameters
CLI	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^class CLI(Enum):$/;"	c
CLI	stanford-augmented-image-classification/orchestrate_stanford_cars_augmentation_cli.py	/^from stanford_cars_augmentation_cli import StanfordCarsAugmentationCLI, AugmentHyperparameters, CLI$/;"	i
CLI	stanford-augmented-image-classification/orchestrate_stanford_cars_cli.py	/^from stanford_cars_cli import CLI, StanfordCarsCLI$/;"	i
CLI	stanford-augmented-image-classification/resnet_stanford_cars_augmented_training.py	/^from stanford_cars_augmentation_cli import StanfordCarsAugmentationCLI, CLI$/;"	i
CLI	stanford-augmented-image-classification/resnet_stanford_cars_training.py	/^from stanford_cars_cli import CLI, StanfordCarsCLI$/;"	i
CLI	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^from a_resnet_training_common_cli import AStanfordCarsCLI, CLI$/;"	i
CLI	stanford-augmented-image-classification/stanford_cars_cli.py	/^from a_resnet_training_common_cli import AStanfordCarsCLI, CLI$/;"	i
CLI	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^from resnet_stanford_cars_cli import StanfordCarsCLI, Hyperparameters, CLI$/;"	i
CLI	stanford-car-classification/resnet_stanford_cars_cli.py	/^class CLI(Enum):$/;"	c
CLI	stanford-car-classification/run_resnet_training_cli.py	/^from resnet_stanford_cars_cli import StanfordCarsCLI, Hyperparameters, CLI$/;"	i
CNNModel	dnn-tuning-nvidia-mxnet/cnn_text/model.py	/^CNNModel = namedtuple("CNNModel", ['cnn_exec', 'symbol', 'data', 'label', 'param_blocks'])$/;"	v
CONFIG_NAME	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    CONFIG_NAME = 'config_name'$/;"	v	class:RunParameters
CONTRAST	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    CONTRAST = 'contrast'$/;"	v	class:AugmentHyperparameters
Callback	orchestrate/models/example/data_and_model_setup.py	/^from keras.callbacks import Callback$/;"	i
Callbacks	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.callbacks.callbacks import Callbacks, MetricCallback$/;"	i
Callbacks	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.callbacks.callbacks import Callbacks, MetricCallback$/;"	i
CarAugmentedDatasetAttributes	stanford-augmented-image-classification/stanford_car_dataset_augmented.py	/^from stanford_cars_data_config import CarAugmentedDatasetAttributes$/;"	i
CarAugmentedDatasetAttributes	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^from stanford_cars_data_config import CarAugmentedDatasetAttributes$/;"	i
CarAugmentedDatasetAttributes	stanford-augmented-image-classification/stanford_cars_data_config.py	/^class CarAugmentedDatasetAttributes(CarCommonDatasetAttributes):$/;"	c
CarCommonDatasetAttributes	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^from stanford_cars_data_config import CarCommonDatasetAttributes$/;"	i
CarCommonDatasetAttributes	stanford-augmented-image-classification/stanford_cars_data_config.py	/^class CarCommonDatasetAttributes(object):$/;"	c
CarDatasetAttributes	stanford-augmented-image-classification/stanford_car_dataset.py	/^from stanford_cars_data_config import CarDatasetAttributes$/;"	i
CarDatasetAttributes	stanford-augmented-image-classification/stanford_cars_data_config.py	/^class CarDatasetAttributes(CarCommonDatasetAttributes):$/;"	c
CarDatasetAttributes	stanford-car-classification/stanford_cars.py	/^class CarDatasetAttributes(Enum):$/;"	c
CheckpointCB	orchestrate/models/example/data_and_model_setup.py	/^class CheckpointCB(Callback):$/;"	c
CheckpointCB	orchestrate/models/example/keras_model.py	/^from data_and_model_setup import LoadTransformData, log_inference_metrics, CheckpointCB$/;"	i
CloudWatchLogsHandler	bert-distillation-multimetric/logger.py	/^from logbeam import CloudWatchLogsHandler$/;"	i
Config	dnn-tuning-nervana/sigopt_nervana.py	/^from ncloud.config import Config$/;"	i
ConfigMapping	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^class ConfigMapping(Enum):$/;"	c
Connection	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^from sigopt import Connection$/;"	i
Connection	bert-distillation-multimetric/sigopt_optimization_cli.py	/^from sigopt import Connection$/;"	i
Connection	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^from sigopt import Connection$/;"	i
Connection	classifier/classifier_tuner.py	/^from sigopt import Connection$/;"	i
Connection	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^from sigopt import Connection$/;"	i
Connection	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^from sigopt import Connection$/;"	i
Connection	dnn-tuning-nvidia-mxnet/run_experiments.py	/^from sigopt import Connection$/;"	i
Connection	maze-solving-mouse/sigopt_maze_analysis.py	/^from sigopt.interface import Connection$/;"	i
Connection	multimetric-timeseries/main.py	/^from sigopt import Connection$/;"	i
Connection	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^from sigopt import Connection$/;"	i
Connection	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^from sigopt import Connection$/;"	i
Connection	other-languages/other_languages.py	/^from sigopt import Connection$/;"	i
Connection	parallel/parallel.py	/^from sigopt import Connection$/;"	i
Connection	random-forest/python/random_forest.py	/^from sigopt import Connection$/;"	i
Connection	surprise-py-recsys/surprise_recommender.py	/^from sigopt import Connection$/;"	i
Connection	xgboost-py-classifier/xgboost_py_classifier.py	/^from sigopt import Connection$/;"	i
Connection	xgboost-py-regression/xgboost_py_regressor.py	/^from sigopt import Connection$/;"	i
Conv	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.layers import Conv, Dropout, Activation, Pooling, GeneralizedCost$/;"	i
Conv	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.layers import Conv, Dropout, Activation, Pooling, GeneralizedCost$/;"	i
CountVectorizer	text-classifier/python/sentiment_classifier.py	/^from sklearn.feature_extraction.text import CountVectorizer$/;"	i
Counter	dnn-tuning-nvidia-mxnet/cnn_text/preprocess.py	/^from collections import Counter$/;"	i
CrossEntropyMulti	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.transforms import Rectlin, Softmax, CrossEntropyMulti, Misclassification$/;"	i
CrossEntropyMulti	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.transforms import Rectlin, Softmax, CrossEntropyMulti, Misclassification$/;"	i
DATA	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    DATA = 'path_data'$/;"	v	class:CLI
DATA	stanford-car-classification/resnet_stanford_cars_cli.py	/^    DATA = 'path_data'$/;"	v	class:CLI
DATASET	multimetric-timeseries/config.py	/^DATASET = 'Adiac'$/;"	v
DATASET_FILE	multimetric-timeseries/config.py	/^DATASET_FILE = DATASET$/;"	v
DATASET_FOLDER	multimetric-timeseries/config.py	/^DATASET_FOLDER = os.path.join('UCR_TS_Archive_2015', DATASET)$/;"	v
DATASET_PATH	multimetric-timeseries/config.py	/^DATASET_PATH = os.path.join(THIS_DIR, DATASET_FOLDER, DATASET_FILE)$/;"	v
DATA_DIR	dnn-tuning-nervana/nervana_all_cnn.py	/^DATA_DIR = "\/home\/ubuntu\/data"$/;"	v
DATA_SUBSET	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    DATA_SUBSET = 'data_subset'$/;"	v	class:CLI
DATA_SUBSET	stanford-car-classification/resnet_stanford_cars_cli.py	/^    DATA_SUBSET = 'data_subset'$/;"	v	class:CLI
DECAY_RATE	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    DECAY_RATE = "decay_rate"$/;"	v	class:ParametersList
DELAY_CAP	amazon-ml-hyperparameter-optimization/config.py	/^DELAY_CAP = 60 * 4  # 4 mins$/;"	v
DEVICE	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^from squad_fine_tuning.set_seed_and_dist import DEVICE$/;"	i
DEVICE	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^from squad_fine_tuning.set_seed_and_dist import N_GPU, DEVICE$/;"	i
DEVICE	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^from squad_fine_tuning.set_seed_and_dist import setup_dist_training, set_seed, DEVICE$/;"	i
DEVICE	bert-distillation-multimetric/squad_fine_tuning/set_seed_and_dist.py	/^DEVICE = "device"$/;"	v
DEVICE	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^from squad_fine_tuning.set_seed_and_dist import setup_dist_training, set_seed, DEVICE$/;"	i
DEVICE	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from squad_fine_tuning.set_seed_and_dist import set_seed, N_GPU, DEVICE$/;"	i
DEVICE	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^from squad_fine_tuning.set_seed_and_dist import DEVICE$/;"	i
DIMENSION	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    DIMENSION = 'dim'$/;"	v	class:ArchitectureHyperparameter
DOC_STRIDE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    DOC_STRIDE = 'doc_stride'  # for generating features from squad$/;"	v	class:SquadArchitectureHyperparameter
DOUBLE	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_datatypes.py	/^    DOUBLE = 'double'$/;"	v	class:SigOptDataTypes
DO_EVAL	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    DO_EVAL = 'do_eval'$/;"	v	class:RunParameters
DO_LOWER_CASE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    DO_LOWER_CASE = 'do_lower_case'$/;"	v	class:RunParameters
DO_TRAIN	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    DO_TRAIN = 'do_train'$/;"	v	class:RunParameters
DROPOUT	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    DROPOUT = "dropout"  # used for embeddings and ffn$/;"	v	class:ArchitectureHyperparameter
Data	dnn-tuning-nvidia-mxnet/cnn_text/dataset.py	/^Data = namedtuple('Data', ['x_train', 'y_train', 'x_dev',$/;"	v
DataIterator	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.data import DataIterator, load_cifar10$/;"	i
DataIterator	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.data import DataIterator, load_cifar10$/;"	i
DataLoader	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^from torch.utils.data import DataLoader, SequentialSampler$/;"	i
DataLoader	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from torch.utils.data import RandomSampler, DistributedSampler, DataLoader$/;"	i
DataLoader	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^from torch.utils.data import DataLoader$/;"	i
DataLoader	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^from torch.utils.data import DataLoader$/;"	i
DataLoader	stanford-car-classification/run_resnet_training_cli.py	/^from torch.utils.data import DataLoader$/;"	i
DataSpec	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^    DataSpec = namedtuple("DataSpec", [$/;"	v
Dataset	classifier/classifier_tuner.py	/^from constant import CLASSIFIER_TYPE_TO_PARAMS, NUM_SIGOPT_SUGGESTIONS, GRID_SEARCH_WIDTH, NUM_RANDOM_SEARCHES, Dataset$/;"	i
Dataset	classifier/constant.py	/^Dataset = namedtuple($/;"	v
Dataset	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^from torch.utils.data import Dataset$/;"	i
Dataset	stanford-car-classification/stanford_cars.py	/^from torch.utils.data import Dataset$/;"	i
Dataset	surprise-py-recsys/surprise_recommender.py	/^from surprise import Dataset$/;"	i
Dense	orchestrate/models/example/keras_model.py	/^from keras.layers import Dense$/;"	i
DistilBertConfig	bert-distillation-multimetric/distilbert_data_model_loaders/load_transfomer_model.py	/^    BertForQuestionAnswering, BertTokenizer, DistilBertTokenizer$/;"	i
DistilBertForQuestionAnswering	bert-distillation-multimetric/distilbert_data_model_loaders/load_transfomer_model.py	/^    BertForQuestionAnswering, BertTokenizer, DistilBertTokenizer$/;"	i
DistilBertTokenizer	bert-distillation-multimetric/distilbert_data_model_loaders/load_transfomer_model.py	/^    BertForQuestionAnswering, BertTokenizer, DistilBertTokenizer$/;"	i
DistillationHyperparameter	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^class DistillationHyperparameter(Enum):$/;"	c
DistillationHyperparameter	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^    SGDHyperparameter, ArchitectureHyperparameter$/;"	i
DistillationHyperparameter	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_hyperparameter_definition.py	/^    DistillationHyperparameter, SGDHyperparameter$/;"	i
DistillationHyperparameter	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_runs_optimization_cycle.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_hpo_parameters import DistillationHyperparameter$/;"	i
DistillationHyperparameter	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_hpo_parameters import ArchitectureHyperparameter, DistillationHyperparameter$/;"	i
DistillationHyperparameter	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_hpo_parameters import ArchitectureHyperparameter, DistillationHyperparameter$/;"	i
DistillationHyperparameter	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_hpo_parameters import SGDHyperparameter, DistillationHyperparameter$/;"	i
DistributedSampler	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from torch.utils.data import RandomSampler, DistributedSampler, DataLoader$/;"	i
Dropout	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.layers import Conv, Dropout, Activation, Pooling, GeneralizedCost$/;"	i
Dropout	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.layers import Conv, Dropout, Activation, Pooling, GeneralizedCost$/;"	i
ENVIRONMENT_NAME	reinforcement-learning/dqn.py	/^ENVIRONMENT_NAME = 'CartPole-v0'$/;"	v
EPOCHS	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    EPOCHS = 'epochs'$/;"	v	class:CLI
EPOCHS	stanford-car-classification/resnet_stanford_cars_cli.py	/^    EPOCHS = 'epochs'$/;"	v	class:CLI
EPSILON	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    EPSILON = "epsilon"$/;"	v	class:ParametersList
EVALUATE_DURING_TRAINING	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    EVALUATE_DURING_TRAINING = 'evaluate_during_training'$/;"	v	class:RunParameters
EVAL_ALL_CHECKPOINTS	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    EVAL_ALL_CHECKPOINTS = 'eval_all_checkpoints'$/;"	v	class:RunParameters
EVAL_CACHE_S3_DIRECTORY	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    EVAL_CACHE_S3_DIRECTORY = "eval_cache_s3_directory"$/;"	v	class:RunParameters
EXACT	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^    EXACT = "exact"$/;"	v	class:ResultsAttributes
EXACT_THRESHOLD	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^EXACT_THRESHOLD = 50$/;"	v
EXPERIMENT_NAME	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    EXPERIMENT_NAME = "experiment_name"$/;"	v	class:OptimizationRunParameters
EXPERIMENT_NAME	multimetric-timeseries/config.py	/^EXPERIMENT_NAME = 'multimetric time series accuracy vs. inference time'$/;"	v
EXPERIMENT_NAME	multimetric-timeseries/main.py	/^from config import (SIGOPT_API_TOKEN, PARAMETERS, EXPERIMENT_NAME,$/;"	i
EXP_TRANSFORM	sigopt-beats-vegas/predictor/game_stats.py	/^EXP_TRANSFORM = 'exp_transform'$/;"	v
EXP_TRANSFORM	sigopt-beats-vegas/predictor/stand_alone.py	/^from game_stats import EXP_TRANSFORM$/;"	i
Enum	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^from enum import Enum$/;"	i
Enum	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^from enum import Enum$/;"	i
Enum	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_datatypes.py	/^from enum import Enum$/;"	i
Enum	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^from enum import Enum$/;"	i
Enum	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^from enum import Enum$/;"	i
Enum	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^from enum import Enum$/;"	i
Enum	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^from enum import Enum$/;"	i
Enum	stanford-augmented-image-classification/i_orchestrate_multitask.py	/^from enum import Enum$/;"	i
Enum	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^from enum import Enum$/;"	i
Enum	stanford-augmented-image-classification/stanford_cars_data_config.py	/^from enum import Enum$/;"	i
Enum	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^from enum import Enum$/;"	i
Enum	stanford-car-classification/resnet_stanford_cars_cli.py	/^from enum import Enum$/;"	i
Enum	stanford-car-classification/stanford_cars.py	/^from enum import Enum$/;"	i
EvalSquadDistillation	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^class EvalSquadDistillation(object):$/;"	c
EvalSquadDistillation	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from squad_fine_tuning.eval_squad_distillation import EvalSquadDistillation$/;"	i
EvalSquadDistillation	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^from squad_fine_tuning.eval_squad_distillation import EvalSquadDistillation$/;"	i
Evaluation	amazon-ml-hyperparameter-optimization/evaluation.py	/^class Evaluation(object):$/;"	c
Evaluation	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^from evaluation import Evaluation$/;"	i
ExampleRunner	classifier/classifier_tuner.py	/^class ExampleRunner(object):$/;"	c
ExperimentTypes	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^class ExperimentTypes(Enum):$/;"	c
F	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from torch.nn import functional as F$/;"	i
F1	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^    F1 = "f1"$/;"	v	class:ResultsAttributes
F1score	xgboost-py-classifier/xgboost_py_classifier.py	/^F1score = f1_score(y_test, prediction)$/;"	v
FIFOScheduler	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^from ray.tune.schedulers import FIFOScheduler$/;"	i
FLAGS	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^    FLAGS = tf.flags.FLAGS$/;"	v
FLAGS	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^    FLAGS = tf.flags.FLAGS$/;"	v
FLAGS	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_optimization_run.py	/^FLAGS = tf.flags.FLAGS$/;"	v
FP16_OPT_LEVEL	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    FP16_OPT_LEVEL = 'fp16_opt_level'$/;"	v	class:RunParameters
FP_16	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    FP_16 = 'use_bfloat16'$/;"	v	class:RunParameters
FREEZE_WEIGHTS	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    FREEZE_WEIGHTS = 'freeze_weights'$/;"	v	class:CLI
FREEZE_WEIGHTS	stanford-car-classification/resnet_stanford_cars_cli.py	/^    FREEZE_WEIGHTS = 'freeze_weights'$/;"	v	class:CLI
FeatureSet	sigopt-beats-vegas/predictor/features.py	/^FeatureSet = namedtuple($/;"	v
FeatureSet	sigopt-beats-vegas/predictor/game_stats.py	/^from features import FeatureSet$/;"	i
Fold	amazon-ml-hyperparameter-optimization/fold.py	/^class Fold(object):$/;"	c
Fold	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^from fold import Fold$/;"	i
GAMES_RANGE	sigopt-beats-vegas/boxscores/scraper/scraper.py	/^GAMES_RANGE = range(1, NUM_GAMES_A_SEASON + 1)$/;"	v
GBC_PARAMS	classifier/constant.py	/^GBC_PARAMS = [$/;"	v
GRADIENT_ACCUMULATION_STEPS	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    GRADIENT_ACCUMULATION_STEPS = 'gradient_accumulation_steps'$/;"	v	class:SGDHyperparameter
GRADIENT_DESCENT_MOMENTUM	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    GRADIENT_DESCENT_MOMENTUM = "GradientDescentMomentum"$/;"	v	class:SGDOptimizer
GRID_SEARCH_WIDTH	classifier/classifier_tuner.py	/^from constant import CLASSIFIER_TYPE_TO_PARAMS, NUM_SIGOPT_SUGGESTIONS, GRID_SEARCH_WIDTH, NUM_RANDOM_SEARCHES, Dataset$/;"	i
GRID_SEARCH_WIDTH	classifier/constant.py	/^GRID_SEARCH_WIDTH = 4$/;"	v
GameStats	sigopt-beats-vegas/predictor/game_stats.py	/^class GameStats(object):$/;"	c
GameStats	sigopt-beats-vegas/predictor/team_stats.py	/^from game_stats import GameStats$/;"	i
Gaussian	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.initializers import Gaussian$/;"	i
Gaussian	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.initializers import Gaussian$/;"	i
GeneralizedCost	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.layers import Conv, Dropout, Activation, Pooling, GeneralizedCost$/;"	i
GeneralizedCost	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.layers import Conv, Dropout, Activation, Pooling, GeneralizedCost$/;"	i
GradientDescentMomentum	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.optimizers import GradientDescentMomentum, Schedule$/;"	i
GradientDescentMomentum	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.optimizers import GradientDescentMomentum, Schedule$/;"	i
GridSearchCV	surprise-py-recsys/surprise_recommender.py	/^from surprise.model_selection import GridSearchCV$/;"	i
HIDDEN_DIMENSION	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    HIDDEN_DIMENSION = 'hidden_dim'  # intermediate hidden layer dimension for ffn$/;"	v	class:ArchitectureHyperparameter
HOP_SIZE	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    HOP_SIZE = "hop_size"$/;"	v	class:ParametersList
HUE	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    HUE = 'hue'$/;"	v	class:AugmentHyperparameters
Hyperparameters	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^class Hyperparameters(Enum):$/;"	c
Hyperparameters	stanford-augmented-image-classification/i_commandline_arguments.py	/^from a_resnet_training_common_cli import Hyperparameters$/;"	i
Hyperparameters	stanford-augmented-image-classification/orchestrate_stanford_cars_augmentation_cli.py	/^from a_resnet_training_common_cli import Hyperparameters$/;"	i
Hyperparameters	stanford-augmented-image-classification/orchestrate_stanford_cars_cli.py	/^from a_resnet_training_common_cli import Hyperparameters$/;"	i
Hyperparameters	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^from resnet_stanford_cars_cli import StanfordCarsCLI, Hyperparameters, CLI$/;"	i
Hyperparameters	stanford-car-classification/resnet_stanford_cars_cli.py	/^class Hyperparameters(Enum):$/;"	c
Hyperparameters	stanford-car-classification/run_resnet_training_cli.py	/^from resnet_stanford_cars_cli import StanfordCarsCLI, Hyperparameters, CLI$/;"	i
IMAGES	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    IMAGES = 'path_images'$/;"	v	class:CLI
IMAGES	stanford-car-classification/resnet_stanford_cars_cli.py	/^    IMAGES = 'path_images'$/;"	v	class:CLI
IMAGE_DATA_DIR	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^IMAGE_DATA_DIR = 'car_ims'$/;"	v
IMAGE_PATH	stanford-car-classification/stanford_cars.py	/^    IMAGE_PATH = 'image_path'$/;"	v	class:StanfordCarsTestData
IMAGE_TRANSFORMS	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    IMAGE_TRANSFORMS = [torchvision.transforms.Resize(224),$/;"	v	class:AStanfordCarsCLI
INFERENCE_TIME	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^    INFERENCE_TIME = "inference_time"$/;"	v	class:ResultsAttributes
INITIAL_POLLING_DELAY	amazon-ml-hyperparameter-optimization/config.py	/^INITIAL_POLLING_DELAY = 1  # 1 second$/;"	v
INIT_RANGE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    INIT_RANGE = 'initializer_range'  # weight initialization for student model$/;"	v	class:ArchitectureHyperparameter
INT	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_datatypes.py	/^    INT = 'int'$/;"	v	class:SigOptDataTypes
IS_AUGMENT	stanford-augmented-image-classification/stanford_cars_data_config.py	/^    IS_AUGMENT = 'is_augment'$/;"	v	class:CarAugmentedDatasetAttributes
Image	stanford-augmented-image-classification/stanford_car_dataset.py	/^from PIL import Image$/;"	i
Image	stanford-augmented-image-classification/stanford_car_dataset_augmented.py	/^from PIL import Image$/;"	i
Image	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^from PIL import Image$/;"	i
Image	stanford-car-classification/stanford_cars.py	/^from PIL import Image$/;"	i
InferenceTime	xgboost-py-classifier/xgboost_py_classifier.py	/^InferenceTime = time.time() - start$/;"	v
JobRunner	dnn-tuning-nervana/sigopt_nervana.py	/^class JobRunner(object):$/;"	c
KerasModel	orchestrate/models/example/keras_model.py	/^class KerasModel:$/;"	c
LABEL	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^    LABEL = 'label'$/;"	v	class:AStanfordCarDataset
LABEL	stanford-augmented-image-classification/stanford_cars_data_config.py	/^    LABEL = 'class'$/;"	v	class:CarCommonDatasetAttributes
LABEL	stanford-car-classification/stanford_cars.py	/^    LABEL = 'class'$/;"	v	class:CarDatasetAttributes
LABEL	stanford-car-classification/stanford_cars.py	/^    LABEL = 'label'$/;"	v	class:StanfordCars
LABEL	stanford-car-classification/stanford_cars.py	/^    LABEL = 'label'$/;"	v	class:StanfordCarsTestData
LABELS	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    LABELS = 'path_labels'$/;"	v	class:CLI
LABELS	stanford-car-classification/resnet_stanford_cars_cli.py	/^    LABELS = 'path_labels'$/;"	v	class:CLI
LEARNING_RATE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    LEARNING_RATE = 'learning_rate'$/;"	v	class:SGDHyperparameter
LEARNING_RATE	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    LEARNING_RATE = "learning_rate"$/;"	v	class:ParametersList
LEARNING_RATE	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    LEARNING_RATE = 'learning_rate'$/;"	v	class:Hyperparameters
LEARNING_RATE	stanford-car-classification/resnet_stanford_cars_cli.py	/^    LEARNING_RATE = 'learning_rate'$/;"	v	class:Hyperparameters
LEARNING_RATE_SCHEDULER	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    LEARNING_RATE_SCHEDULER = 'learning_rate_scheduler'$/;"	v	class:Hyperparameters
LEARNING_RATE_SCHEDULER	stanford-car-classification/resnet_stanford_cars_cli.py	/^    LEARNING_RATE_SCHEDULER = 'learning_rate_scheduler'$/;"	v	class:Hyperparameters
LINEAR_TRANSFORM	sigopt-beats-vegas/predictor/game_stats.py	/^LINEAR_TRANSFORM = 'linear_transform'$/;"	v
LOAD_PRETRAINED_MODEL	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    LOAD_PRETRAINED_MODEL = "load_student_pretrained"$/;"	v	class:RunParameters
LOAD_SEMI_PRETRAINED_MODEL	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    LOAD_SEMI_PRETRAINED_MODEL = "load_student_semi_pretrained"$/;"	v	class:RunParameters
LOCAL_RANK	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    LOCAL_RANK = 'local_rank'$/;"	v	class:RunParameters
LOGGING_STEPS	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    LOGGING_STEPS = 'logging_steps'$/;"	v	class:RunParameters
LOG_TRANSFORM_HYPERPARAMETERS	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_hyperparameter_definition.py	/^LOG_TRANSFORM_HYPERPARAMETERS = [SGDHyperparameter.LEARNING_RATE.value, SGDHyperparameter.ADAM_EPSILON.value,$/;"	v
LOG_TRANSFORM_HYPERPARAMETERS	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^from sigopt_optimization_wrapper.sigopt_hyperparameter_definition import LOG_TRANSFORM_HYPERPARAMETERS$/;"	i
LOSS_MONEY	sigopt-beats-vegas/predictor/evaluator.py	/^LOSS_MONEY = 110$/;"	v
LabelEncoder	xgb-integration-py-class/xgb-integration-py-class.py	/^from sklearn.preprocessing import LabelEncoder$/;"	i
LabelEncoder	xgb-integration-py-reg/xgb-integration-py-reg.py	/^from sklearn.preprocessing import LabelEncoder$/;"	i
LabelEncoder	xgboost-py-classifier/xgboost_py_classifier.py	/^from sklearn.preprocessing import LabelEncoder$/;"	i
LedoitWolf	unsupervised-model/unsupervised_model.py	/^from sklearn.covariance import LedoitWolf$/;"	i
LoadModel	bert-distillation-multimetric/distilbert_data_model_loaders/load_transfomer_model.py	/^class LoadModel(object):$/;"	c
LoadModel	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_from_scratch.py	/^from distilbert_data_model_loaders.load_transfomer_model import LoadModel$/;"	i
LoadModel	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_pretrained.py	/^from distilbert_data_model_loaders.load_transfomer_model import LoadModel$/;"	i
LoadModel	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_semi_pretrained.py	/^from distilbert_data_model_loaders.load_transfomer_model import LoadModel$/;"	i
LoadModelFromScratch	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_from_scratch.py	/^class LoadModelFromScratch(LoadModel):$/;"	c
LoadPretrainedModel	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_pretrained.py	/^class LoadPretrainedModel(LoadModel):$/;"	c
LoadSemiPretrainedModel	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_semi_pretrained.py	/^class LoadSemiPretrainedModel(LoadModel):$/;"	c
LoadTransformData	orchestrate/models/example/data_and_model_setup.py	/^class LoadTransformData:$/;"	c
LoadTransformData	orchestrate/models/example/keras_model.py	/^from data_and_model_setup import LoadTransformData, log_inference_metrics, CheckpointCB$/;"	i
LoadTransformData	orchestrate/models/example/xgboost_model.py	/^from data_and_model_setup import LoadTransformData, log_inference_metrics$/;"	i
MAXIMIZE	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^    MAXIMIZE = 'maximize'$/;"	v	class:MetricObjectives
MAX_ANSWER_LENGTH	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    MAX_ANSWER_LENGTH = 'max_answer_length'  # for calculating squad metrics$/;"	v	class:SquadArchitectureHyperparameter
MAX_CONCURRENT	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    MAX_CONCURRENT = "max_concurrent"$/;"	v	class:RayTuneRunParameters
MAX_EPISODES	reinforcement-learning/dqn.py	/^MAX_EPISODES = 350$/;"	v
MAX_GRAD_NORM	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    MAX_GRAD_NORM = 'max_grad_norm'$/;"	v	class:SGDHyperparameter
MAX_LOOKBACK_DAYS	sigopt-beats-vegas/predictor/game_stats.py	/^MAX_LOOKBACK_DAYS = 90$/;"	v
MAX_QUERY_LENGTH	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    MAX_QUERY_LENGTH = 'max_query_length'  # for generating features from squad$/;"	v	class:SquadArchitectureHyperparameter
MAX_SEQ_LENGTH	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    MAX_SEQ_LENGTH = 'max_seq_length'  # for generating features from squad$/;"	v	class:SquadArchitectureHyperparameter
MAX_STEPS	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    MAX_STEPS = 'max_steps'$/;"	v	class:RunParameters
MAX_TIMESTEPS	reinforcement-learning/dqn.py	/^MAX_TIMESTEPS = 10000$/;"	v
MEMORY_SIZE	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    MEMORY_SIZE = "memory_size"$/;"	v	class:ParametersList
METRICS	multimetric-timeseries/config.py	/^METRICS = [$/;"	v
METRIC_1	multimetric-timeseries/config.py	/^METRIC_1 = 'val_acc'$/;"	v
METRIC_2	multimetric-timeseries/config.py	/^METRIC_2 = 'inference_time'$/;"	v
MINIMIZE	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^    MINIMIZE = 'minimize'$/;"	v	class:MetricObjectives
MODEL	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    MODEL = 'model'$/;"	v	class:CLI
MODEL	stanford-car-classification/resnet_stanford_cars_cli.py	/^    MODEL = 'model'$/;"	v	class:CLI
MODEL_CLASSES	bert-distillation-multimetric/distilbert_data_model_loaders/load_transfomer_model.py	/^MODEL_CLASSES = {$/;"	v
MODEL_NAME_OR_PATH	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    MODEL_NAME_OR_PATH = 'model_name_or_path'$/;"	v	class:RunParameters
MODEL_TYPE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    MODEL_TYPE = 'model_type'$/;"	v	class:RunParameters
MOMENTUM	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    MOMENTUM = "momentum"$/;"	v	class:ParametersList
MOMENTUM	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    MOMENTUM = 'momentum'$/;"	v	class:Hyperparameters
MOMENTUM	stanford-car-classification/resnet_stanford_cars_cli.py	/^    MOMENTUM = 'momentum'$/;"	v	class:Hyperparameters
Master	parallel/parallel.py	/^class Master(threading.Thread):$/;"	c
MemN2N	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^from memn2n.memn2n_components import MemN2N$/;"	i
MemN2N	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^class MemN2N(object):$/;"	c
MemN2N	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^from memn2n.memn2n_components import MemN2N$/;"	i
MetricCallback	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.callbacks.callbacks import Callbacks, MetricCallback$/;"	i
MetricCallback	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.callbacks.callbacks import Callbacks, MetricCallback$/;"	i
MetricObjectives	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^class MetricObjectives(Enum):$/;"	c
MetricStrategy	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^class MetricStrategy(Enum):$/;"	c
Misclassification	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.transforms import Rectlin, Softmax, CrossEntropyMulti, Misclassification$/;"	i
Misclassification	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.transforms import Rectlin, Softmax, CrossEntropyMulti, Misclassification$/;"	i
Model	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.models import Model$/;"	i
Model	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.models import Model$/;"	i
Model	multimetric-timeseries/train.py	/^from keras.models import Model$/;"	i
ModelSpec	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^    ModelSpec = namedtuple("ModelSpec", [$/;"	v
Multitask	stanford-augmented-image-classification/i_orchestrate_multitask.py	/^class Multitask(Enum):$/;"	c
Multitask	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^        class Multitask(Enum):$/;"	c	function:OrchestrateCLI.run
NB_EPOCHS	multimetric-timeseries/config.py	/^NB_EPOCHS = 500$/;"	v
NB_EPOCHS	multimetric-timeseries/train.py	/^from config import NB_EPOCHS$/;"	i
NEGATIVE_TEXT	text-classifier/python/sentiment_classifier.py	/^NEGATIVE_TEXT = json.load(open("NEGATIVE_list.json"))$/;"	v
NESTEROV	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    NESTEROV = "nesterov"$/;"	v	class:ParametersList
NESTEROV	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    NESTEROV = 'nesterov'$/;"	v	class:Hyperparameters
NESTEROV	stanford-car-classification/resnet_stanford_cars_cli.py	/^    NESTEROV = 'nesterov'$/;"	v	class:Hyperparameters
NO_CUDA	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    NO_CUDA = 'no_cuda'$/;"	v	class:RunParameters
NUM_CLASSES	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    NUM_CLASSES = 'number_of_classes'$/;"	v	class:CLI
NUM_CLASSES	stanford-car-classification/resnet_stanford_cars_cli.py	/^    NUM_CLASSES = 'number_of_classes'$/;"	v	class:CLI
NUM_CPU	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    NUM_CPU = "num_cpu"$/;"	v	class:RayTuneRunParameters
NUM_GAMES_A_SEASON	sigopt-beats-vegas/boxscores/scraper/scraper.py	/^NUM_GAMES_A_SEASON = 82 * 30 \/ 2$/;"	v
NUM_GPU	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    NUM_GPU = "num_gpu"$/;"	v	class:RayTuneRunParameters
NUM_PARAMETERS	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^    NUM_PARAMETERS = "num_parameters"$/;"	v	class:ResultsAttributes
NUM_RANDOM_SEARCHES	classifier/classifier_tuner.py	/^from constant import CLASSIFIER_TYPE_TO_PARAMS, NUM_SIGOPT_SUGGESTIONS, GRID_SEARCH_WIDTH, NUM_RANDOM_SEARCHES, Dataset$/;"	i
NUM_RANDOM_SEARCHES	classifier/constant.py	/^NUM_RANDOM_SEARCHES = 192$/;"	v
NUM_SIGOPT_SUGGESTIONS	classifier/classifier_tuner.py	/^from constant import CLASSIFIER_TYPE_TO_PARAMS, NUM_SIGOPT_SUGGESTIONS, GRID_SEARCH_WIDTH, NUM_RANDOM_SEARCHES, Dataset$/;"	i
NUM_SIGOPT_SUGGESTIONS	classifier/constant.py	/^NUM_SIGOPT_SUGGESTIONS = 40$/;"	v
NUM_TRAIN_EPOCHS	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    NUM_TRAIN_EPOCHS = 'num_train_epochs'$/;"	v	class:RunParameters
NUM_WORKERS	parallel/parallel.py	/^NUM_WORKERS = 2$/;"	v
N_BEST_SIZE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    N_BEST_SIZE = 'n_best_size'$/;"	v	class:RunParameters
N_GPU	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^from squad_fine_tuning.set_seed_and_dist import N_GPU, DEVICE$/;"	i
N_GPU	bert-distillation-multimetric/squad_fine_tuning/set_seed_and_dist.py	/^N_GPU = "n_gpu"$/;"	v
N_GPU	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from squad_fine_tuning.set_seed_and_dist import set_seed, N_GPU, DEVICE$/;"	i
N_HEADS	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    N_HEADS = 'n_heads'  # DistilBert number of attention heads$/;"	v	class:ArchitectureHyperparameter
N_LAYERS	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    N_LAYERS = 'n_layers'  # DistilBert number of layers$/;"	v	class:ArchitectureHyperparameter
NeonArgparser	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.util.argparser import NeonArgparser$/;"	i
NeonArgparser	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.util.argparser import NeonArgparser$/;"	i
OBSERVATION_BUDGET	multimetric-timeseries/config.py	/^OBSERVATION_BUDGET = len(PARAMETERS) * 20 * 2$/;"	v
OPTIMIZE	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^    OPTIMIZE = 'optimize'$/;"	v	class:MetricStrategy
OPTIMIZER	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    OPTIMIZER = "optimizer"$/;"	v	class:ParametersList
OUTPUT_DIR	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    OUTPUT_DIR = 'output_dir'$/;"	v	class:RunParameters
OVERWRITE_OUTPUT_DIR	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    OVERWRITE_OUTPUT_DIR = 'overwrite_output_dir'$/;"	v	class:RunParameters
OVERWRTIE_CACHE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    OVERWRTIE_CACHE = 'overwrite_cache'$/;"	v	class:RunParameters
OptimizationRunParameters	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^class OptimizationRunParameters(Enum):$/;"	c
OptimizationRunParameters	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import OptimizationRunParameters, RunParameters, RayTuneRunParameters$/;"	i
OptimizationRunParameters	bert-distillation-multimetric/sigopt_optimization_cli.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import OptimizationRunParameters, RunParameters$/;"	i
OptimizationRunParameters	bert-distillation-multimetric/sigopt_optimization_wrapper/runs_optimize_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import OptimizationRunParameters$/;"	i
OptimizationRunParameters	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RayTuneRunParameters, OptimizationRunParameters, RunParameters$/;"	i
OptimizationRunParameters	bert-distillation-multimetric/squad_distillation_abstract_clis/a_optimizaton_run_squad_cli.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import OptimizationRunParameters$/;"	i
OptimizationRunParameters	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RunParameters, OptimizationRunParameters$/;"	i
OptimizeDistilBertQuadCLI	bert-distillation-multimetric/sigopt_optimization_cli.py	/^from squad_distillation_abstract_clis.a_optimizaton_run_squad_cli import OptimizeDistilBertQuadCLI$/;"	i
OptimizeDistilBertQuadCLI	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^from squad_distillation_abstract_clis.a_optimizaton_run_squad_cli import OptimizeDistilBertQuadCLI$/;"	i
OptimizeDistilBertQuadCLI	bert-distillation-multimetric/squad_distillation_abstract_clis/a_optimizaton_run_squad_cli.py	/^class OptimizeDistilBertQuadCLI(ARunDistilBertSquadCLI):$/;"	c
OptimizeSquadDistillation	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^from squad_fine_tuning.optimize_squad_distillation import OptimizeSquadDistillation$/;"	i
OptimizeSquadDistillation	bert-distillation-multimetric/sigopt_optimization_wrapper/runs_optimize_squad_distillation.py	/^from squad_fine_tuning.optimize_squad_distillation import OptimizeSquadDistillation$/;"	i
OptimizeSquadDistillation	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^class OptimizeSquadDistillation(ARunSquadDistillation):$/;"	c
OrchestrateAugmentationCLI	stanford-augmented-image-classification/orchestrate_stanford_cars_augmentation_cli.py	/^class OrchestrateAugmentationCLI(StanfordCarsAugmentationCLI):$/;"	c
OrchestrateCLI	stanford-augmented-image-classification/orchestrate_stanford_cars_cli.py	/^class OrchestrateCLI(StanfordCarsCLI):$/;"	c
OrchestrateCLI	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^class OrchestrateCLI(StanfordCarsCLI):$/;"	c
PAPER_PARAMS	dnn-tuning-nervana/constant.py	/^PAPER_PARAMS = {$/;"	v
PAPER_PARAMS	dnn-tuning-nervana/sigopt_nervana.py	/^from constant import TUNABLE_PARAMS, PAPER_PARAMS$/;"	i
PARALLEL	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    PARALLEL = "parallel"$/;"	v	class:RayTuneRunParameters
PARAMETERS	multimetric-timeseries/config.py	/^PARAMETERS = [$/;"	v
PARAMETERS	multimetric-timeseries/main.py	/^from config import (SIGOPT_API_TOKEN, PARAMETERS, EXPERIMENT_NAME,$/;"	i
PARAMETERS	parallel/data.py	/^PARAMETERS = [$/;"	v
PARAMETERS	parallel/parallel.py	/^from data import PARAMETERS, evaluate_model$/;"	i
PER_COMPUTE_EVAL_BATCH_SIZE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    PER_COMPUTE_EVAL_BATCH_SIZE = 'per_compute_eval_batch_size'$/;"	v	class:SGDHyperparameter
PER_COMPUTE_TRAIN_BATCH_SIZE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    PER_COMPUTE_TRAIN_BATCH_SIZE = 'per_compute_train_batch_size'$/;"	v	class:SGDHyperparameter
PIPE	other-languages/other_languages.py	/^from subprocess import PIPE, Popen$/;"	i
POSITIVE_TEXT	text-classifier/python/sentiment_classifier.py	/^POSITIVE_TEXT = json.load(open("POSITIVE_list.json"))$/;"	v
PREDICT_FILE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    PREDICT_FILE = 'predict_file'$/;"	v	class:RunParameters
PREFER_MEAN_ON_Y_AXIS	maze-solving-mouse/sigopt_maze_analysis.py	/^PREFER_MEAN_ON_Y_AXIS = True$/;"	v
PROBABILITY	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    PROBABILITY = 'probability'$/;"	v	class:AugmentCLI
PROJECT_NAME	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    PROJECT_NAME = "project_name"$/;"	v	class:OptimizationRunParameters
PROJECT_NAME	multimetric-timeseries/config.py	/^PROJECT_NAME = 'sigopt-examples'$/;"	v
PRUNING_SEED	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    PRUNING_SEED = "pruning_seed" #seed set for pruning$/;"	v	class:ArchitectureHyperparameter
PalmNet	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^from resnet import PalmNet$/;"	i
PalmNet	stanford-car-classification/resnet.py	/^class PalmNet(object):$/;"	c
PalmNet	stanford-car-classification/run_resnet_training_cli.py	/^from resnet import PalmNet$/;"	i
Parallel	sigopt-beats-vegas/predictor/run_model.py	/^from joblib import Parallel, delayed$/;"	i
ParametersList	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^from sigopt_memn2n_setup.sigopt_memn2n_experiment_setup import ParametersList$/;"	i
ParametersList	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^from sigopt_memn2n_setup.sigopt_memn2n_experiment_setup import ParametersList$/;"	i
ParametersList	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/random_search_parameters_config.py	/^from sigopt_memn2n_setup.sigopt_hyperparameters_enum import ParametersList$/;"	i
ParametersList	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_conditionals_parameters_config.py	/^from sigopt_memn2n_setup.sigopt_hyperparameters_enum import ParametersList$/;"	i
ParametersList	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^class ParametersList(Enum):$/;"	c
ParametersList	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^from sigopt_memn2n_setup.sigopt_hyperparameters_enum import ParametersList$/;"	i
ParametersList	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_parameters_config.py	/^from sigopt_memn2n_setup.sigopt_hyperparameters_enum import ParametersList$/;"	i
Pooling	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.layers import Conv, Dropout, Activation, Pooling, GeneralizedCost$/;"	i
Pooling	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.layers import Conv, Dropout, Activation, Pooling, GeneralizedCost$/;"	i
Popen	other-languages/other_languages.py	/^from subprocess import PIPE, Popen$/;"	i
Process	multimetric-timeseries/main.py	/^from multiprocessing import Process, Queue$/;"	i
QA_DROPOUT	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    QA_DROPOUT = 'qa_dropout'  # dropout used for whole network for question answering$/;"	v	class:ArchitectureHyperparameter
QNetwork	reinforcement-learning/dqn.py	/^class QNetwork:$/;"	c
Queue	multimetric-timeseries/main.py	/^from multiprocessing import Process, Queue$/;"	i
RANDOM	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^    RANDOM = "random"$/;"	v	class:ExperimentTypes
RANDOM	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^    RANDOM = random_search_parameters_config$/;"	v	class:ConfigMapping
RANDOM_STRATEGY_RANDOM_SEED	amazon-ml-hyperparameter-optimization/config.py	/^RANDOM_STRATEGY_RANDOM_SEED = "RANDOMSEED"$/;"	v
RAY_ADDRESS	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    RAY_ADDRESS = "ray_address"$/;"	v	class:RayTuneRunParameters
RAY_OUTPUT_DIR	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^    RAY_OUTPUT_DIR = os.path.expanduser("~\/ray_results")$/;"	v	class:RayTuneSigOptDistilBertSquadCLI
RAY_OUTPUT_DIRECTORY	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    RAY_OUTPUT_DIRECTORY = "raytune_output_directory"$/;"	v	class:RayTuneRunParameters
REL_IMAGE_PATH	stanford-augmented-image-classification/stanford_cars_data_config.py	/^    REL_IMAGE_PATH = 'relative_im_path'$/;"	v	class:CarCommonDatasetAttributes
REL_IMAGE_PATH	stanford-car-classification/stanford_cars.py	/^    REL_IMAGE_PATH = 'relative_im_path'$/;"	v	class:CarDatasetAttributes
RFC_PARAMS	classifier/constant.py	/^RFC_PARAMS = [$/;"	v
RMSPROP	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    RMSPROP = "RMSProp"$/;"	v	class:SGDOptimizer
RUNS_NAME	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_runs_optimization_cycle.py	/^    RUNS_NAME = "Distillation Run"$/;"	v	class:SigOptCycle
RandomForestClassifier	parallel/data.py	/^from sklearn.ensemble import RandomForestClassifier$/;"	i
RandomForestClassifier	random-forest/python/random_forest.py	/^from sklearn.ensemble import RandomForestClassifier$/;"	i
RandomForestClassifier	random-forest/python/random_forest.sklearn.py	/^from sklearn.ensemble import RandomForestClassifier$/;"	i
RandomForestClassifier	xgboost-py-classifier/xgboost_py_classifier.py	/^from sklearn.ensemble import RandomForestClassifier$/;"	i
RandomSampler	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from torch.utils.data import RandomSampler, DistributedSampler, DataLoader$/;"	i
RayTuneOptimizeSquadDistillation	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^class RayTuneOptimizeSquadDistillation(OptimizeSquadDistillation):$/;"	c
RayTuneRunParameters	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^class RayTuneRunParameters(Enum):$/;"	c
RayTuneRunParameters	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import OptimizationRunParameters, RunParameters, RayTuneRunParameters$/;"	i
RayTuneRunParameters	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RayTuneRunParameters, OptimizationRunParameters, RunParameters$/;"	i
RayTuneSigOptDistilBertSquadCLI	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^class RayTuneSigOptDistilBertSquadCLI(OptimizeDistilBertQuadCLI):$/;"	c
Rectlin	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.transforms import Rectlin, Softmax, CrossEntropyMulti, Misclassification$/;"	i
Rectlin	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.transforms import Rectlin, Softmax, CrossEntropyMulti, Misclassification$/;"	i
ReduceLROnPlateau	multimetric-timeseries/train.py	/^from keras.callbacks import ReduceLROnPlateau$/;"	i
ResNet	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^from resnet import ResNet$/;"	i
ResNet	stanford-augmented-image-classification/resnet.py	/^class ResNet(object):$/;"	c
ResNetAugmentedTraining	stanford-augmented-image-classification/resnet_stanford_cars_augmented_training.py	/^class ResNetAugmentedTraining(StanfordCarsAugmentationCLI):$/;"	c
ResNetTraining	stanford-augmented-image-classification/resnet_stanford_cars_training.py	/^class ResNetTraining(StanfordCarsCLI):$/;"	c
ResnetTrainingCLI	stanford-car-classification/run_resnet_training_cli.py	/^class ResnetTrainingCLI(StanfordCarsCLI):$/;"	c
ResultsAttributes	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^class ResultsAttributes(Enum):$/;"	c
ResultsAttributes	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^from sigopt_optimization_wrapper.sigopt_multimetric_definition import ResultsAttributes$/;"	i
RightTurnSolver	maze-solving-mouse/maze_tools.py	/^class RightTurnSolver(object):$/;"	c
RightTurnSolver	maze-solving-mouse/sigopt_maze_analysis.py	/^from maze_tools import RightTurnSolver$/;"	i
RunDistilBertSquadCLI	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^class RunDistilBertSquadCLI(ARunDistilBertSquadCLI):$/;"	c
RunParameters	bert-distillation-multimetric/distilbert_data_model_loaders/load_squad_dataset.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RunParameters$/;"	i
RunParameters	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^class RunParameters(Enum):$/;"	c
RunParameters	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import OptimizationRunParameters, RunParameters, RayTuneRunParameters$/;"	i
RunParameters	bert-distillation-multimetric/sigopt_optimization_cli.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import OptimizationRunParameters, RunParameters$/;"	i
RunParameters	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RayTuneRunParameters, OptimizationRunParameters, RunParameters$/;"	i
RunParameters	bert-distillation-multimetric/squad_distillation_abstract_clis/a_run_squad_w_distillation_cli.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RunParameters, get_default_run_parameters$/;"	i
RunParameters	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RunParameters$/;"	i
RunParameters	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RunParameters$/;"	i
RunParameters	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RunParameters, OptimizationRunParameters$/;"	i
RunParameters	bert-distillation-multimetric/squad_fine_tuning/set_seed_and_dist.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RunParameters$/;"	i
RunParameters	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RunParameters$/;"	i
RunParameters	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RunParameters$/;"	i
RunParameters	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RunParameters$/;"	i
RunSquadDistillation	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^class RunSquadDistillation(ARunSquadDistillation):$/;"	c
RunTrainingSquadDistillation	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^from squad_fine_tuning.training_run_squad_distillation import RunTrainingSquadDistillation$/;"	i
RunTrainingSquadDistillation	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^from squad_fine_tuning.training_run_squad_distillation import RunTrainingSquadDistillation$/;"	i
RunTrainingSquadDistillation	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^class RunTrainingSquadDistillation(object):$/;"	c
RunsOptimizeSquadDistillation	bert-distillation-multimetric/sigopt_optimization_wrapper/runs_optimize_squad_distillation.py	/^class RunsOptimizeSquadDistillation(OptimizeSquadDistillation):$/;"	c
S3_BUCKET	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    S3_BUCKET = "s3_bucket"$/;"	v	class:OptimizationRunParameters
S3_BUCKET_NAME	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    S3_BUCKET_NAME = 's3_bucket_name'$/;"	v	class:AugmentCLI
SATURATION	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    SATURATION = 'saturation'$/;"	v	class:AugmentHyperparameters
SAVE_STEPS	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    SAVE_STEPS = 'save_steps'$/;"	v	class:RunParameters
SCEDULER_RATE	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    SCEDULER_RATE = 'scheduler_rate'$/;"	v	class:Hyperparameters
SCEDULER_RATE	stanford-car-classification/resnet_stanford_cars_cli.py	/^    SCEDULER_RATE = 'scheduler_rate'$/;"	v	class:Hyperparameters
SEASONS_RANGE	sigopt-beats-vegas/boxscores/scraper/scraper.py	/^SEASONS_RANGE = range(0, 16)$/;"	v
SEASON_1314_END	sigopt-beats-vegas/predictor/constant.py	/^SEASON_1314_END = datetime.datetime.strptime('2014-04-16', '%Y-%m-%d')$/;"	v
SEASON_1314_END	sigopt-beats-vegas/predictor/stand_alone.py	/^from constant import SEASON_1314_END$/;"	i
SEASON_1415_END	sigopt-beats-vegas/predictor/constant.py	/^SEASON_1415_END = datetime.datetime.strptime('2015-04-15', '%Y-%m-%d')$/;"	v
SEASON_1415_END	sigopt-beats-vegas/predictor/evaluator.py	/^from constant import SEASON_1415_START, SEASON_1415_END$/;"	i
SEASON_1415_START	sigopt-beats-vegas/predictor/bet_reader.py	/^from constant import SEASON_1415_START, SEASON_1516_END$/;"	i
SEASON_1415_START	sigopt-beats-vegas/predictor/constant.py	/^SEASON_1415_START = datetime.datetime.strptime('2014-10-28', '%Y-%m-%d')$/;"	v
SEASON_1415_START	sigopt-beats-vegas/predictor/evaluator.py	/^from constant import SEASON_1415_START, SEASON_1415_END$/;"	i
SEASON_1516_END	sigopt-beats-vegas/predictor/bet_reader.py	/^from constant import SEASON_1415_START, SEASON_1516_END$/;"	i
SEASON_1516_END	sigopt-beats-vegas/predictor/constant.py	/^SEASON_1516_END = datetime.datetime.strptime('2016-04-16', '%Y-%m-%d')$/;"	v
SEASON_1516_START	sigopt-beats-vegas/predictor/constant.py	/^SEASON_1516_START = datetime.datetime.strptime('2015-10-27', '%Y-%m-%d')$/;"	v
SEED	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    SEED = 'seed'$/;"	v	class:RunParameters
SERVER_IP	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    SERVER_IP = 'server_ip'$/;"	v	class:RunParameters
SERVER_PORT	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    SERVER_PORT = 'server_port'$/;"	v	class:RunParameters
SGDClassifier	text-classifier/python/sentiment_classifier.py	/^from sklearn.linear_model import SGDClassifier$/;"	i
SGDHyperparameter	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^class SGDHyperparameter(Enum):$/;"	c
SGDHyperparameter	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^    SGDHyperparameter, ArchitectureHyperparameter$/;"	i
SGDHyperparameter	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_hyperparameter_definition.py	/^    DistillationHyperparameter, SGDHyperparameter$/;"	i
SGDHyperparameter	bert-distillation-multimetric/squad_distillation_abstract_clis/a_run_squad_w_distillation_cli.py	/^    get_default_hyperparameters, SquadArchitectureHyperparameter, ArchitectureHyperparameter$/;"	i
SGDHyperparameter	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_hpo_parameters import SGDHyperparameter, SquadArchitectureHyperparameter$/;"	i
SGDHyperparameter	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_hpo_parameters import SGDHyperparameter, DistillationHyperparameter$/;"	i
SGDOptimizer	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/random_search_parameters_config.py	/^from sigopt_memn2n_setup.sigopt_hyperparameters_enum import SGDOptimizer$/;"	i
SGDOptimizer	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_conditionals_parameters_config.py	/^from sigopt_memn2n_setup.sigopt_hyperparameters_enum import SGDOptimizer$/;"	i
SGDOptimizer	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^class SGDOptimizer(Enum):$/;"	c
SGDOptimizer	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^from sigopt_memn2n_setup.sigopt_hyperparameters_enum import SGDOptimizer$/;"	i
SGDOptimizer	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_parameters_config.py	/^from sigopt_memn2n_setup.sigopt_hyperparameters_enum import SGDOptimizer$/;"	i
SHOULD_RENDER	reinforcement-learning/dqn.py	/^SHOULD_RENDER = False$/;"	v
SIGOPT	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^    SIGOPT = "sigopt"$/;"	v	class:ExperimentTypes
SIGOPT	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^    SIGOPT = sigopt_parameters_config$/;"	v	class:ConfigMapping
SIGOPT_API_KEY	parallel/parallel.py	/^SIGOPT_API_KEY = 'YOUR_API_TOKEN_HERE'$/;"	v
SIGOPT_API_KEY	reinforcement-learning/dqn.py	/^SIGOPT_API_KEY = 'YOUR_API_TOKEN_HERE'$/;"	v
SIGOPT_API_TOKEN	bert-distillation-multimetric/sigopt_optimization_cli.py	/^SIGOPT_API_TOKEN = "SIGOPT_API_TOKEN"$/;"	v
SIGOPT_API_TOKEN	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^SIGOPT_API_TOKEN = "SIGOPT_API_TOKEN"$/;"	v
SIGOPT_API_TOKEN	bert-distillation-multimetric/squad_distillation_abstract_clis/a_optimizaton_run_squad_cli.py	/^SIGOPT_API_TOKEN = "SIGOPT_API_TOKEN"$/;"	v
SIGOPT_API_TOKEN	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^SIGOPT_API_TOKEN = os.environ['SIGOPT_API_TOKEN']$/;"	v
SIGOPT_API_TOKEN	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^SIGOPT_API_TOKEN = os.environ['SIGOPT_API_TOKEN']$/;"	v
SIGOPT_API_TOKEN	dnn-tuning-nvidia-mxnet/run_experiments.py	/^SIGOPT_API_TOKEN = os.environ['SIGOPT_API_TOKEN']$/;"	v
SIGOPT_API_TOKEN	maze-solving-mouse/sigopt_maze_analysis.py	/^SIGOPT_API_TOKEN = 'FIND_YOUR_API_TOKEN_AT_THE_SIGOPT_WEBSITE'$/;"	v
SIGOPT_API_TOKEN	multimetric-timeseries/config.py	/^    SIGOPT_API_TOKEN = json.loads(config)['SIGOPT_API_TOKEN']$/;"	v
SIGOPT_API_TOKEN	multimetric-timeseries/main.py	/^from config import (SIGOPT_API_TOKEN, PARAMETERS, EXPERIMENT_NAME,$/;"	i
SIGOPT_CONDITIONALS	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^    SIGOPT_CONDITIONALS = "conditionals"$/;"	v	class:ExperimentTypes
SIGOPT_CONDITIONALS	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^    SIGOPT_CONDITIONALS = sigopt_conditionals_parameters_config$/;"	v	class:ConfigMapping
SIGOPT_EXPERIMENT_ID	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    SIGOPT_EXPERIMENT_ID = "sigopt_experiment_id"$/;"	v	class:OptimizationRunParameters
SIGOPT_OBSERVATION_BUDGET	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    SIGOPT_OBSERVATION_BUDGET = "sigopt_observation_budget"$/;"	v	class:OptimizationRunParameters
SIGOPT_RUN_DIRECTORY	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    SIGOPT_RUN_DIRECTORY = "sigopt_run_directory"$/;"	v	class:OptimizationRunParameters
STORE	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^    STORE = 'store'$/;"	v	class:MetricStrategy
STORE_S3	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    STORE_S3 = "store_s3"$/;"	v	class:OptimizationRunParameters
STORE_TO_DISK	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    STORE_TO_DISK = 'store_to_disk'$/;"	v	class:AugmentCLI
STORE_TO_S3	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    STORE_TO_S3 = 'store_to_s3'$/;"	v	class:AugmentCLI
STRATEGY	amazon-ml-hyperparameter-optimization/config.py	/^STRATEGY = "random"$/;"	v
SVC_PARAMS	classifier/constant.py	/^SVC_PARAMS = [$/;"	v
SVD	surprise-py-recsys/surprise_recommender.py	/^from surprise import SVD$/;"	i
Schedule	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.optimizers import GradientDescentMomentum, Schedule$/;"	i
Schedule	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.optimizers import GradientDescentMomentum, Schedule$/;"	i
Sequential	orchestrate/models/example/keras_model.py	/^from keras.models import Sequential$/;"	i
SequentialSampler	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^from torch.utils.data import DataLoader, SequentialSampler$/;"	i
ShowModel	dnn-tuning-nervana/sigopt_nervana.py	/^from ncloud.commands.show import ShowModel$/;"	i
ShuffleSplit	random-forest/python/random_forest.py	/^from sklearn.model_selection import cross_val_score, ShuffleSplit$/;"	i
SigOptCycle	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_runs_optimization_cycle.py	/^class SigOptCycle(object):$/;"	c
SigOptDataTypes	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_datatypes.py	/^class SigOptDataTypes(Enum):$/;"	c
SigOptDistilBertQuadCLI	bert-distillation-multimetric/sigopt_optimization_cli.py	/^class SigOptDistilBertQuadCLI(OptimizeDistilBertQuadCLI):$/;"	c
SigOptExperiment	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^class SigOptExperiment:$/;"	c
SigOptExperiment	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^class SigOptExperiment:$/;"	c
SigOptExperiment	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^from sigopt_memn2n_setup.sigopt_experiment_client import SigOptExperiment$/;"	i
SigOptMazeConstraintFrontierSolver	maze-solving-mouse/sigopt_maze_analysis.py	/^class SigOptMazeConstraintFrontierSolver(SigOptMazeFrontierSolver):$/;"	c
SigOptMazeFrontierSolver	maze-solving-mouse/sigopt_maze_analysis.py	/^class SigOptMazeFrontierSolver(object):$/;"	c
SigOptMazeWeightedSumFrontierSolver	maze-solving-mouse/sigopt_maze_analysis.py	/^class SigOptMazeWeightedSumFrontierSolver(SigOptMazeFrontierSolver):$/;"	c
SigOptMultimetricSearch	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^class SigOptMultimetricSearch(SuggestionAlgorithm):$/;"	c
SigOptSearchCV	random-forest/python/random_forest.sklearn.py	/^from sigopt_sklearn.search import SigOptSearchCV$/;"	i
Softmax	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.transforms import Rectlin, Softmax, CrossEntropyMulti, Misclassification$/;"	i
Softmax	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.transforms import Rectlin, Softmax, CrossEntropyMulti, Misclassification$/;"	i
SquadArchitectureHyperparameter	bert-distillation-multimetric/distilbert_data_model_loaders/load_squad_dataset.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_hpo_parameters import SquadArchitectureHyperparameter$/;"	i
SquadArchitectureHyperparameter	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^class SquadArchitectureHyperparameter(Enum):$/;"	c
SquadArchitectureHyperparameter	bert-distillation-multimetric/squad_distillation_abstract_clis/a_run_squad_w_distillation_cli.py	/^    get_default_hyperparameters, SquadArchitectureHyperparameter, ArchitectureHyperparameter$/;"	i
SquadArchitectureHyperparameter	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_hpo_parameters import SGDHyperparameter, SquadArchitectureHyperparameter$/;"	i
SquadResult	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^from transformers.data.processors.squad import SquadResult$/;"	i
SquadV1Processor	bert-distillation-multimetric/distilbert_data_model_loaders/load_squad_dataset.py	/^from transformers import SquadV2Processor, SquadV1Processor, squad_convert_examples_to_features$/;"	i
SquadV2Processor	bert-distillation-multimetric/distilbert_data_model_loaders/load_squad_dataset.py	/^from transformers import SquadV2Processor, SquadV1Processor, squad_convert_examples_to_features$/;"	i
StandardScaler	orchestrate/models/example/data_and_model_setup.py	/^from sklearn.preprocessing import StandardScaler$/;"	i
StanfordAugmentedDataProcessor	stanford-augmented-image-classification/stanford_augmented_data_processor.py	/^class StanfordAugmentedDataProcessor(AStanfordDataProcessor):$/;"	c
StanfordAugmentedDataProcessor	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^from stanford_augmented_data_processor import StanfordAugmentedDataProcessor$/;"	i
StanfordCarAugmentedDataset	stanford-augmented-image-classification/stanford_augmented_data_processor.py	/^from stanford_car_dataset_augmented import StanfordCarAugmentedDataset$/;"	i
StanfordCarAugmentedDataset	stanford-augmented-image-classification/stanford_car_dataset_augmented.py	/^class StanfordCarAugmentedDataset(AStanfordCarDataset):$/;"	c
StanfordCarDataset	stanford-augmented-image-classification/stanford_car_dataset.py	/^class StanfordCarDataset(AStanfordCarDataset):$/;"	c
StanfordCarDataset	stanford-augmented-image-classification/stanford_cars_cli.py	/^from stanford_car_dataset import StanfordCarDataset, preprocess_data$/;"	i
StanfordCarDataset	stanford-augmented-image-classification/stanford_data_processor.py	/^from stanford_car_dataset import StanfordCarDataset$/;"	i
StanfordCars	stanford-car-classification/resnet.py	/^from stanford_cars import StanfordCars$/;"	i
StanfordCars	stanford-car-classification/resnet_stanford_cars_cli.py	/^from stanford_cars import StanfordCars, preprocess_data$/;"	i
StanfordCars	stanford-car-classification/stanford_cars.py	/^class StanfordCars(Dataset):$/;"	c
StanfordCarsAugmentationCLI	stanford-augmented-image-classification/orchestrate_stanford_cars_augmentation_cli.py	/^from stanford_cars_augmentation_cli import StanfordCarsAugmentationCLI, AugmentHyperparameters, CLI$/;"	i
StanfordCarsAugmentationCLI	stanford-augmented-image-classification/resnet_stanford_cars_augmented_training.py	/^from stanford_cars_augmentation_cli import StanfordCarsAugmentationCLI, CLI$/;"	i
StanfordCarsAugmentationCLI	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^class StanfordCarsAugmentationCLI(AStanfordCarsCLI):$/;"	c
StanfordCarsCLI	stanford-augmented-image-classification/orchestrate_stanford_cars_cli.py	/^from stanford_cars_cli import CLI, StanfordCarsCLI$/;"	i
StanfordCarsCLI	stanford-augmented-image-classification/resnet_stanford_cars_training.py	/^from stanford_cars_cli import CLI, StanfordCarsCLI$/;"	i
StanfordCarsCLI	stanford-augmented-image-classification/stanford_cars_cli.py	/^class StanfordCarsCLI(AStanfordCarsCLI):$/;"	c
StanfordCarsCLI	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^from resnet_stanford_cars_cli import StanfordCarsCLI, Hyperparameters, CLI$/;"	i
StanfordCarsCLI	stanford-car-classification/resnet_stanford_cars_cli.py	/^class StanfordCarsCLI(object):$/;"	c
StanfordCarsCLI	stanford-car-classification/run_resnet_training_cli.py	/^from resnet_stanford_cars_cli import StanfordCarsCLI, Hyperparameters, CLI$/;"	i
StanfordCarsDataAugmentation	stanford-augmented-image-classification/stanford_augmented_data_processor.py	/^from stanford_cars_data_augmentation import StanfordCarsDataAugmentation$/;"	i
StanfordCarsDataAugmentation	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^class StanfordCarsDataAugmentation(object):$/;"	c
StanfordCarsTestData	stanford-car-classification/stanford_cars.py	/^class StanfordCarsTestData(Dataset):$/;"	c
StanfordDataProcessor	stanford-augmented-image-classification/stanford_data_processor.py	/^class StanfordDataProcessor(AStanfordDataProcessor):$/;"	c
SubProcessEvaluator	other-languages/other_languages.py	/^class SubProcessEvaluator(object):$/;"	c
SuggestionAlgorithm	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^from ray.tune.suggest.suggestion import SuggestionAlgorithm$/;"	i
TEACHER_NAME_OR_PATH	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    TEACHER_NAME_OR_PATH = 'teacher_name_or_path'$/;"	v	class:RunParameters
TEACHER_TYPE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    TEACHER_TYPE = 'teacher_type'$/;"	v	class:RunParameters
TEAM_ID_TO_NAME	sigopt-beats-vegas/predictor/constant.py	/^TEAM_ID_TO_NAME = {$/;"	v
TEAM_ID_TO_NAME	sigopt-beats-vegas/predictor/read_data.py	/^from constant import TEAM_ID_TO_NAME$/;"	i
TEMPERATURE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    TEMPERATURE = 'temperature'$/;"	v	class:DistillationHyperparameter
TEST	stanford-augmented-image-classification/stanford_cars_data_config.py	/^    TEST = 'test'$/;"	v	class:CarDatasetAttributes
THIS_DIR	multimetric-timeseries/config.py	/^THIS_DIR = os.path.dirname(__file__)$/;"	v
TIME_OUT	amazon-ml-hyperparameter-optimization/config.py	/^TIME_OUT = 3600  # 1 hour$/;"	v
TOKENIZER_NAME	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    TOKENIZER_NAME = 'tokenizer_name'$/;"	v	class:RunParameters
TRAIN_CACHE_S3_DIRECTORY	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    TRAIN_CACHE_S3_DIRECTORY = "train_cache_s3_directory"$/;"	v	class:RunParameters
TRAIN_FILE	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    TRAIN_FILE = 'train_file'$/;"	v	class:RunParameters
TRANSFORMED_IMAGE	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^    TRANSFORMED_IMAGE = 'train'$/;"	v	class:AStanfordCarDataset
TRANSFORMED_IMAGE	stanford-car-classification/stanford_cars.py	/^    TRANSFORMED_IMAGE = 'train'$/;"	v	class:StanfordCars
TRANSFORMED_IMAGE	stanford-car-classification/stanford_cars.py	/^    TRANSFORMED_IMAGE = 'train'$/;"	v	class:StanfordCarsTestData
TUNABLE_PARAMS	dnn-tuning-nervana/constant.py	/^TUNABLE_PARAMS = [$/;"	v
TUNABLE_PARAMS	dnn-tuning-nervana/sigopt_nervana.py	/^from constant import TUNABLE_PARAMS, PAPER_PARAMS$/;"	i
TeamStats	sigopt-beats-vegas/predictor/model.py	/^from team_stats import TeamStats$/;"	i
TeamStats	sigopt-beats-vegas/predictor/read_data.py	/^from team_stats import TeamStats$/;"	i
TeamStats	sigopt-beats-vegas/predictor/team_stats.py	/^class TeamStats(object):$/;"	c
TrainModel	dnn-tuning-nervana/sigopt_nervana.py	/^from ncloud.commands.train import TrainModel$/;"	i
TrainSquadDistillation	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^class TrainSquadDistillation(object):$/;"	c
TrainSquadDistillation	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^from squad_fine_tuning.train_squad_distillation import TrainSquadDistillation$/;"	i
USE_HPO_DEFAULT_RANGES	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    USE_HPO_DEFAULT_RANGES = "use_hpo_default_ranges"$/;"	v	class:OptimizationRunParameters
V	unsupervised-model/unsupervised_model.py	/^  V = numpy.sqrt(numpy.linalg.inv(numpy.diag(D + zca_eps)))$/;"	v
VALIDATION_FREQUENCY	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    VALIDATION_FREQUENCY = 'validation_frequency'$/;"	v	class:CLI
VALIDATION_FREQUENCY	stanford-car-classification/resnet_stanford_cars_cli.py	/^    VALIDATION_FREQUENCY = 'validation_frequency'$/;"	v	class:CLI
VERBOSE_LOGGING	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    VERBOSE_LOGGING = 'verbose_logging'$/;"	v	class:RunParameters
VERSION_2	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^    VERSION_2 = 'version_2_with_negative'$/;"	v	class:RunParameters
WARM_UP_STEPS	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    WARM_UP_STEPS = 'warm_up_steps'$/;"	v	class:SGDHyperparameter
WEIGHT_DECAY	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^    WEIGHT_DECAY = 'weight_decay'$/;"	v	class:SGDHyperparameter
WEIGHT_DECAY	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    WEIGHT_DECAY = 'weight_decay'$/;"	v	class:Hyperparameters
WEIGHT_DECAY	stanford-car-classification/resnet_stanford_cars_cli.py	/^    WEIGHT_DECAY = 'weight_decay'$/;"	v	class:Hyperparameters
WIN_MONEY	sigopt-beats-vegas/predictor/evaluator.py	/^WIN_MONEY = 100$/;"	v
WORD_EMBEDDING	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^    WORD_EMBEDDING = "word_embedding_size"$/;"	v	class:ParametersList
W_conv1	tensorflow-cnn/python/cnn_example_cpu.py	/^  W_conv1 = weight_variable([filter1_w, filter1_w, 1, filter1_depth])$/;"	v
W_conv1	tensorflow-cnn/python/cnn_example_gpu.py	/^  W_conv1 = weight_variable([filter1_w, filter1_w, 1, filter1_depth])$/;"	v
W_conv2	tensorflow-cnn/python/cnn_example_cpu.py	/^  W_conv2 = weight_variable([filter2_w, filter2_w, filter1_depth, filter2_depth])$/;"	v
W_conv2	tensorflow-cnn/python/cnn_example_gpu.py	/^  W_conv2 = weight_variable([filter2_w, filter2_w, filter1_depth, filter2_depth])$/;"	v
W_fc1	tensorflow-cnn/python/cnn_example_cpu.py	/^  W_fc1 = weight_variable([8 * 8 * filter2_depth, 1024])$/;"	v
W_fc1	tensorflow-cnn/python/cnn_example_gpu.py	/^  W_fc1 = weight_variable([8 * 8 * filter2_depth, 1024])$/;"	v
W_fc2	tensorflow-cnn/python/cnn_example_cpu.py	/^  W_fc2 = weight_variable([1024, 10])$/;"	v
W_fc2	tensorflow-cnn/python/cnn_example_gpu.py	/^  W_fc2 = weight_variable([1024, 10])$/;"	v
Wh	unsupervised-model/unsupervised_model.py	/^  Wh = numpy.dot(numpy.dot(U, V), U.T)$/;"	v
Worker	parallel/parallel.py	/^class Worker(threading.Thread):$/;"	c
X	parallel/data.py	/^X = iris.data$/;"	v
X	random-forest/python/random_forest.py	/^X = iris.data$/;"	v
X	random-forest/python/random_forest.sklearn.py	/^X = iris.data$/;"	v
X	xgb-integration-py-class/xgb-integration-py-class.py	/^X = train.drop(['isFraud', 'TransactionID', 'TransactionDT'], axis=1)$/;"	v
X	xgb-integration-py-reg/xgb-integration-py-reg.py	/^X = train.drop(['y', 'ID'], axis=1)$/;"	v
X	xgboost-py-classifier/xgboost_py_classifier.py	/^X = pd.DataFrame(bc_dataset.data)$/;"	v
X	xgboost-py-regression/xgboost_py_regressor.py	/^X = pd.DataFrame(ch_dataset.data)$/;"	v
XGBClassifier	orchestrate/models/example/xgboost_model.py	/^from xgboost.sklearn import XGBClassifier$/;"	i
X_unlab_patches	unsupervised-model/unsupervised_model.py	/^  X_unlab_patches = []$/;"	v
X_unlab_patches	unsupervised-model/unsupervised_model.py	/^  X_unlab_patches = numpy.dot(X_unlab_patches-mu, Wh)$/;"	v
X_unlab_patches	unsupervised-model/unsupervised_model.py	/^  X_unlab_patches = numpy.vstack(X_unlab_patches)$/;"	v
__getitem__	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^    def __getitem__(self, item):$/;"	m	class:AStanfordCarDataset	file:
__getitem__	stanford-augmented-image-classification/stanford_car_dataset.py	/^    def __getitem__(self, item):$/;"	m	class:StanfordCarDataset	file:
__getitem__	stanford-augmented-image-classification/stanford_car_dataset_augmented.py	/^    def __getitem__(self, item):$/;"	m	class:StanfordCarAugmentedDataset	file:
__getitem__	stanford-car-classification/stanford_cars.py	/^    def __getitem__(self, item):$/;"	m	class:StanfordCars	file:
__getitem__	stanford-car-classification/stanford_cars.py	/^    def __getitem__(self, item):$/;"	m	class:StanfordCarsTestData	file:
__init__	amazon-ml-hyperparameter-optimization/evaluation.py	/^    def __init__(self, fold, model_spec):$/;"	m	class:Evaluation
__init__	amazon-ml-hyperparameter-optimization/fold.py	/^    def __init__(self, data_spec=None, this_fold=None, kfolds=None):$/;"	m	class:Fold
__init__	bert-distillation-multimetric/distilbert_data_model_loaders/load_transfomer_model.py	/^    def __init__(self, model_type):$/;"	m	class:LoadModel
__init__	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_from_scratch.py	/^    def __init__(self, model_type):$/;"	m	class:LoadModelFromScratch
__init__	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_pretrained.py	/^    def __init__(self, model_type, model_name_or_path, cache_dir):$/;"	m	class:LoadPretrainedModel
__init__	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_semi_pretrained.py	/^    def __init__(self, model_type, model_name_or_path, cache_dir):$/;"	m	class:LoadSemiPretrainedModel
__init__	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^    def __init__(self, args_dict):$/;"	m	class:RayTuneOptimizeSquadDistillation
__init__	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^    def __init__(self, sigopt_experiment_client, project_name,$/;"	m	class:SigOptMultimetricSearch
__init__	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^    def __init__(self):$/;"	m	class:RunDistilBertSquadCLI
__init__	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def __init__(self, connection):$/;"	m	class:SigOptExperiment
__init__	bert-distillation-multimetric/sigopt_optimization_cli.py	/^    def __init__(self):$/;"	m	class:SigOptDistilBertQuadCLI
__init__	bert-distillation-multimetric/sigopt_optimization_wrapper/runs_optimize_squad_distillation.py	/^    def __init__(self, args_dict):$/;"	m	class:RunsOptimizeSquadDistillation
__init__	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_runs_optimization_cycle.py	/^    def __init__(self, sigopt_experiment_client, observation_budget, project_name):$/;"	m	class:SigOptCycle
__init__	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^    def __init__(self):$/;"	m	class:RayTuneSigOptDistilBertSquadCLI
__init__	bert-distillation-multimetric/squad_distillation_abstract_clis/a_optimizaton_run_squad_cli.py	/^    def __init__(self):$/;"	m	class:OptimizeDistilBertQuadCLI
__init__	bert-distillation-multimetric/squad_distillation_abstract_clis/a_run_squad_w_distillation_cli.py	/^    def __init__(self):$/;"	m	class:ARunDistilBertSquadCLI
__init__	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^    def __init__(self, args_dict):$/;"	m	class:ARunSquadDistillation
__init__	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^    def __init__(self, args_dict, tokenizer, global_step):$/;"	m	class:EvalSquadDistillation
__init__	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^    def __init__(self, args_dict):$/;"	m	class:OptimizeSquadDistillation
__init__	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^    def __init__(self, args_dict):$/;"	m	class:RunSquadDistillation
__init__	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    def __init__(self, model_class, tokenizer, tokenizer_class, teacher):$/;"	m	class:TrainSquadDistillation
__init__	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^    def __init__(self, model_class, tokenizer, tokenizer_class, teacher):$/;"	m	class:RunTrainingSquadDistillation
__init__	classifier/classifier_tuner.py	/^    def __init__(self, **kwargs):$/;"	m	class:ExampleRunner
__init__	dnn-tuning-nervana/sigopt_nervana.py	/^  def __init__(self, num_sigopt_suggestions=300, output_file='data\/sigopt.txt'):$/;"	m	class:JobRunner
__init__	maze-solving-mouse/maze_tools.py	/^    def __init__(self):$/;"	m	class:RightTurnSolver
__init__	maze-solving-mouse/sigopt_maze_analysis.py	/^    def __init__(self, api_token=None, parameter_domain=None, maze_size=(30, 30), num_tests=100, down_prob=1.0):$/;"	m	class:SigOptMazeConstraintFrontierSolver
__init__	maze-solving-mouse/sigopt_maze_analysis.py	/^    def __init__(self, api_token=None, parameter_domain=None, maze_size=(30, 30), num_tests=100, down_prob=1.0):$/;"	m	class:SigOptMazeFrontierSolver
__init__	maze-solving-mouse/sigopt_maze_analysis.py	/^    def __init__(self, api_token=None, parameter_domain=None, maze_size=(30, 30), num_tests=100, down_prob=1.0):$/;"	m	class:SigOptMazeWeightedSumFrontierSolver
__init__	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^    def __init__(self, batch_size, vocab_size, sentence_size, memory_size, embedding_size, optimizer,$/;"	m	class:MemN2N
__init__	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def __init__(self, connection):$/;"	m	class:SigOptExperiment
__init__	other-languages/other_languages.py	/^  def __init__(self, command):$/;"	m	class:SubProcessEvaluator
__init__	parallel/parallel.py	/^  def __init__(self):$/;"	m	class:Master
__init__	parallel/parallel.py	/^  def __init__(self, experiment_id):$/;"	m	class:Worker
__init__	reinforcement-learning/dqn.py	/^  def __init__($/;"	m	class:Agent
__init__	reinforcement-learning/dqn.py	/^  def __init__(self, layer_dims, learning_rate, initial_weight_stddev, initial_bias_stddev):$/;"	m	class:QNetwork
__init__	sigopt-beats-vegas/predictor/game_stats.py	/^  def __init__(self):$/;"	m	class:GameStats
__init__	sigopt-beats-vegas/predictor/team_stats.py	/^  def __init__(self, name):$/;"	m	class:TeamStats
__init__	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    def __init__(self):$/;"	m	class:AStanfordCarsCLI
__init__	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^    def __init__(self, data_matrix, path_images, transforms, path_human_readable_labels):$/;"	m	class:AStanfordCarDataset
__init__	stanford-augmented-image-classification/a_stanford_data_processor.py	/^    def __init__(self, path_images, transforms, path_human_readable_labels):$/;"	m	class:AStanfordDataProcessor
__init__	stanford-augmented-image-classification/orchestrate_stanford_cars_augmentation_cli.py	/^    def __init__(self):$/;"	m	class:OrchestrateAugmentationCLI
__init__	stanford-augmented-image-classification/orchestrate_stanford_cars_cli.py	/^    def __init__(self):$/;"	m	class:OrchestrateCLI
__init__	stanford-augmented-image-classification/resnet.py	/^    def __init__(self, validation_frequency, model,  model_checkpointing, torch_checkpoint_location,$/;"	m	class:ResNet
__init__	stanford-augmented-image-classification/resnet_stanford_cars_augmented_training.py	/^    def __init__(self):$/;"	m	class:ResNetAugmentedTraining
__init__	stanford-augmented-image-classification/resnet_stanford_cars_training.py	/^    def __init__(self):$/;"	m	class:ResNetTraining
__init__	stanford-augmented-image-classification/stanford_augmented_data_processor.py	/^    def __init__(self, path_images, transforms, path_human_readable_labels):$/;"	m	class:StanfordAugmentedDataProcessor
__init__	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    def __init__(self):$/;"	m	class:StanfordCarsAugmentationCLI
__init__	stanford-augmented-image-classification/stanford_cars_cli.py	/^    def __init__(self):$/;"	m	class:StanfordCarsCLI
__init__	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^    def __init__(self, path_to_data_mat, path_images):$/;"	m	class:StanfordCarsDataAugmentation
__init__	stanford-augmented-image-classification/stanford_data_processor.py	/^    def __init__(self, path_images, transforms, path_human_readable_labels):$/;"	m	class:StanfordDataProcessor
__init__	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^    def __init__(self):$/;"	m	class:OrchestrateCLI
__init__	stanford-car-classification/resnet.py	/^    def __init__(self, validation_frequency, model,  model_checkpointing, torch_checkpoint_location,$/;"	m	class:PalmNet
__init__	stanford-car-classification/resnet_stanford_cars_cli.py	/^    def __init__(self):$/;"	m	class:StanfordCarsCLI
__init__	stanford-car-classification/run_resnet_training_cli.py	/^    def __init__(self):$/;"	m	class:ResnetTrainingCLI
__init__	stanford-car-classification/stanford_cars.py	/^    def __init__(self, data_matrix, path_images, transforms, path_human_readable_labels):$/;"	m	class:StanfordCars
__init__	stanford-car-classification/stanford_cars.py	/^    def __init__(self, data_matrix, path_images, transforms, path_human_readable_labels):$/;"	m	class:StanfordCarsTestData
__len__	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^    def __len__(self):$/;"	m	class:AStanfordCarDataset	file:
__len__	stanford-augmented-image-classification/stanford_car_dataset.py	/^    def __len__(self):$/;"	m	class:StanfordCarDataset	file:
__len__	stanford-augmented-image-classification/stanford_car_dataset_augmented.py	/^    def __len__(self):$/;"	m	class:StanfordCarAugmentedDataset	file:
__len__	stanford-car-classification/stanford_cars.py	/^    def __len__(self):$/;"	m	class:StanfordCars	file:
__len__	stanford-car-classification/stanford_cars.py	/^    def __len__(self):$/;"	m	class:StanfordCarsTestData	file:
__str__	amazon-ml-hyperparameter-optimization/evaluation.py	/^    def __str__(self):$/;"	m	class:Evaluation	file:
__str__	amazon-ml-hyperparameter-optimization/fold.py	/^    def __str__(self):$/;"	m	class:Fold	file:
_add_constraint_historical_info	maze-solving-mouse/sigopt_maze_analysis.py	/^    def _add_constraint_historical_info(self, previous_experiment_id, mean_constraint):$/;"	m	class:SigOptMazeConstraintFrontierSolver
_add_weighted_sum_historical_info	maze-solving-mouse/sigopt_maze_analysis.py	/^    def _add_weighted_sum_historical_info(self, previous_experiment_id, mean_weight):$/;"	m	class:SigOptMazeWeightedSumFrontierSolver
_build_inputs	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^    def _build_inputs(self):$/;"	m	class:MemN2N
_build_vars	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^    def _build_vars(self):$/;"	m	class:MemN2N
_execute_assignments	maze-solving-mouse/sigopt_maze_analysis.py	/^    def _execute_assignments(self, num_tests, l, u, r):$/;"	m	class:SigOptMazeFrontierSolver
_extract_data_from_experiment	maze-solving-mouse/sigopt_maze_analysis.py	/^    def _extract_data_from_experiment(self, experiment_id=None):$/;"	m	class:SigOptMazeFrontierSolver
_form_constraint_observation_update	maze-solving-mouse/sigopt_maze_analysis.py	/^    def _form_constraint_observation_update(mean_constraint, mean, std_dev):$/;"	m	class:SigOptMazeConstraintFrontierSolver
_form_maze_image_for_plotting	maze-solving-mouse/maze_tools.py	/^    def _form_maze_image_for_plotting(self, maze=None):$/;"	m	class:RightTurnSolver
_form_sigopt_constraint_observation_from_suggestion	maze-solving-mouse/sigopt_maze_analysis.py	/^    def _form_sigopt_constraint_observation_from_suggestion(self, num_tests, suggestion, mean_constraint):$/;"	m	class:SigOptMazeConstraintFrontierSolver
_form_sigopt_weighted_sum_observation_from_suggestion	maze-solving-mouse/sigopt_maze_analysis.py	/^    def _form_sigopt_weighted_sum_observation_from_suggestion(self, num_tests, suggestion, mean_weight):$/;"	m	class:SigOptMazeWeightedSumFrontierSolver
_inference	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^    def _inference(self, stories, queries):$/;"	m	class:MemN2N
_load_dataset	classifier/classifier_tuner.py	/^    def _load_dataset(self):$/;"	m	class:ExampleRunner
_mean_squared_error	reinforcement-learning/dqn.py	/^  def _mean_squared_error(self):$/;"	m	class:QNetwork
_num_live_trials	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^    def _num_live_trials(self):$/;"	m	class:SigOptMultimetricSearch
_pcc	maze-solving-mouse/maze_tools.py	/^    def _pcc(pt):  # stands for plot cell center$/;"	m	class:RightTurnSolver
_plot_maze_alone_from_image	maze-solving-mouse/maze_tools.py	/^    def _plot_maze_alone_from_image(self, image, ax, figsize, markersize):$/;"	m	class:RightTurnSolver
_sigmoid	reinforcement-learning/dqn.py	/^  def _sigmoid(self, x):$/;"	m	class:QNetwork
_train	reinforcement-learning/dqn.py	/^  def _train(self, session):$/;"	m	class:Agent
absolute_import	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/data_utils.py	/^from __future__ import absolute_import$/;"	i
absolute_import	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^from __future__ import absolute_import$/;"	i
absolute_import	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^from __future__ import absolute_import$/;"	i
absolute_import	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^from __future__ import absolute_import$/;"	i
acc	xgboost-py-classifier/xgboost_py_classifier.py	/^acc = accuracy_score(y_test, model.predict(X_test))$/;"	v
accuracy	surprise-py-recsys/surprise_recommender.py	/^from surprise import accuracy$/;"	i
accuracy	tensorflow-cnn/python/cnn_example_cpu.py	/^  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))$/;"	v
accuracy	tensorflow-cnn/python/cnn_example_gpu.py	/^  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))$/;"	v
accuracy_score	unsupervised-model/unsupervised_model.py	/^from sklearn.metrics import accuracy_score$/;"	i
accuracy_score	xgboost-py-classifier/xgboost_py_classifier.py	/^from sklearn.metrics import accuracy_score, average_precision_score, f1_score$/;"	i
act	reinforcement-learning/dqn.py	/^  def act(self, session, obs, reward, done, episode):$/;"	m	class:Agent
action	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        action="store_true",$/;"	v
add_game_to_stats	sigopt-beats-vegas/predictor/game_stats.py	/^  def add_game_to_stats(self, box_score, is_home_game):$/;"	m	class:GameStats
add_game_to_stats	sigopt-beats-vegas/predictor/team_stats.py	/^  def add_game_to_stats(self, box_score, is_home_game):$/;"	m	class:TeamStats
add_gradient_noise	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^def add_gradient_noise(t, stddev=1e-3, name=None):$/;"	f
add_to_queue	multimetric-timeseries/train.py	/^def add_to_queue(func):$/;"	f
algo	surprise-py-recsys/surprise_recommender.py	/^algo = SVD()$/;"	v
all_best_assignments	surprise-py-recsys/surprise_recommender.py	/^all_best_assignments = conn.experiments(experiment.id).best_assignments().fetch()$/;"	v
amp	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^                from apex import amp$/;"	i
apex	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^                import apex$/;"	i
api_call	dnn-tuning-nervana/sigopt_nervana.py	/^from ncloud.util.api_call import api_call$/;"	i
api_token	xgboost-py-classifier/xgboost_py_classifier.py	/^api_token = "YOUR_API_TOKEN_HERE"$/;"	v
api_token	xgboost-py-regression/xgboost_py_regressor.py	/^api_token = "YOUR_API_TOKEN_HERE"$/;"	v
apply_transformations	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^    def apply_transformations(self, index, transformations):$/;"	m	class:StanfordCarsDataAugmentation
archive_experiment	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def archive_experiment(self, experiment):$/;"	m	class:SigOptExperiment
archive_experiment	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def archive_experiment(self, experiment):$/;"	m	class:SigOptExperiment
arg_parse	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    def arg_parse(self):$/;"	m	class:AStanfordCarsCLI
arg_parse	stanford-augmented-image-classification/resnet_stanford_cars_augmented_training.py	/^    def arg_parse(self):$/;"	m	class:ResNetAugmentedTraining
arg_parse	stanford-augmented-image-classification/resnet_stanford_cars_training.py	/^    def arg_parse(self):$/;"	m	class:ResNetTraining
arg_parse	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    def arg_parse(self):$/;"	m	class:StanfordCarsAugmentationCLI
arg_parse	stanford-car-classification/resnet_stanford_cars_cli.py	/^    def arg_parse(self):$/;"	m	class:StanfordCarsCLI
arg_parse	stanford-car-classification/run_resnet_training_cli.py	/^    def arg_parse(self):$/;"	m	class:ResnetTrainingCLI
argparse	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^import argparse$/;"	i
argparse	bert-distillation-multimetric/squad_distillation_abstract_clis/a_run_squad_w_distillation_cli.py	/^import argparse$/;"	i
argparse	classifier/classifier_tuner.py	/^import argparse$/;"	i
argparse	dnn-tuning-nervana/sigopt_nervana.py	/^import argparse$/;"	i
argparse	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^import argparse$/;"	i
argparse	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^import argparse$/;"	i
argparse	dnn-tuning-nvidia-mxnet/run_experiments.py	/^import os, json, argparse$/;"	i
argparse	other-languages/other_languages.py	/^import argparse$/;"	i
argparse	sigopt-beats-vegas/boxscores/scraper/scraper.py	/^  import argparse$/;"	i
argparse	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^import argparse$/;"	i
argparse	stanford-car-classification/resnet_stanford_cars_cli.py	/^import argparse$/;"	i
argparse	tensorflow-cnn/python/cnn_example_cpu.py	/^import argparse$/;"	i
argparse	tensorflow-cnn/python/cnn_example_gpu.py	/^import argparse$/;"	i
argparse	test/with_new_experiment	/^import argparse$/;"	i
args	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^    args = parser.parse_args()$/;"	v
args	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^    args = parser.parse_args()$/;"	v	class:RunDistilBertSquadCLI
args	bert-distillation-multimetric/sigopt_optimization_cli.py	/^    args = optimization_cli.get_commandline_args().parse_args()$/;"	v
args	classifier/classifier_tuner.py	/^    args = vars(parser.parse_args())$/;"	v	class:ExampleRunner
args	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^args = parser.parse_args()$/;"	v
args	dnn-tuning-nervana/nervana_all_cnn.py	/^args = parser.parse_args()$/;"	v
args	dnn-tuning-nervana/sigopt_nervana.py	/^  args = parser.parse_args()$/;"	v	class:JobRunner
args	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^args = parser.parse_args()$/;"	v
args	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^args = parser.parse_args()$/;"	v
args	dnn-tuning-nvidia-mxnet/run_experiments.py	/^args = parser.parse_args()$/;"	v
args	test/with_new_experiment	/^    args=args,$/;"	v
args	test/with_new_experiment	/^  args = [(e.id if a == 'NEW_EXPERIMENT_ID' else a) for a in args]$/;"	v
args	test/with_new_experiment	/^  args = parser.parse_args().rest$/;"	v
args_dict	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^    args_dict = vars(args)$/;"	v	class:RunDistilBertSquadCLI
args_dict	bert-distillation-multimetric/sigopt_optimization_cli.py	/^    args_dict = vars(args)$/;"	v
assignments	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        assignments = suggestion.assignments$/;"	v
assignments	dnn-tuning-nervana/nervana_all_cnn.py	/^  assignments = suggestion.assignments$/;"	v
assignments	xgboost-py-classifier/xgboost_py_classifier.py	/^    assignments = suggestion.assignments$/;"	v
assignments	xgboost-py-classifier/xgboost_py_classifier.py	/^assignments = conn.experiments(experiment.id).best_assignments().fetch().data[0].assignments  $/;"	v
assignments	xgboost-py-regression/xgboost_py_regressor.py	/^    assignments = suggestion.assignments$/;"	v
assignments	xgboost-py-regression/xgboost_py_regressor.py	/^assignments = conn.experiments(experiment.id).best_assignments().fetch().data[0].assignments  $/;"	v
augment_data	stanford-augmented-image-classification/stanford_augmented_data_processor.py	/^    def augment_data(self,$/;"	m	class:StanfordAugmentedDataProcessor
augment_data	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^    def augment_data(self,$/;"	m	class:StanfordCarsDataAugmentation
average_precision_score	orchestrate/models/example/data_and_model_setup.py	/^from sklearn.metrics import confusion_matrix, average_precision_score, f1_score$/;"	i
average_precision_score	xgboost-py-classifier/xgboost_py_classifier.py	/^from sklearn.metrics import accuracy_score, average_precision_score, f1_score$/;"	i
b_conv1	tensorflow-cnn/python/cnn_example_cpu.py	/^  b_conv1 = bias_variable([filter1_depth])$/;"	v
b_conv1	tensorflow-cnn/python/cnn_example_gpu.py	/^  b_conv1 = bias_variable([filter1_depth])$/;"	v
b_conv2	tensorflow-cnn/python/cnn_example_cpu.py	/^  b_conv2 = bias_variable([filter2_depth])$/;"	v
b_conv2	tensorflow-cnn/python/cnn_example_gpu.py	/^  b_conv2 = bias_variable([filter2_depth])$/;"	v
b_fc1	tensorflow-cnn/python/cnn_example_cpu.py	/^  b_fc1 = bias_variable([1024])$/;"	v
b_fc1	tensorflow-cnn/python/cnn_example_gpu.py	/^  b_fc1 = bias_variable([1024])$/;"	v
b_fc2	tensorflow-cnn/python/cnn_example_cpu.py	/^  b_fc2 = bias_variable([10])$/;"	v
b_fc2	tensorflow-cnn/python/cnn_example_gpu.py	/^  b_fc2 = bias_variable([10])$/;"	v
backward_pass	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    def backward_pass(self, args_dict, loss, optimizer):$/;"	m	class:TrainSquadDistillation
backward_pass	stanford-augmented-image-classification/resnet.py	/^    def backward_pass(self, outputs, labels):$/;"	m	class:ResNet
backward_pass	stanford-car-classification/resnet.py	/^    def backward_pass(self, outputs, labels):$/;"	m	class:PalmNet
base64	amazon-ml-hyperparameter-optimization/evaluation.py	/^import base64$/;"	i
base64	amazon-ml-hyperparameter-optimization/fold.py	/^import base64$/;"	i
baseline_f1	xgb-integration-py-class/xgb-integration-py-class.py	/^baseline_f1 = f1_score(y_test, baseline_preds)$/;"	v
baseline_preds	xgb-integration-py-class/xgb-integration-py-class.py	/^baseline_preds = (baseline_probs > 0.5).astype(int) #convert probabilities to class labels$/;"	v
baseline_preds	xgb-integration-py-reg/xgb-integration-py-reg.py	/^baseline_preds = baseline_model.predict(dtest)$/;"	v
baseline_probs	xgb-integration-py-class/xgb-integration-py-class.py	/^baseline_probs = baseline_model.predict(dtest)$/;"	v
baseline_rmse	xgb-integration-py-reg/xgb-integration-py-reg.py	/^baseline_rmse = mean_squared_error(y_test, baseline_preds, squared=False)$/;"	v
batch_count	bert-distillation-multimetric/logger.py	/^    batch_count=10,$/;"	v
batch_fit	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^    def batch_fit(self, stories, queries, answers):$/;"	m	class:MemN2N
batch_size	bert-distillation-multimetric/logger.py	/^    batch_size=1048576$/;"	v
batch_size	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                                                                                           batch_size=2 ** ($/;"	v	class:OrchestrateCLI.run.Multitask
batch_size	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                                                                                         batch_size=2 ** ($/;"	v	class:OrchestrateCLI.run.Multitask
batch_size	tensorflow-cnn/python/cnn_example_cpu.py	/^  batch_size = 10000$/;"	v
batch_size	tensorflow-cnn/python/cnn_example_gpu.py	/^  batch_size = 100$/;"	v
batch_size	unsupervised-model/unsupervised_model.py	/^                                           batch_size=300)$/;"	v
bc_dataset	xgboost-py-classifier/xgboost_py_classifier.py	/^bc_dataset = load_breast_cancer()$/;"	v
best_assignments	random-forest/python/random_forest.py	/^best_assignments = conn.experiments(experiment.id).best_assignments().fetch().data[0].assignments$/;"	v
best_assignments	surprise-py-recsys/surprise_recommender.py	/^best_assignments = all_best_assignments.data[0].assignments$/;"	v
bet_reader	sigopt-beats-vegas/predictor/evaluator.py	/^import bet_reader$/;"	i
bet_reader	sigopt-beats-vegas/predictor/stand_alone.py	/^import bet_reader$/;"	i
bias_variable	tensorflow-cnn/python/cnn_example_cpu.py	/^  def bias_variable(shape):$/;"	f
bias_variable	tensorflow-cnn/python/cnn_example_gpu.py	/^  def bias_variable(shape):$/;"	f
boto3	amazon-ml-hyperparameter-optimization/evaluation.py	/^import boto3$/;"	i
boto3	amazon-ml-hyperparameter-optimization/fold.py	/^import boto3$/;"	i
boto3	bert-distillation-multimetric/distilbert_data_model_loaders/load_squad_dataset.py	/^import boto3$/;"	i
boto3	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^import boto3$/;"	i
boto3	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^import boto3$/;"	i
boto3	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^import boto3$/;"	i
box_score_helpers	sigopt-beats-vegas/predictor/game_stats.py	/^import box_score_helpers$/;"	i
budget	xgb-integration-py-class/xgb-integration-py-class.py	/^    budget=20,$/;"	v
budget	xgb-integration-py-reg/xgb-integration-py-reg.py	/^    budget=100,$/;"	v
buffer_duration	bert-distillation-multimetric/logger.py	/^    buffer_duration=10000,$/;"	v
build	amazon-ml-hyperparameter-optimization/evaluation.py	/^    def build(self):$/;"	m	class:Evaluation
build	amazon-ml-hyperparameter-optimization/fold.py	/^    def build(self):$/;"	m	class:Fold
build_compute_graph	dnn-tuning-nvidia-mxnet/cnn_text/graph.py	/^def build_compute_graph(vocab_size, num_embed, sentence_size,$/;"	f
build_compute_graph	dnn-tuning-nvidia-mxnet/cnn_text/objective.py	/^from cnn_text.graph import build_compute_graph$/;"	i
build_datasource_name	amazon-ml-hyperparameter-optimization/fold.py	/^    def build_datasource_name(self, name, rearrangement_str):$/;"	m	class:Fold
build_evaluations	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^def build_evaluations(model_spec, folds):$/;"	f
build_experiment	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^def build_experiment(conn):$/;"	f
build_folds	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^def build_folds(data_spec=None, kfolds=None):$/;"	f
build_history	sigopt-beats-vegas/predictor/history_player.py	/^def build_history(bst, bet_info_s15):$/;"	f
build_input_data	dnn-tuning-nvidia-mxnet/cnn_text/preprocess.py	/^def build_input_data(sentences, labels, vocabulary):$/;"	f
build_model	sigopt-beats-vegas/predictor/model.py	/^def build_model(X, y, n_estimators=10, min_samples_split=2, min_samples_leaf=1):$/;"	f
build_model_inputs	sigopt-beats-vegas/predictor/model.py	/^def build_model_inputs(historical_games, all_stats, moving_averages, transform_params=None):$/;"	f
build_model_spec	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^def build_model_spec(regularization_type, regularization_amount):$/;"	f
build_rearrangement_str	amazon-ml-hyperparameter-optimization/fold.py	/^    def build_rearrangement_str(self, is_complement):$/;"	m	class:Fold
build_vocab	dnn-tuning-nvidia-mxnet/cnn_text/preprocess.py	/^def build_vocab(sentences):$/;"	f
calc_distillation_loss	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    def calc_distillation_loss(self, args_dict, batch, end_logits_stu, inputs, loss, start_logits_stu):$/;"	m	class:TrainSquadDistillation
calcuate_predictions	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^    def calcuate_predictions(self, all_results, examples, features):$/;"	m	class:EvalSquadDistillation
calculate_features_from_boxscore	sigopt-beats-vegas/predictor/features.py	/^def calculate_features_from_boxscore(box_score, is_home_game):$/;"	f
calculate_inference_time	multimetric-timeseries/train.py	/^def calculate_inference_time(model, data):$/;"	f
calculate_num_model_parameters	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^def calculate_num_model_parameters(model):$/;"	f
calculate_objective	classifier/classifier_tuner.py	/^    def calculate_objective(self, assignments):$/;"	m	class:ExampleRunner
calculate_objective	dnn-tuning-nvidia-mxnet/cnn_text/objective.py	/^def calculate_objective(assignments, data, with_architecture=False):$/;"	f
calculate_objective	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^from cnn_text.objective import calculate_objective$/;"	i
calculate_objective	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^from cnn_text.objective import calculate_objective$/;"	i
calculate_objective	dnn-tuning-nvidia-mxnet/run_experiments.py	/^from cnn_text.objective import calculate_objective$/;"	i
callbacks	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^callbacks = Callbacks(mlp, train_set, eval_set=valid_set, **args.callback_args)$/;"	v
callbacks	dnn-tuning-nervana/nervana_all_cnn.py	/^  callbacks = Callbacks(mlp)$/;"	v
categorical_values	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/random_search_parameters_config.py	/^                        categorical_values=[dict(name=SGDOptimizer.ADAGRAD.value), dict(name=SGDOptimizer.GRADIENT_DESCENT_MOMENTUM.value),$/;"	v
categorical_values	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_parameters_config.py	/^                        categorical_values=[dict(name=SGDOptimizer.ADAGRAD.value), dict(name=SGDOptimizer.GRADIENT_DESCENT_MOMENTUM.value),$/;"	v
ch_dataset	xgboost-py-regression/xgboost_py_regressor.py	/^ch_dataset = fetch_california_housing()$/;"	v
chain	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^from itertools import chain$/;"	i
chain	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^from itertools import chain$/;"	i
check_assertion_error	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^    def check_assertion_error(self, assertion_error):$/;"	m	class:OptimizeSquadDistillation
check_cuda_mem_error	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^    def check_cuda_mem_error(self, runtime_error):$/;"	m	class:OptimizeSquadDistillation
checkpoint	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    def checkpoint(self, args_dict, model, optimizer, scheduler):$/;"	m	class:TrainSquadDistillation
checkpoint_model	stanford-augmented-image-classification/resnet.py	/^    def checkpoint_model(self, epoch, training_loss, epithet):$/;"	m	class:ResNet
checkpoint_model	stanford-car-classification/resnet.py	/^    def checkpoint_model(self, epoch, training_loss, epithet):$/;"	m	class:PalmNet
choices	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        choices=range(2, 11),  # 2 to 10 is valid input$/;"	v
clean_str	dnn-tuning-nvidia-mxnet/cnn_text/preprocess.py	/^def clean_str(string):$/;"	f
clean_up_augmented_images	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^def clean_up_augmented_images(path_images):$/;"	f
clean_up_checkpoints	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^    def clean_up_checkpoints(self, failed):$/;"	m	class:OptimizeSquadDistillation
clean_up_ray_output	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^def clean_up_ray_output(ray_output_directory):$/;"	f
cleanup	amazon-ml-hyperparameter-optimization/evaluation.py	/^    def cleanup(self):$/;"	m	class:Evaluation
cleanup	amazon-ml-hyperparameter-optimization/fold.py	/^    def cleanup(self):$/;"	m	class:Fold
cleanup_evaluations	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^def cleanup_evaluations(evaluations):$/;"	f
cleanup_folds	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^def cleanup_folds(folds):$/;"	f
clf	random-forest/python/random_forest.sklearn.py	/^clf = SigOptSearchCV($/;"	v
clf	unsupervised-model/unsupervised_model.py	/^  clf = xgb.XGBClassifier(max_depth=int(params['xgb_mx_depth']), n_estimators=int(params['xgb_num_est']),$/;"	v
clf	xgboost-py-classifier/xgboost_py_classifier.py	/^clf = RandomForestClassifier(max_depth=2, random_state=1337)$/;"	v
cli	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^    cli = RunDistilBertSquadCLI()$/;"	v	class:RunDistilBertSquadCLI
client_token	random-forest/python/random_forest.sklearn.py	/^  client_token=client_token,$/;"	v
client_token	random-forest/python/random_forest.sklearn.py	/^client_token = SIGOPT_API_TOKEN$/;"	v
cluster	unsupervised-model/unsupervised_model.py	/^import sklearn.cluster$/;"	i
clustr	unsupervised-model/unsupervised_model.py	/^  clustr = sklearn.cluster.MiniBatchKMeans(n_clusters=n_clust,$/;"	v
col_vals	xgb-integration-py-class/xgb-integration-py-class.py	/^    col_vals = list(train[col].astype(str).values)$/;"	v
col_vals	xgb-integration-py-reg/xgb-integration-py-reg.py	/^    col_vals = list(train[col].astype(str).values)$/;"	v
collect_performance	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^def collect_performance(evaluations):$/;"	f
colsample_bytree	xgboost-py-regression/xgboost_py_regressor.py	/^                        colsample_bytree=.8$/;"	v
compute_labels	unsupervised-model/unsupervised_model.py	/^                                           compute_labels=False,$/;"	v
compute_predictions_logits	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^    squad_evaluate$/;"	i
conditionals_list	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/random_search_parameters_config.py	/^conditionals_list = []$/;"	v
conditionals_list	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_conditionals_parameters_config.py	/^conditionals_list = [dict(name=ParametersList.OPTIMIZER.value, values=[SGDOptimizer.ADAM.value, SGDOptimizer.ADAGRAD.value, SGDOptimizer.GRADIENT_DESCENT_MOMENTUM.value, SGDOptimizer.RMSPROP.value, SGDOptimizer.ADADELTA.value])]$/;"	v
conditionals_list	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_parameters_config.py	/^conditionals_list = []$/;"	v
conditions	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_conditionals_parameters_config.py	/^                        conditions=dict(optimizer=[SGDOptimizer.ADAM.value, SGDOptimizer.ADAGRAD.value, SGDOptimizer.RMSPROP.value, SGDOptimizer.GRADIENT_DESCENT_MOMENTUM.value, SGDOptimizer.ADADELTA.value])),$/;"	v
conditions	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_conditionals_parameters_config.py	/^                        conditions=dict(optimizer=[SGDOptimizer.ADAM.value])),$/;"	v
conditions	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_conditionals_parameters_config.py	/^                        conditions=dict(optimizer=[SGDOptimizer.GRADIENT_DESCENT_MOMENTUM.value, SGDOptimizer.RMSPROP.value])),$/;"	v
conditions	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_conditionals_parameters_config.py	/^                        conditions=dict(optimizer=[SGDOptimizer.GRADIENT_DESCENT_MOMENTUM.value])),$/;"	v
conditions	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_conditionals_parameters_config.py	/^                        conditions=dict(optimizer=[SGDOptimizer.RMSPROP.value, SGDOptimizer.ADADELTA.value, SGDOptimizer.ADAM.value])),$/;"	v
conditions	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_conditionals_parameters_config.py	/^                        conditions=dict(optimizer=[SGDOptimizer.RMSPROP.value, SGDOptimizer.ADADELTA.value])),$/;"	v
config	amazon-ml-hyperparameter-optimization/evaluation.py	/^import config$/;"	i
config	amazon-ml-hyperparameter-optimization/fold.py	/^import config$/;"	i
config	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^import config$/;"	i
config	multimetric-timeseries/config.py	/^    config = f.read()$/;"	v
confusion_matrix	orchestrate/models/example/data_and_model_setup.py	/^from sklearn.metrics import confusion_matrix, average_precision_score, f1_score$/;"	i
confusion_matrix	stanford-augmented-image-classification/resnet.py	/^from sklearn.metrics import confusion_matrix$/;"	i
confusion_matrix	stanford-car-classification/resnet.py	/^from sklearn.metrics import confusion_matrix$/;"	i
conn	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^    conn = Connection(client_token=sigopt_api_token)$/;"	v
conn	dnn-tuning-nervana/nervana_all_cnn.py	/^conn = sigopt.interface.Connection()$/;"	v
conn	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^conn = Connection(client_token=SIGOPT_API_TOKEN)$/;"	v
conn	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^conn = Connection(client_token=SIGOPT_API_TOKEN)$/;"	v
conn	dnn-tuning-nvidia-mxnet/run_experiments.py	/^conn = Connection(client_token=SIGOPT_API_TOKEN)$/;"	v
conn	multimetric-timeseries/main.py	/^conn = Connection(client_token=SIGOPT_API_TOKEN)$/;"	v
conn	random-forest/python/random_forest.py	/^conn = Connection(client_token=SIGOPT_API_TOKEN)$/;"	v
conn	surprise-py-recsys/surprise_recommender.py	/^conn = Connection(client_token="YOUR_API_TOKEN_HERE")$/;"	v
conn	tensorflow-cnn/python/cnn_example_cpu.py	/^conn = sigopt.Connection()$/;"	v
conn	tensorflow-cnn/python/cnn_example_gpu.py	/^conn = sigopt.Connection()$/;"	v
conn	test/with_new_experiment	/^  conn = sigopt.Connection(client_token=os.environ['SIGOPT_API_TOKEN'])$/;"	v
conn	text-classifier/python/sentiment_classifier.py	/^conn = sigopt.Connection()$/;"	v
conn	unsupervised-model/unsupervised_model.py	/^conn = sigopt.Connection()$/;"	v
conn	xgboost-py-classifier/xgboost_py_classifier.py	/^conn = Connection(client_token=api_token)$/;"	v
conn	xgboost-py-regression/xgboost_py_regressor.py	/^conn = Connection(client_token=api_token)$/;"	v
connection	other-languages/other_languages.py	/^  connection = Connection(client_token=the_args.client_token)$/;"	v	class:SubProcessEvaluator
contrast_normalize	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^    contrast_normalize=True,$/;"	v
contrast_normalize	dnn-tuning-nervana/nervana_all_cnn.py	/^    contrast_normalize=True,$/;"	v
conv	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^conv = dict(init=init_uni, batch_norm=False, activation=relu)$/;"	v
conv	dnn-tuning-nervana/nervana_all_cnn.py	/^  conv = dict(init=init_uni, batch_norm=False, activation=relu)$/;"	v
conv2d	tensorflow-cnn/python/cnn_example_cpu.py	/^  def conv2d(x, W):$/;"	f
conv2d	tensorflow-cnn/python/cnn_example_gpu.py	/^  def conv2d(x, W):$/;"	f
convert_rgb2gray	tensorflow-cnn/python/cnn_example_cpu.py	/^def convert_rgb2gray(X):$/;"	f
convert_rgb2gray	tensorflow-cnn/python/cnn_example_gpu.py	/^def convert_rgb2gray(X):$/;"	f
convert_rgb2gray	unsupervised-model/unsupervised_model.py	/^def convert_rgb2gray(X):$/;"	f
convp1	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^convp1 = dict(init=init_uni, batch_norm=False, activation=relu, padding=1)$/;"	v
convp1	dnn-tuning-nervana/nervana_all_cnn.py	/^  convp1 = dict(init=init_uni, batch_norm=False, activation=relu, padding=1)$/;"	v
convp1s2	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^convp1s2 = dict(init=init_uni, batch_norm=False, activation=relu, padding=1, strides=2)$/;"	v
convp1s2	dnn-tuning-nervana/nervana_all_cnn.py	/^  convp1s2 = dict(init=init_uni, batch_norm=False, activation=relu, padding=1, strides=2)$/;"	v
copy	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^import copy$/;"	i
correct_prediction	tensorflow-cnn/python/cnn_example_cpu.py	/^  correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))$/;"	v
correct_prediction	tensorflow-cnn/python/cnn_example_gpu.py	/^  correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))$/;"	v
cost	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^cost = GeneralizedCost(costfunc=CrossEntropyMulti())$/;"	v
cost	dnn-tuning-nervana/nervana_all_cnn.py	/^  cost = GeneralizedCost(costfunc=CrossEntropyMulti())$/;"	v
cov	unsupervised-model/unsupervised_model.py	/^  cov = LedoitWolf()$/;"	v
create_datasources	amazon-ml-hyperparameter-optimization/fold.py	/^    def create_datasources(self):$/;"	m	class:Fold
create_eval	amazon-ml-hyperparameter-optimization/evaluation.py	/^    def create_eval(self):$/;"	f
create_experiment	classifier/classifier_tuner.py	/^    def create_experiment(self):$/;"	m	class:ExampleRunner
create_experiment	dnn-tuning-nervana/sigopt_nervana.py	/^  def create_experiment(self):$/;"	m	class:JobRunner
create_experiment_metadata	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def create_experiment_metadata(self, experiment, metadata_dict):$/;"	m	class:SigOptExperiment
create_experiment_metadata	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def create_experiment_metadata(self, experiment, metadata_dict):$/;"	m	class:SigOptExperiment
create_ml_model	amazon-ml-hyperparameter-optimization/evaluation.py	/^    def create_ml_model(self):$/;"	f
create_model	orchestrate/models/example/keras_model.py	/^    def create_model(self, trainX):$/;"	m	class:KerasModel
create_model	surprise-py-recsys/surprise_recommender.py	/^def create_model(assignments):$/;"	f
create_model	xgboost-py-classifier/xgboost_py_classifier.py	/^def create_model(assignments):$/;"	f
create_model	xgboost-py-regression/xgboost_py_regressor.py	/^def create_model(assignments):$/;"	f
create_observation_dict	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^def create_observation_dict(suggestion):$/;"	f
create_observation_dict	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^def create_observation_dict(suggestion):$/;"	f
create_observation_metadata	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def create_observation_metadata(self, experiment, observation, metadata_dict):$/;"	m	class:SigOptExperiment
create_observation_metadata	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def create_observation_metadata(self, experiment, observation, metadata_dict):$/;"	m	class:SigOptExperiment
create_sigopt_experiment	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_runs_optimization_cycle.py	/^    def create_sigopt_experiment(self, experiment_name, hyperparameter_definition, metadata):$/;"	m	class:SigOptCycle
create_sigopt_experiment	maze-solving-mouse/sigopt_maze_analysis.py	/^    def create_sigopt_experiment(self, name=None):$/;"	m	class:SigOptMazeFrontierSolver
create_sigopt_experiment	sigopt-beats-vegas/predictor/stand_alone.py	/^def create_sigopt_experiment(conn, sigopt_depth):$/;"	f
cross_entropy	tensorflow-cnn/python/cnn_example_cpu.py	/^  cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))$/;"	v
cross_entropy	tensorflow-cnn/python/cnn_example_gpu.py	/^  cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))$/;"	v
cross_val_score	random-forest/python/random_forest.py	/^from sklearn.model_selection import cross_val_score, ShuffleSplit$/;"	i
cross_validate	surprise-py-recsys/surprise_recommender.py	/^from surprise.model_selection import cross_validate$/;"	i
cross_validation	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^from sklearn import cross_validation, metrics$/;"	i
cross_validation	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^from sklearn import cross_validation, metrics$/;"	i
cross_validation	parallel/data.py	/^from sklearn import cross_validation$/;"	i
cross_validation	text-classifier/python/sentiment_classifier.py	/^from sklearn import cross_validation$/;"	i
cv	random-forest/python/random_forest.sklearn.py	/^  cv=5,$/;"	v
cw_handler	bert-distillation-multimetric/logger.py	/^cw_handler = CloudWatchLogsHandler($/;"	v
data	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^data = get_data()$/;"	v
data	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^data = get_data()$/;"	v
data	dnn-tuning-nvidia-mxnet/run_experiments.py	/^data = get_data()$/;"	v
data	surprise-py-recsys/surprise_recommender.py	/^data = Dataset.load_builtin(name='ml-100k', prompt=False)$/;"	v
data_dir	sigopt-beats-vegas/boxscores/scraper/reduce.py	/^data_dir = sys.argv[1] if len(sys.argv) > 1 else '.'$/;"	v
data_s3_url	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        data_s3_url="s3:\/\/aml-sample-data\/banking.csv",$/;"	v
data_spec	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^    data_spec = DataSpec($/;"	v
datasets	classifier/classifier_tuner.py	/^from sklearn import datasets, svm, ensemble$/;"	i
datasets	parallel/data.py	/^from sklearn import datasets$/;"	i
datasets	random-forest/python/random_forest.py	/^from sklearn import datasets$/;"	i
datasets	random-forest/python/random_forest.sklearn.py	/^from sklearn import datasets$/;"	i
datefmt	bert-distillation-multimetric/logger.py	/^        datefmt="%m\/%d\/%Y %H:%M:%S",$/;"	v
datefmt	bert-distillation-multimetric/sigopt_optimization_cli.py	/^    datefmt="%m\/%d\/%Y %H:%M:%S",$/;"	v
datefmt	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_runs_optimization_cycle.py	/^    datefmt="%m\/%d\/%Y %H:%M:%S",$/;"	v
datefmt	bert-distillation-multimetric/squad_distillation_abstract_clis/a_optimizaton_run_squad_cli.py	/^    datefmt="%m\/%d\/%Y %H:%M:%S",$/;"	v
datefmt	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^    datefmt="%m\/%d\/%Y %H:%M:%S",$/;"	v
datefmt	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    datefmt="%m\/%d\/%Y %H:%M:%S",$/;"	v
datetime	dnn-tuning-nervana/nervana_all_cnn.py	/^import datetime$/;"	i
datetime	sigopt-beats-vegas/predictor/bet_reader.py	/^import datetime$/;"	i
datetime	sigopt-beats-vegas/predictor/box_score_helpers.py	/^import datetime$/;"	i
datetime	sigopt-beats-vegas/predictor/constant.py	/^import datetime$/;"	i
datetime	sigopt-beats-vegas/predictor/game_stats.py	/^import datetime$/;"	i
datetime	sigopt-beats-vegas/predictor/history_player.py	/^import datetime$/;"	i
datetime	sigopt-beats-vegas/predictor/read_data.py	/^import datetime$/;"	i
datetime	sigopt-beats-vegas/predictor/stand_alone.py	/^import datetime, os$/;"	i
datetime	tensorflow-cnn/python/cnn_example_cpu.py	/^import datetime$/;"	i
datetime	tensorflow-cnn/python/cnn_example_gpu.py	/^import datetime$/;"	i
datetime	unsupervised-model/unsupervised_model.py	/^import math, numpy, datetime$/;"	i
default	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        default="CV sample",$/;"	v
default	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        default=False,$/;"	v
default_timer	maze-solving-mouse/sigopt_maze_analysis.py	/^from timeit import default_timer$/;"	i
define_common_hpo_commandline_args	bert-distillation-multimetric/squad_distillation_abstract_clis/a_run_squad_w_distillation_cli.py	/^    def define_common_hpo_commandline_args(self, parser):$/;"	m	class:ARunDistilBertSquadCLI
define_hpo_commandline_args	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^    def define_hpo_commandline_args(self, parser):$/;"	m	class:RunDistilBertSquadCLI
define_run_commandline_args	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^    def define_run_commandline_args(self):$/;"	m	class:RayTuneSigOptDistilBertSquadCLI
define_run_commandline_args	bert-distillation-multimetric/squad_distillation_abstract_clis/a_optimizaton_run_squad_cli.py	/^    def define_run_commandline_args(self):$/;"	m	class:OptimizeDistilBertQuadCLI
define_run_commandline_args	bert-distillation-multimetric/squad_distillation_abstract_clis/a_run_squad_w_distillation_cli.py	/^    def define_run_commandline_args(self):$/;"	m	class:ARunDistilBertSquadCLI
delayed	sigopt-beats-vegas/predictor/run_model.py	/^from joblib import Parallel, delayed$/;"	i
description	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^            K-fold cross-validation."$/;"	v
dev_acc	dnn-tuning-nvidia-mxnet/run_experiments.py	/^    dev_acc = calculate_objective(suggestion.assignments, data,$/;"	v
device	stanford-augmented-image-classification/resnet.py	/^device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")$/;"	v
device	stanford-car-classification/resnet.py	/^device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")$/;"	v
device_lib	orchestrate/models/example/keras_model.py	/^    from tensorflow.python.client import device_lib$/;"	i
disturbe	xgboost-py-classifier/xgboost_py_classifier.py	/^import warnings  # `do not disturbe` mode$/;"	i
division	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^from __future__ import division$/;"	i
do	xgboost-py-classifier/xgboost_py_classifier.py	/^import warnings  # `do not disturbe` mode$/;"	i
do_nothing	dnn-tuning-nervana/nervana_all_cnn.py	/^  def do_nothing(_):$/;"	f
download_cache_from_s3	bert-distillation-multimetric/distilbert_data_model_loaders/load_squad_dataset.py	/^def download_cache_from_s3(args_dict, evaluate):$/;"	f
drp_out_keep_p	tensorflow-cnn/python/cnn_example_cpu.py	/^  drp_out_keep_p = params['drp_out_keep_p']$/;"	v
drp_out_keep_p	tensorflow-cnn/python/cnn_example_gpu.py	/^  drp_out_keep_p = params['drp_out_keep_p']$/;"	v
dtest	xgb-integration-py-class/xgb-integration-py-class.py	/^dtest = xgb.DMatrix(data=X_test, label=y_test, feature_names=X_test.columns)$/;"	v
dtest	xgb-integration-py-reg/xgb-integration-py-reg.py	/^dtest = xgb.DMatrix(data=X_test, label=y_test, feature_names=X_test.columns)$/;"	v
dtrain	xgb-integration-py-class/xgb-integration-py-class.py	/^dtrain = xgb.DMatrix(data=X_train, label=y_train, feature_names=X_train.columns)$/;"	v
dtrain	xgb-integration-py-reg/xgb-integration-py-reg.py	/^dtrain = xgb.DMatrix(data=X_train, label=y_train, feature_names=X_train.columns)$/;"	v
dval	xgb-integration-py-class/xgb-integration-py-class.py	/^dval = xgb.DMatrix(data=X_val, label=y_val, feature_names=X_val.columns)$/;"	v
dval	xgb-integration-py-reg/xgb-integration-py-reg.py	/^dval = xgb.DMatrix(data=X_val, label=y_val, feature_names=X_val.columns)$/;"	v
e	test/with_new_experiment	/^  e = conn.experiments().create($/;"	v
early_stopping_rounds	xgboost-py-regression/xgboost_py_regressor.py	/^                    early_stopping_rounds=50,$/;"	v
ensemble	classifier/classifier_tuner.py	/^from sklearn import datasets, svm, ensemble$/;"	i
ensemble	sigopt-beats-vegas/predictor/model.py	/^from sklearn import ensemble$/;"	i
ensemble	sigopt-beats-vegas/predictor/run_model.py	/^from sklearn import ensemble$/;"	i
env	test/with_new_experiment	/^    env=os.environ,$/;"	v
epoch_size	tensorflow-cnn/python/cnn_example_cpu.py	/^  epoch_size = 1$/;"	v
epoch_size	tensorflow-cnn/python/cnn_example_gpu.py	/^  epoch_size = 1$/;"	v
eval_metric	xgboost-py-regression/xgboost_py_regressor.py	/^                    eval_metric='rmse',$/;"	v
eval_set	xgboost-py-regression/xgboost_py_regressor.py	/^                    eval_set=eval_set,$/;"	v
eval_set	xgboost-py-regression/xgboost_py_regressor.py	/^eval_set=[(X_train,y_train),(X_val,y_val)]$/;"	v
evaluate	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^    def evaluate(self, model, dataset, examples, features):$/;"	m	class:EvalSquadDistillation
evaluate	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    def evaluate(self, args_dict, model, global_step):$/;"	m	class:TrainSquadDistillation
evaluate_assignments	multimetric-timeseries/main.py	/^from train import prepare_data, evaluate_assignments$/;"	i
evaluate_assignments	multimetric-timeseries/train.py	/^def evaluate_assignments(experiment, suggestion,$/;"	f
evaluate_metric	other-languages/other_languages.py	/^  def evaluate_metric(self, assignments):$/;"	m	class:SubProcessEvaluator
evaluate_model	dnn-tuning-nvidia-mxnet/cnn_text/evaluate.py	/^def evaluate_model(cnn_model, batch_size,$/;"	f
evaluate_model	dnn-tuning-nvidia-mxnet/cnn_text/objective.py	/^from cnn_text.evaluate import evaluate_model$/;"	i
evaluate_model	parallel/data.py	/^def evaluate_model(assignments):$/;"	f
evaluate_model	parallel/parallel.py	/^from data import PARAMETERS, evaluate_model$/;"	i
evaluate_model	random-forest/python/random_forest.py	/^def evaluate_model(assignments, X, y):$/;"	f
evaluate_model	sigopt-beats-vegas/predictor/evaluator.py	/^def evaluate_model(the_model, all_stats, bet_info, historical_games_by_tuple, moving_averages, transform_params, bet_threshold, cv_percent=0.8, cv_runs=100, start_date=SEASON_1415_START, end_date=SEASON_1415_END):$/;"	f
evaluate_model	surprise-py-recsys/surprise_recommender.py	/^def evaluate_model(assignments):$/;"	f
evaluate_model	xgboost-py-classifier/xgboost_py_classifier.py	/^def evaluate_model(assignments):$/;"	f
evaluate_model	xgboost-py-regression/xgboost_py_regressor.py	/^def evaluate_model(assignments):$/;"	f
evaluations	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        evaluations = build_evaluations(model_spec=model_spec, folds=folds)$/;"	v
evaluator	other-languages/other_languages.py	/^  evaluator = SubProcessEvaluator(the_args.command)$/;"	v	class:SubProcessEvaluator
evaluator	sigopt-beats-vegas/predictor/run_model.py	/^import evaluator$/;"	i
evaluator	sigopt-beats-vegas/predictor/stand_alone.py	/^import evaluator$/;"	i
execute_low_discrepancy_testing	maze-solving-mouse/sigopt_maze_analysis.py	/^    def execute_low_discrepancy_testing($/;"	m	class:SigOptMazeFrontierSolver
execute_sigopt_constraint_frontier_search	maze-solving-mouse/sigopt_maze_analysis.py	/^    def execute_sigopt_constraint_frontier_search(self, exp_dict_list, verbose):$/;"	m	class:SigOptMazeConstraintFrontierSolver
execute_sigopt_constraint_scalarized_optimization	maze-solving-mouse/sigopt_maze_analysis.py	/^    def execute_sigopt_constraint_scalarized_optimization(self, num_evals, num_tests, mean_constraint):$/;"	m	class:SigOptMazeConstraintFrontierSolver
execute_sigopt_weighted_sum_frontier_search	maze-solving-mouse/sigopt_maze_analysis.py	/^    def execute_sigopt_weighted_sum_frontier_search(self, exp_dict_list, verbose):$/;"	m	class:SigOptMazeWeightedSumFrontierSolver
execute_sigopt_weighted_sum_scalarized_optimization	maze-solving-mouse/sigopt_maze_analysis.py	/^    def execute_sigopt_weighted_sum_scalarized_optimization(self, num_evals, num_tests, mean_weight):$/;"	m	class:SigOptMazeWeightedSumFrontierSolver
exp_name	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^        exp_name = 'Multicriteria GPU-powered Sentiment Analysis (SGD + Architecture)'$/;"	v
exp_name	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^        exp_name = 'Multicriteria GPU-powered Sentiment Analysis (SGD Only)'$/;"	v
exp_name	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^        exp_name = 'Multicriteria[failures] GPU-powered Sentiment Analysis (SGD + Architecture)'$/;"	v
exp_name	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^        exp_name = 'Multicriteria[failures] GPU-powered Sentiment Analysis (SGD Only)'$/;"	v
exp_name	dnn-tuning-nvidia-mxnet/run_experiments.py	/^        exp_name = 'GPU-powered Sentiment Analysis (SGD + Architecture)'$/;"	v
exp_name	dnn-tuning-nvidia-mxnet/run_experiments.py	/^        exp_name = 'GPU-powered Sentiment Analysis (SGD Only)'$/;"	v
experiment	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^    experiment = build_experiment(conn)$/;"	v
experiment	dnn-tuning-nervana/nervana_all_cnn.py	/^experiment = conn.experiments().create($/;"	v
experiment	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^    experiment = conn.experiments().create($/;"	v
experiment	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^    experiment = conn.experiments(experiment_id).fetch()$/;"	v
experiment	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^    experiment = conn.experiments().create($/;"	v
experiment	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^    experiment = conn.experiments(experiment_id).fetch()$/;"	v
experiment	dnn-tuning-nvidia-mxnet/run_experiments.py	/^    experiment = conn.experiments().create($/;"	v
experiment	dnn-tuning-nvidia-mxnet/run_experiments.py	/^    experiment = conn.experiments(experiment_id).fetch()$/;"	v
experiment	multimetric-timeseries/main.py	/^    experiment = conn.experiments(experiment.id).fetch()$/;"	v
experiment	multimetric-timeseries/main.py	/^experiment = conn.experiments().create($/;"	v
experiment	other-languages/other_languages.py	/^  experiment = connection.experiments(the_args.experiment_id).fetch()$/;"	v	class:SubProcessEvaluator
experiment	random-forest/python/random_forest.py	/^experiment = conn.experiments().create($/;"	v
experiment	surprise-py-recsys/surprise_recommender.py	/^  experiment = conn.experiments(experiment.id).fetch()$/;"	v
experiment	surprise-py-recsys/surprise_recommender.py	/^experiment = conn.experiments().create($/;"	v
experiment	tensorflow-cnn/python/cnn_example_cpu.py	/^experiment = conn.experiments().create($/;"	v
experiment	tensorflow-cnn/python/cnn_example_gpu.py	/^experiment = conn.experiments().create($/;"	v
experiment	text-classifier/python/sentiment_classifier.py	/^experiment = conn.experiments().create($/;"	v
experiment	unsupervised-model/unsupervised_model.py	/^experiment = conn.experiments().create($/;"	v
experiment	xgboost-py-classifier/xgboost_py_classifier.py	/^    experiment = conn.experiments(experiment.id).fetch()$/;"	v
experiment	xgboost-py-classifier/xgboost_py_classifier.py	/^experiment = conn.experiments().create($/;"	v
experiment	xgboost-py-regression/xgboost_py_regressor.py	/^    experiment = conn.experiments(experiment.id).fetch()$/;"	v
experiment	xgboost-py-regression/xgboost_py_regressor.py	/^experiment = conn.experiments().create($/;"	v
experiment_id	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^experiment_id = args.experiment_id$/;"	v
experiment_id	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^experiment_id = args.experiment_id$/;"	v
experiment_id	dnn-tuning-nvidia-mxnet/run_experiments.py	/^experiment_id = args.experiment_id$/;"	v
experiment_type	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/random_search_parameters_config.py	/^experiment_type = "random"$/;"	v
experiment_type	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_conditionals_parameters_config.py	/^experiment_type = "offline"$/;"	v
experiment_type	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_parameters_config.py	/^experiment_type = "offline"$/;"	v
experiment_type_mapping	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^experiment_type_mapping = {ExperimentTypes.RANDOM: ConfigMapping.RANDOM,$/;"	v
extra_X	tensorflow-cnn/python/cnn_example_cpu.py	/^extra_X = convert_rgb2gray(extra_X)$/;"	v
extra_X	tensorflow-cnn/python/cnn_example_cpu.py	/^extra_X = scipy.io.loadmat("extra_32x32.mat")['X'].astype('float64')$/;"	v
extra_X	tensorflow-cnn/python/cnn_example_gpu.py	/^extra_X = convert_rgb2gray(extra_X)$/;"	v
extra_X	tensorflow-cnn/python/cnn_example_gpu.py	/^extra_X = scipy.io.loadmat("extra_32x32.mat")['X'].astype('float64')$/;"	v
extra_XZ	tensorflow-cnn/python/cnn_example_cpu.py	/^extra_XZ = numpy.concatenate((extra_XZ, train_XZ), axis=0)$/;"	v
extra_XZ	tensorflow-cnn/python/cnn_example_cpu.py	/^extra_XZ = numpy.reshape(extra_X.T, (extra_X.shape[2], image_w * image_w))$/;"	v
extra_XZ	tensorflow-cnn/python/cnn_example_cpu.py	/^extra_XZ = preprocessing.scale(extra_XZ, axis=1)$/;"	v
extra_XZ	tensorflow-cnn/python/cnn_example_gpu.py	/^extra_XZ = numpy.concatenate((extra_XZ, train_XZ), axis=0)$/;"	v
extra_XZ	tensorflow-cnn/python/cnn_example_gpu.py	/^extra_XZ = numpy.reshape(extra_X.T, (extra_X.shape[2], image_w * image_w))$/;"	v
extra_XZ	tensorflow-cnn/python/cnn_example_gpu.py	/^extra_XZ = preprocessing.scale(extra_XZ, axis=1)$/;"	v
extra_y	tensorflow-cnn/python/cnn_example_cpu.py	/^extra_y = scipy.io.loadmat("extra_32x32.mat")['y'].astype('float64')$/;"	v
extra_y	tensorflow-cnn/python/cnn_example_gpu.py	/^extra_y = scipy.io.loadmat("extra_32x32.mat")['y'].astype('float64')$/;"	v
extra_yZ	tensorflow-cnn/python/cnn_example_cpu.py	/^extra_yZ = numpy.concatenate((extra_yZ, train_yZ), axis=0)$/;"	v
extra_yZ	tensorflow-cnn/python/cnn_example_cpu.py	/^extra_yZ = one_hot_enc.fit_transform(extra_y)$/;"	v
extra_yZ	tensorflow-cnn/python/cnn_example_gpu.py	/^extra_yZ = numpy.concatenate((extra_yZ, train_yZ), axis=0)$/;"	v
extra_yZ	tensorflow-cnn/python/cnn_example_gpu.py	/^extra_yZ = one_hot_enc.fit_transform(extra_y)$/;"	v
f1_score	orchestrate/models/example/data_and_model_setup.py	/^from sklearn.metrics import confusion_matrix, average_precision_score, f1_score$/;"	i
f1_score	stanford-augmented-image-classification/resnet.py	/^from sklearn.metrics import f1_score$/;"	i
f1_score	stanford-car-classification/resnet.py	/^from sklearn.metrics import f1_score$/;"	i
f1_score	xgb-integration-py-class/xgb-integration-py-class.py	/^from sklearn.metrics import f1_score$/;"	i
f1_score	xgboost-py-classifier/xgboost_py_classifier.py	/^from sklearn.metrics import accuracy_score, average_precision_score, f1_score$/;"	i
f_unsup	unsupervised-model/unsupervised_model.py	/^  def f_unsup(img):$/;"	f
factor	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                                                                             factor=sigopt.get_parameter($/;"	v	class:OrchestrateCLI.run.Multitask
features	sigopt-beats-vegas/predictor/game_stats.py	/^import features$/;"	i
fetch_california_housing	xgboost-py-regression/xgboost_py_regressor.py	/^from sklearn.datasets import fetch_california_housing$/;"	i
fileHandler	stanford-augmented-image-classification/resnet.py	/^fileHandler = logging.FileHandler("{0}\/{1}.log".format('.\/', 'resnet_training_'+str(int(time.time()))))$/;"	v
fileHandler	stanford-car-classification/resnet.py	/^fileHandler = logging.FileHandler("{0}\/{1}.log".format('.\/', 'resnet_training_'+str(int(time.time()))))$/;"	v
files_names	sigopt-beats-vegas/boxscores/scraper/reduce.py	/^files_names = glob.glob(os.path.join(data_dir, "*.json"))$/;"	v
filter1_depth	tensorflow-cnn/python/cnn_example_cpu.py	/^  filter1_depth = int(params['filter1_depth'])$/;"	v
filter1_depth	tensorflow-cnn/python/cnn_example_gpu.py	/^  filter1_depth = int(params['filter1_depth'])$/;"	v
filter1_w	tensorflow-cnn/python/cnn_example_cpu.py	/^  filter1_w = int(params['filter1_w'])$/;"	v
filter1_w	tensorflow-cnn/python/cnn_example_gpu.py	/^  filter1_w = int(params['filter1_w'])$/;"	v
filter2_depth	tensorflow-cnn/python/cnn_example_cpu.py	/^  filter2_depth = int(params['filter2_depth'])$/;"	v
filter2_depth	tensorflow-cnn/python/cnn_example_gpu.py	/^  filter2_depth = int(params['filter2_depth'])$/;"	v
filter2_w	tensorflow-cnn/python/cnn_example_cpu.py	/^  filter2_w = int(params['filter2_w'])$/;"	v
filter2_w	tensorflow-cnn/python/cnn_example_gpu.py	/^  filter2_w = int(params['filter2_w'])$/;"	v
find_pareto_efficient_mean_sd_mat	maze-solving-mouse/sigopt_maze_analysis.py	/^def find_pareto_efficient_mean_sd_mat(mean_mat, sd_mat, *args, **kwargs):$/;"	f
find_pareto_efficient_mean_sd_vecs	maze-solving-mouse/sigopt_maze_analysis.py	/^def find_pareto_efficient_mean_sd_vecs(mean_vec, sd_vec, *args, **kwargs):$/;"	f
fine_tuning_squad2_default_hyperparameters	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^fine_tuning_squad2_default_hyperparameters = {$/;"	v
fine_tuning_squad2_default_run_parameters	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^fine_tuning_squad2_default_run_parameters = {$/;"	v
fire_ncloud	dnn-tuning-nervana/sigopt_nervana.py	/^  def fire_ncloud(self, assignments):$/;"	m	class:JobRunner
fit	reinforcement-learning/dqn.py	/^  def fit(self, session, states, actions, target_q_values):$/;"	m	class:QNetwork
fit_model	multimetric-timeseries/train.py	/^def fit_model(assignments, model, x_train, Y_train, x_test, Y_test):$/;"	f
fit_model	xgboost-py-regression/xgboost_py_regressor.py	/^fit_model = gbm.fit( $/;"	v
fittingTime	xgboost-py-classifier/xgboost_py_classifier.py	/^fittingTime = time.time() - start$/;"	v
fix_game	sigopt-beats-vegas/predictor/bet_reader.py	/^def fix_game(game):$/;"	f
fix_game	sigopt-beats-vegas/predictor/history_player.py	/^from bet_reader import fix_game$/;"	i
fold_ordinal	amazon-ml-hyperparameter-optimization/evaluation.py	/^    fold_ordinal=self.fold.fold_ordinal,$/;"	v	class:Evaluation
folds	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^    folds = build_folds(data_spec=data_spec, kfolds=kfolds)$/;"	v
format	bert-distillation-multimetric/logger.py	/^        format="%(asctime)s - %(levelname)s - %(name)s -   %(message)s",$/;"	v
format	bert-distillation-multimetric/sigopt_optimization_cli.py	/^    format="%(asctime)s - %(levelname)s - %(name)s -   %(message)s",$/;"	v
format	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_runs_optimization_cycle.py	/^    format="%(asctime)s - %(levelname)s - %(name)s -   %(message)s",$/;"	v
format	bert-distillation-multimetric/squad_distillation_abstract_clis/a_optimizaton_run_squad_cli.py	/^    format="%(asctime)s - %(levelname)s - %(name)s -   %(message)s",$/;"	v
format	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^    format="%(asctime)s - %(levelname)s - %(name)s -   %(message)s",$/;"	v
format	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    format="%(asctime)s - %(levelname)s - %(name)s -   %(message)s",$/;"	v
forward_pass	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    def forward_pass(self, args_dict, batch, model):$/;"	m	class:TrainSquadDistillation
forward_pass	stanford-augmented-image-classification/resnet.py	/^    def forward_pass(self, inputs):$/;"	m	class:ResNet
forward_pass	stanford-car-classification/resnet.py	/^    def forward_pass(self, inputs):$/;"	m	class:PalmNet
full	stanford-augmented-image-classification/i_orchestrate_multitask.py	/^    full = 1.0$/;"	v	class:Multitask
full	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^            full = parsed_cli_arguments[CLI.EPOCHS.value]$/;"	v	class:OrchestrateCLI.run.Multitask
gbm	xgboost-py-regression/xgboost_py_regressor.py	/^gbm = xgb.XGBRegressor( $/;"	v
generate_all_stats	sigopt-beats-vegas/predictor/read_data.py	/^def generate_all_stats(box_scores, all_stats=None):$/;"	f
generate_cli_hpo	stanford-augmented-image-classification/i_commandline_arguments.py	/^def generate_cli_hpo(parser):$/;"	f
generate_cli_hpo	stanford-augmented-image-classification/resnet_stanford_cars_augmented_training.py	/^from i_commandline_arguments import generate_cli_hpo_augment, generate_cli_hpo$/;"	i
generate_cli_hpo	stanford-augmented-image-classification/resnet_stanford_cars_training.py	/^from i_commandline_arguments import generate_cli_hpo$/;"	i
generate_cli_hpo_augment	stanford-augmented-image-classification/i_commandline_arguments.py	/^def generate_cli_hpo_augment(parser):$/;"	f
generate_cli_hpo_augment	stanford-augmented-image-classification/resnet_stanford_cars_augmented_training.py	/^from i_commandline_arguments import generate_cli_hpo_augment, generate_cli_hpo$/;"	i
generate_directory	stanford-augmented-image-classification/resnet.py	/^    def generate_directory(self):$/;"	m	class:ResNet
generate_directory	stanford-car-classification/resnet.py	/^    def generate_directory(self):$/;"	m	class:PalmNet
generate_halton_points	maze-solving-mouse/sigopt_maze_analysis.py	/^def generate_halton_points(num_points, domain_bounds, skip=0, leap=1, shift=0):$/;"	f
generate_historical_games	sigopt-beats-vegas/predictor/read_data.py	/^def generate_historical_games(box_scores, max_date=None):$/;"	f
generate_random_maze	maze-solving-mouse/maze_tools.py	/^    def generate_random_maze(self, num_rows, num_cols, prob=(.25, .25, .25, .25)):$/;"	m	class:RightTurnSolver
generate_transformation_color_jitter	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^    def generate_transformation_color_jitter(self,$/;"	m	class:StanfordCarsDataAugmentation
get_all_data_matrix	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^    def get_all_data_matrix(self):$/;"	m	class:StanfordCarsDataAugmentation
get_all_experiments	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def get_all_experiments(self):$/;"	m	class:SigOptExperiment
get_all_experiments	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def get_all_experiments(self):$/;"	m	class:SigOptExperiment
get_all_hyperparameter_names	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^def get_all_hyperparameter_names():$/;"	f
get_all_hyperparameter_names	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_hpo_parameters import get_all_hyperparameter_names$/;"	i
get_all_observations	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def get_all_observations(self, experiment):$/;"	m	class:SigOptExperiment
get_all_observations	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def get_all_observations(self, experiment):$/;"	m	class:SigOptExperiment
get_all_run_parameter_names	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^def get_all_run_parameter_names():$/;"	f
get_all_run_parameter_names	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import get_all_run_parameter_names$/;"	i
get_alpha_squad_value	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^        def get_alpha_squad_value(alpha_ce_value):$/;"	f	function:OptimizeSquadDistillation.transform_parameters
get_assignments	stanford-augmented-image-classification/i_orchestrate_multitask.py	/^def get_assignments(*args):$/;"	f
get_assignments	stanford-augmented-image-classification/orchestrate_stanford_cars_augmentation_cli.py	/^from i_orchestrate_multitask import get_assignments$/;"	i
get_assignments	stanford-augmented-image-classification/orchestrate_stanford_cars_cli.py	/^from i_orchestrate_multitask import get_assignments$/;"	i
get_average_stats_from_last_games	sigopt-beats-vegas/predictor/game_stats.py	/^  def get_average_stats_from_last_games(self, num_games, current_date, transform_params):$/;"	m	class:GameStats
get_best_suggestions	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def get_best_suggestions(self, experiment):$/;"	m	class:SigOptExperiment
get_best_suggestions	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def get_best_suggestions(self, experiment):$/;"	m	class:SigOptExperiment
get_class_distribution	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^    def get_class_distribution(self):$/;"	m	class:AStanfordCarDataset
get_class_distribution	stanford-car-classification/stanford_cars.py	/^    def get_class_distribution(self):$/;"	m	class:StanfordCars
get_class_distribution	stanford-car-classification/stanford_cars.py	/^    def get_class_distribution(self):$/;"	m	class:StanfordCarsTestData
get_classifier	classifier/classifier_tuner.py	/^    def get_classifier(self, parameters):$/;"	m	class:ExampleRunner
get_cnn_model	dnn-tuning-nvidia-mxnet/cnn_text/model.py	/^def get_cnn_model(cnn, batch_size, sentence_size):$/;"	f
get_cnn_model	dnn-tuning-nvidia-mxnet/cnn_text/objective.py	/^from cnn_text.model import get_cnn_model$/;"	i
get_commandline_args	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^    def get_commandline_args(self):$/;"	m	class:RunDistilBertSquadCLI
get_commandline_args	bert-distillation-multimetric/sigopt_optimization_cli.py	/^    def get_commandline_args(self):$/;"	m	class:SigOptDistilBertQuadCLI
get_commandline_args	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^    def get_commandline_args(self):$/;"	m	class:RayTuneSigOptDistilBertSquadCLI
get_commandline_args	bert-distillation-multimetric/squad_distillation_abstract_clis/a_optimizaton_run_squad_cli.py	/^    def get_commandline_args(self):$/;"	m	class:OptimizeDistilBertQuadCLI
get_commandline_args	bert-distillation-multimetric/squad_distillation_abstract_clis/a_run_squad_w_distillation_cli.py	/^    def get_commandline_args(self):$/;"	m	class:ARunDistilBertSquadCLI
get_config	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_from_scratch.py	/^    def get_config(self, config_dict=dict()):$/;"	m	class:LoadModelFromScratch
get_config	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_semi_pretrained.py	/^    def get_config(self, config_dict=dict()):$/;"	m	class:LoadSemiPretrainedModel
get_data	dnn-tuning-nvidia-mxnet/cnn_text/dataset.py	/^def get_data():$/;"	f
get_data	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^from cnn_text.dataset import get_data$/;"	i
get_data	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^from cnn_text.dataset import get_data$/;"	i
get_data	dnn-tuning-nvidia-mxnet/run_experiments.py	/^from cnn_text.dataset import get_data$/;"	i
get_data_generator	stanford-augmented-image-classification/a_stanford_data_processor.py	/^    def get_data_generator(self, data_matrix):$/;"	m	class:AStanfordDataProcessor
get_data_generator	stanford-augmented-image-classification/stanford_augmented_data_processor.py	/^    def get_data_generator(self, data_matrix):$/;"	m	class:StanfordAugmentedDataProcessor
get_data_generator	stanford-augmented-image-classification/stanford_data_processor.py	/^    def get_data_generator(self, data_matrix):$/;"	m	class:StanfordDataProcessor
get_dataloader_sampler	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^    def get_dataloader_sampler(self, dataset):$/;"	m	class:EvalSquadDistillation
get_datetime_from_boxscore	sigopt-beats-vegas/predictor/box_score_helpers.py	/^def get_datetime_from_boxscore(box_score):$/;"	f
get_default_hyperparameters	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_hpo_parameters.py	/^def get_default_hyperparameters():$/;"	f
get_default_hyperparameters	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^    SGDHyperparameter, ArchitectureHyperparameter$/;"	i
get_default_hyperparameters	bert-distillation-multimetric/squad_distillation_abstract_clis/a_run_squad_w_distillation_cli.py	/^    get_default_hyperparameters, SquadArchitectureHyperparameter, ArchitectureHyperparameter$/;"	i
get_default_hyperparameters	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_hpo_parameters import get_default_hyperparameters$/;"	i
get_default_run_parameters	bert-distillation-multimetric/distilbert_run_and_hpo_configurations/distilbert_squad_run_parameters.py	/^def get_default_run_parameters():$/;"	f
get_default_run_parameters	bert-distillation-multimetric/squad_distillation_abstract_clis/a_run_squad_w_distillation_cli.py	/^from distilbert_run_and_hpo_configurations.distilbert_squad_run_parameters import RunParameters, get_default_run_parameters$/;"	i
get_features	sigopt-beats-vegas/predictor/evaluator.py	/^from model import get_features$/;"	i
get_features	sigopt-beats-vegas/predictor/model.py	/^def get_features(all_stats, home, away, date, moving_averages, transform_params):$/;"	f
get_features	sigopt-beats-vegas/predictor/team_stats.py	/^  def get_features(self, moving_averages, current_date, is_home_game, transform_params=None):$/;"	m	class:TeamStats
get_file_s3	bert-distillation-multimetric/distilbert_data_model_loaders/load_squad_dataset.py	/^def get_file_s3(s3_resource, s3_bucket, s3_key, cache_dest):$/;"	f
get_game_weight	sigopt-beats-vegas/predictor/game_stats.py	/^  def get_game_weight(game_num, total_num_games, transform_params):$/;"	m	class:GameStats
get_historical_games	sigopt-beats-vegas/predictor/stand_alone.py	/^def get_historical_games(box_scores, max_date=None):$/;"	f
get_historical_games_by_tuple	sigopt-beats-vegas/predictor/evaluator.py	/^def get_historical_games_by_tuple(historical_games):$/;"	f
get_hyperparameter_tuple	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    def get_hyperparameter_tuple(self, augment_hyperparameters_enum, dataset_parameters):$/;"	m	class:StanfordCarsAugmentationCLI
get_initialized_experiment	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def get_initialized_experiment(self, experiment_id):$/;"	m	class:SigOptExperiment
get_initialized_experiment	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def get_initialized_experiment(self, experiment_id):$/;"	m	class:SigOptExperiment
get_label_unique_count	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^    def get_label_unique_count(self):$/;"	m	class:AStanfordCarDataset
get_label_unique_count	stanford-car-classification/stanford_cars.py	/^    def get_label_unique_count(self):$/;"	m	class:StanfordCars
get_label_unique_count	stanford-car-classification/stanford_cars.py	/^    def get_label_unique_count(self):$/;"	m	class:StanfordCarsTestData
get_linear_schedule_with_warmup	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from transformers import AdamW, get_linear_schedule_with_warmup$/;"	i
get_metric_names	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^def get_metric_names():$/;"	f
get_metric_names	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^from sigopt_optimization_wrapper.sigopt_multimetric_definition import get_metrics_list, get_metric_names$/;"	i
get_metrics_list	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_multimetric_definition.py	/^def get_metrics_list():$/;"	f
get_metrics_list	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_runs_optimization_cycle.py	/^from sigopt_optimization_wrapper.sigopt_multimetric_definition import get_metrics_list$/;"	i
get_metrics_list	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^from sigopt_optimization_wrapper.sigopt_multimetric_definition import get_metrics_list, get_metric_names$/;"	i
get_model	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_from_scratch.py	/^    def get_model(self, config):$/;"	m	class:LoadModelFromScratch
get_model	multimetric-timeseries/train.py	/^def get_model(assignments, x_train, nb_classes):$/;"	f
get_model_from_scratch	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_from_scratch.py	/^def get_model_from_scratch(model_type, config_dict):$/;"	f
get_model_from_scratch	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^from distilbert_data_model_loaders.load_transformer_from_scratch import get_model_from_scratch$/;"	i
get_num_optimization_steps	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    def get_num_optimization_steps(self, args_dict, train_dataloader):$/;"	m	class:TrainSquadDistillation
get_obj_from_job_id	dnn-tuning-nervana/sigopt_nervana.py	/^  def get_obj_from_job_id(self, job_id):$/;"	m	class:JobRunner
get_optimizer_scheduler	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    def get_optimizer_scheduler(self, model, args_dict, t_total):$/;"	m	class:TrainSquadDistillation
get_pretrained_config	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_pretrained.py	/^    def get_pretrained_config(self, config_name=None):$/;"	m	class:LoadPretrainedModel
get_pretrained_model	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_pretrained.py	/^    def get_pretrained_model(self, config):$/;"	m	class:LoadPretrainedModel
get_pretrained_model	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_pretrained.py	/^def get_pretrained_model(model_type, model_name_or_path, cache_dir):$/;"	f
get_pretrained_model	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_semi_pretrained.py	/^    def get_pretrained_model(self, config):$/;"	m	class:LoadSemiPretrainedModel
get_pretrained_model	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^from distilbert_data_model_loaders.load_transformer_pretrained import get_pretrained_model, get_pretrained_tokenizer$/;"	i
get_pretrained_resnet	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^from resnet import get_pretrained_resnet$/;"	i
get_pretrained_resnet	stanford-augmented-image-classification/resnet.py	/^def get_pretrained_resnet(is_freeze_weights, number_of_labels, model_type):$/;"	f
get_pretrained_resnet	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^from resnet import get_pretrained_resnet$/;"	i
get_pretrained_resnet	stanford-car-classification/resnet.py	/^def get_pretrained_resnet(is_freeze_weights, number_of_labels, model_type):$/;"	f
get_pretrained_resnet	stanford-car-classification/run_resnet_training_cli.py	/^from resnet import get_pretrained_resnet$/;"	i
get_pretrained_tokenizer	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_pretrained.py	/^def get_pretrained_tokenizer(model_type, model_name_or_path, cache_dir, max_positional_embedding_length=512):$/;"	f
get_pretrained_tokenizer	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^from distilbert_data_model_loaders.load_transformer_pretrained import get_pretrained_model, get_pretrained_tokenizer$/;"	i
get_run_arguments	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    def get_run_arguments(self, parsed_cli_dict):$/;"	m	class:AStanfordCarsCLI
get_run_arguments	stanford-augmented-image-classification/orchestrate_stanford_cars_augmentation_cli.py	/^    def get_run_arguments(self, parsed_cli_arguments):$/;"	m	class:OrchestrateAugmentationCLI
get_run_arguments	stanford-augmented-image-classification/orchestrate_stanford_cars_cli.py	/^    def get_run_arguments(self, parsed_cli_arguments):$/;"	m	class:OrchestrateCLI
get_run_arguments	stanford-augmented-image-classification/resnet_stanford_cars_augmented_training.py	/^    def get_run_arguments(self, parsed_cli_dict):$/;"	m	class:ResNetAugmentedTraining
get_run_arguments	stanford-augmented-image-classification/resnet_stanford_cars_training.py	/^    def get_run_arguments(self, parsed_cli_dict):$/;"	m	class:ResNetTraining
get_semi_pretrained_model	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_semi_pretrained.py	/^def get_semi_pretrained_model(model_type, model_name_or_path, cache_dir, config_dict):$/;"	f
get_semi_pretrained_model	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^from distilbert_data_model_loaders.load_transformer_semi_pretrained import get_semi_pretrained_model$/;"	i
get_sigopt_formatted_metrics	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^    def get_sigopt_formatted_metrics(self, results, eval_times, model):$/;"	m	class:OptimizeSquadDistillation
get_sigopt_hyperparameter_list	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_hyperparameter_definition.py	/^def get_sigopt_hyperparameter_list():$/;"	f
get_stories	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/data_utils.py	/^def get_stories(f, only_supporting=False):$/;"	f
get_student	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^    def get_student(self, pruning_seed=42):$/;"	m	class:ARunSquadDistillation
get_suggestions	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def get_suggestions(self, experiment):$/;"	m	class:SigOptExperiment
get_suggestions	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def get_suggestions(self, experiment):$/;"	m	class:SigOptExperiment
get_suggestions_meatadata	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def get_suggestions_meatadata(self, experiment, metadata_dict):$/;"	m	class:SigOptExperiment
get_teacher	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^    def get_teacher(self):$/;"	m	class:ARunSquadDistillation
get_teams	sigopt-beats-vegas/predictor/read_data.py	/^def get_teams(box_score):$/;"	f
get_tokenizer	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_pretrained.py	/^    def get_tokenizer(self, max_positional_embedding_length, tokenizer_name=None, do_lower=True):$/;"	m	class:LoadPretrainedModel
get_tokenizer	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^    def get_tokenizer(self):$/;"	m	class:ARunSquadDistillation
get_total_points_from_boxscore	sigopt-beats-vegas/predictor/box_score_helpers.py	/^def get_total_points_from_boxscore(box_score):$/;"	f
get_total_points_from_boxscore	sigopt-beats-vegas/predictor/read_data.py	/^from box_score_helpers import get_total_points_from_boxscore$/;"	i
get_train_dataloader	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    def get_train_dataloader(self, args_dict, train_dataset):$/;"	m	class:TrainSquadDistillation
gif_maze_generation	maze-solving-mouse/maze_tools.py	/^    def gif_maze_generation(self, prefix, image_format='png', duration=None, figsize=(10, 5), markersize=20):$/;"	m	class:RightTurnSolver
gif_solution_plot	maze-solving-mouse/maze_tools.py	/^    def gif_solution_plot(self, prefix, image_format='png', figsize=(10, 5), markersize=20):$/;"	m	class:RightTurnSolver
glob	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^import glob$/;"	i
glob	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^import glob$/;"	i
glob	sigopt-beats-vegas/boxscores/scraper/reduce.py	/^import glob$/;"	i
grequests	sigopt-beats-vegas/boxscores/scraper/scraper.py	/^import grequests$/;"	i
grid_generator	classifier/classifier_tuner.py	/^    def grid_generator(self, experiment):$/;"	m	class:ExampleRunner
gs	surprise-py-recsys/surprise_recommender.py	/^gs = GridSearchCV(SVD, param_grid, measures=['rmse', 'mae'], cv=3)$/;"	v
gym	reinforcement-learning/dqn.py	/^import gym$/;"	i
h_conv1	tensorflow-cnn/python/cnn_example_cpu.py	/^  h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)$/;"	v
h_conv1	tensorflow-cnn/python/cnn_example_gpu.py	/^  h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)$/;"	v
h_conv2	tensorflow-cnn/python/cnn_example_cpu.py	/^  h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)$/;"	v
h_conv2	tensorflow-cnn/python/cnn_example_gpu.py	/^  h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)$/;"	v
h_fc1	tensorflow-cnn/python/cnn_example_cpu.py	/^  h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)$/;"	v
h_fc1	tensorflow-cnn/python/cnn_example_gpu.py	/^  h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)$/;"	v
h_fc1_drop	tensorflow-cnn/python/cnn_example_cpu.py	/^  h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)$/;"	v
h_fc1_drop	tensorflow-cnn/python/cnn_example_gpu.py	/^  h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)$/;"	v
h_pool1	tensorflow-cnn/python/cnn_example_cpu.py	/^  h_pool1 = max_pool_2x2(h_conv1)$/;"	v
h_pool1	tensorflow-cnn/python/cnn_example_gpu.py	/^  h_pool1 = max_pool_2x2(h_conv1)$/;"	v
h_pool2	tensorflow-cnn/python/cnn_example_cpu.py	/^  h_pool2 = max_pool_2x2(h_conv2)$/;"	v
h_pool2	tensorflow-cnn/python/cnn_example_gpu.py	/^  h_pool2 = max_pool_2x2(h_conv2)$/;"	v
h_pool2_flat	tensorflow-cnn/python/cnn_example_cpu.py	/^  h_pool2_flat = tf.reshape(h_pool2, [-1, 8 * 8 * filter2_depth], name='rehsape2')$/;"	v
h_pool2_flat	tensorflow-cnn/python/cnn_example_gpu.py	/^  h_pool2_flat = tf.reshape(h_pool2, [-1, 8 * 8 * filter2_depth], name='rehsape2')$/;"	v
help	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        help="The API token for you SigOpt account, found at sigopt.com\/tokens\/",$/;"	v
help	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        help="enable debug mode, logging from DEBUG level"$/;"	v
help	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        help="the name of entities to create on Amazon ML"$/;"	v
help	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        help="the number of folds for cross-validation"$/;"	v
help	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^                    help='save visualization data from deconvolution')$/;"	v
huge_dict	sigopt-beats-vegas/boxscores/scraper/reduce.py	/^huge_dict = {}$/;"	v
hyperparams	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^        hyperparams = f.read()$/;"	v
hyperparams	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^        hyperparams = json.loads(hyperparams)$/;"	v
hyperparams	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^        hyperparams = f.read()$/;"	v
hyperparams	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^        hyperparams = json.loads(hyperparams)$/;"	v
hyperparams	dnn-tuning-nvidia-mxnet/run_experiments.py	/^        hyperparams = f.read()$/;"	v
hyperparams	dnn-tuning-nvidia-mxnet/run_experiments.py	/^        hyperparams = json.loads(hyperparams)$/;"	v
image_w	tensorflow-cnn/python/cnn_example_cpu.py	/^image_w = 32$/;"	v
image_w	tensorflow-cnn/python/cnn_example_gpu.py	/^image_w = 32$/;"	v
init_uni	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^init_uni = Gaussian(scale=args.gaussian_scale)$/;"	v
init_uni	dnn-tuning-nervana/nervana_all_cnn.py	/^  init_uni = Gaussian(scale=assignments.get("gaussian_scale"))$/;"	v
initialize_bayesian_experiment	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def initialize_bayesian_experiment(self, experiment_name, project_name, parameters_list, metrics_list, observation_budget, metadata, parallel_bandwidth):$/;"	m	class:SigOptExperiment
initialize_bayesian_experiment	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def initialize_bayesian_experiment(self, experiment_name, parameters_list, metrics_list, observation_budget, metadata):$/;"	m	class:SigOptExperiment
initialize_experiment	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def initialize_experiment(self, experiment_name, project_name, parameters_list, conditionals_list,$/;"	m	class:SigOptExperiment
initialize_experiment	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def initialize_experiment(self, experiment_name, parameters_list, conditionals_list, metrics_list, observation_budget, metadata, experiment_type):$/;"	m	class:SigOptExperiment
initialize_random_experiment	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def initialize_random_experiment(self, experiment_name, project_name, parameters_list, metrics_list, observation_budget,$/;"	m	class:SigOptExperiment
initialize_random_experiment	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def initialize_random_experiment(self, experiment_name, parameters_list, metrics_list, observation_budget, metadata):$/;"	m	class:SigOptExperiment
interface	dnn-tuning-nervana/nervana_all_cnn.py	/^import sigopt.interface$/;"	i
interface	dnn-tuning-nervana/sigopt_nervana.py	/^import sigopt.interface$/;"	i
io	dnn-tuning-nervana/sigopt_nervana.py	/^import io$/;"	i
io	tensorflow-cnn/python/cnn_example_cpu.py	/^import scipy.io$/;"	i
io	tensorflow-cnn/python/cnn_example_gpu.py	/^import scipy.io$/;"	i
io	unsupervised-model/unsupervised_model.py	/^import scipy.io$/;"	i
iris	parallel/data.py	/^iris = datasets.load_iris()$/;"	v
iris	random-forest/python/random_forest.py	/^iris = datasets.load_iris()$/;"	v
iris	random-forest/python/random_forest.sklearn.py	/^iris = datasets.load_iris()$/;"	v
is_cuda_mem_exception	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^def is_cuda_mem_exception(runtime_error):$/;"	f
is_matrix_comp_exception	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^def is_matrix_comp_exception(assertion_error):$/;"	f
itertools	classifier/classifier_tuner.py	/^import itertools$/;"	i
itertools	dnn-tuning-nvidia-mxnet/cnn_text/preprocess.py	/^import itertools$/;"	i
joblib_wrapper	sigopt-beats-vegas/predictor/run_model.py	/^def joblib_wrapper(historical_games_trunc, all_stats, bet_info, historical_games_by_tuple, tunable_param_list):$/;"	f
joint	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_optimization_run.py	/^from memn2n import joint, single$/;"	i
json	amazon-ml-hyperparameter-optimization/fold.py	/^import json$/;"	i
json	classifier/classifier_tuner.py	/^import json$/;"	i
json	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^import json$/;"	i
json	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^import json$/;"	i
json	dnn-tuning-nvidia-mxnet/run_experiments.py	/^import os, json, argparse$/;"	i
json	multimetric-timeseries/config.py	/^import os, json$/;"	i
json	sigopt-beats-vegas/boxscores/scraper/reduce.py	/^import json$/;"	i
json	sigopt-beats-vegas/boxscores/scraper/scraper.py	/^import json$/;"	i
json	sigopt-beats-vegas/predictor/read_data.py	/^import json$/;"	i
json	text-classifier/python/sentiment_classifier.py	/^import json, math, numpy$/;"	i
k_means	unsupervised-model/unsupervised_model.py	/^  k_means = clustr.fit(X_unlab_patches)$/;"	v
keep_prob	tensorflow-cnn/python/cnn_example_cpu.py	/^  keep_prob = tf.placeholder(tf.float32)$/;"	v
keep_prob	tensorflow-cnn/python/cnn_example_gpu.py	/^  keep_prob = tf.placeholder(tf.float32)$/;"	v
keras	multimetric-timeseries/train.py	/^import keras$/;"	i
kfolds	amazon-ml-hyperparameter-optimization/evaluation.py	/^    kfolds=self.fold.kfolds,$/;"	v	class:Evaluation
kfolds	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^    kfolds = args.kfolds$/;"	v
label_encoder	xgboost-py-classifier/xgboost_py_classifier.py	/^label_encoder = LabelEncoder()$/;"	v
label_encoder	xgboost-py-classifier/xgboost_py_classifier.py	/^label_encoder = label_encoder.fit(y)$/;"	v
labels	xgb-integration-py-class/xgb-integration-py-class.py	/^baseline_preds = (baseline_probs > 0.5).astype(int) #convert probabilities to class labels$/;"	c
labels	xgb-integration-py-class/xgb-integration-py-class.py	/^sigopt_preds = (sigopt_probs > 0.5).astype(int) #convert probabilities to class labels$/;"	c
layers	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^layers = [Dropout(keep=.8),$/;"	v
layers	dnn-tuning-nervana/nervana_all_cnn.py	/^  layers = [Dropout(keep=.8),$/;"	v
le	xgb-integration-py-class/xgb-integration-py-class.py	/^    le = LabelEncoder()$/;"	v
le	xgb-integration-py-reg/xgb-integration-py-reg.py	/^    le = LabelEncoder()$/;"	v
learning_rate	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^    learning_rate=float(args.learning_rate),$/;"	v
learning_rate	dnn-tuning-nervana/nervana_all_cnn.py	/^    	learning_rate=float(10.0**assignments.get("log(learning_rate)")),$/;"	v
learning_rate	xgboost-py-regression/xgboost_py_regressor.py	/^                        learning_rate=.05, $/;"	v
learning_rate_scheduler	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                           learning_rate_scheduler=learning_rate_scheduler,$/;"	v	class:OrchestrateCLI.run.Multitask
level	bert-distillation-multimetric/logger.py	/^        level=logging.INFO,$/;"	v
level	bert-distillation-multimetric/sigopt_optimization_cli.py	/^    level=logging.INFO,$/;"	v
level	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_runs_optimization_cycle.py	/^    level=logging.INFO,$/;"	v
level	bert-distillation-multimetric/squad_distillation_abstract_clis/a_optimizaton_run_squad_cli.py	/^    level=logging.INFO,$/;"	v
level	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^    level=logging.DEBUG,$/;"	v
level	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    level=logging.DEBUG,$/;"	v
load_and_cache_examples	bert-distillation-multimetric/distilbert_data_model_loaders/load_squad_dataset.py	/^def load_and_cache_examples(args_dict, tokenizer, evaluate=False, output_examples=False):$/;"	f
load_and_cache_examples	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from distilbert_data_model_loaders.load_squad_dataset import load_and_cache_examples$/;"	i
load_and_cache_examples	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^from distilbert_data_model_loaders.load_squad_dataset import load_and_cache_examples$/;"	i
load_breast_cancer	xgboost-py-classifier/xgboost_py_classifier.py	/^from sklearn.datasets import load_breast_cancer$/;"	i
load_checkpoints	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^    def load_checkpoints(self, all_parameters):$/;"	m	class:RunTrainingSquadDistillation
load_cifar10	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^from neon.data import DataIterator, load_cifar10$/;"	i
load_cifar10	dnn-tuning-nervana/nervana_all_cnn.py	/^from neon.data import DataIterator, load_cifar10$/;"	i
load_data_and_labels	dnn-tuning-nvidia-mxnet/cnn_text/dataset.py	/^from preprocess import (load_data_and_labels, pad_sentences,$/;"	i
load_data_and_labels	dnn-tuning-nvidia-mxnet/cnn_text/preprocess.py	/^def load_data_and_labels():$/;"	f
load_datasets	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    def load_datasets(self, *args):$/;"	m	class:AStanfordCarsCLI
load_datasets	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    def load_datasets(self, parsed_cli_arguments, dataset_parameters):$/;"	m	class:StanfordCarsAugmentationCLI
load_datasets	stanford-augmented-image-classification/stanford_cars_cli.py	/^    def load_datasets(self, parsed_cli_arguments):$/;"	m	class:StanfordCarsCLI
load_datasets	stanford-car-classification/resnet_stanford_cars_cli.py	/^    def load_datasets(self, parsed_cli_arguments):$/;"	m	class:StanfordCarsCLI
load_datasets	stanford-car-classification/run_resnet_training_cli.py	/^    def load_datasets(self, parsed_cli_arguments):$/;"	m	class:ResnetTrainingCLI
load_human_readable_labels	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^    def load_human_readable_labels(self):$/;"	m	class:AStanfordCarDataset
load_human_readable_labels	stanford-car-classification/stanford_cars.py	/^    def load_human_readable_labels(self):$/;"	m	class:StanfordCars
load_human_readable_labels	stanford-car-classification/stanford_cars.py	/^    def load_human_readable_labels(self):$/;"	m	class:StanfordCarsTestData
load_split_dataset	orchestrate/models/example/data_and_model_setup.py	/^    def load_split_dataset(self, dataset_file, random_state=1, test_size=0.2):$/;"	m	class:LoadTransformData
load_task	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/data_utils.py	/^def load_task(data_dir, task_id, only_supporting=False):$/;"	f
load_task	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^from memn2n.data_utils import load_task, vectorize_data$/;"	i
load_task	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^from memn2n.data_utils import load_task, vectorize_data$/;"	i
loadmat	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^from scipy.io import loadmat$/;"	i
loadmat	stanford-augmented-image-classification/stanford_car_dataset.py	/^from scipy.io import loadmat$/;"	i
loadmat	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^from scipy.io import loadmat$/;"	i
loadmat	stanford-car-classification/stanford_cars.py	/^from scipy.io import loadmat$/;"	i
logFormatter	stanford-augmented-image-classification/resnet.py	/^logFormatter = logging.Formatter("%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s")$/;"	v
logFormatter	stanford-car-classification/resnet.py	/^logFormatter = logging.Formatter("%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s")$/;"	v
log_group_name	bert-distillation-multimetric/logger.py	/^    log_group_name='my_log_group',$/;"	v
log_inference_metrics	orchestrate/models/example/data_and_model_setup.py	/^def log_inference_metrics(prediction, probabilities, testY, testX):$/;"	f
log_inference_metrics	orchestrate/models/example/keras_model.py	/^from data_and_model_setup import LoadTransformData, log_inference_metrics, CheckpointCB$/;"	i
log_inference_metrics	orchestrate/models/example/xgboost_model.py	/^from data_and_model_setup import LoadTransformData, log_inference_metrics$/;"	i
log_stream_name	bert-distillation-multimetric/logger.py	/^    log_stream_name='my_log_stream',$/;"	v
logger	amazon-ml-hyperparameter-optimization/evaluation.py	/^logger = logging.getLogger(config.APP_NAME)$/;"	v
logger	amazon-ml-hyperparameter-optimization/fold.py	/^logger = logging.getLogger(config.APP_NAME)$/;"	v
logger	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^logger = logging.getLogger(config.APP_NAME)$/;"	v
logger	bert-distillation-multimetric/distilbert_data_model_loaders/load_squad_dataset.py	/^from logger import logger$/;"	i
logger	bert-distillation-multimetric/logger.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^from logger import logger$/;"	i
logger	bert-distillation-multimetric/squad_fine_tuning/set_seed_and_dist.py	/^from logger import logger$/;"	i
logger	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^from logger import logger$/;"	i
logger	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from logger import logger$/;"	i
logger	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^from logger import logger$/;"	i
logger	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^logger = logging.getLogger(__name__)$/;"	v
logging	amazon-ml-hyperparameter-optimization/evaluation.py	/^import logging$/;"	i
logging	amazon-ml-hyperparameter-optimization/fold.py	/^import logging$/;"	i
logging	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/distilbert_data_model_loaders/load_squad_dataset.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_from_scratch.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_pretrained.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/distilbert_data_model_loaders/load_transformer_semi_pretrained.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/logger.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/sigopt_optimization_cli.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/sigopt_optimization_wrapper/runs_optimize_squad_distillation.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_runs_optimization_cycle.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/squad_distillation_abstract_clis/a_optimizaton_run_squad_cli.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/squad_fine_tuning/set_seed_and_dist.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^import logging$/;"	i
logging	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^import logging$/;"	i
logging	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^import logging$/;"	i
logging	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^import logging, sys$/;"	i
logging	dnn-tuning-nervana/nervana_all_cnn.py	/^import logging, sys$/;"	i
logging	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^import logging$/;"	i
logging	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^import logging$/;"	i
logging	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^import logging$/;"	i
logging	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_optimization_run.py	/^import logging$/;"	i
logging	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^import logging$/;"	i
logging	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^import logging$/;"	i
logging	stanford-augmented-image-classification/i_orchestrate_multitask.py	/^import logging$/;"	i
logging	stanford-augmented-image-classification/resnet.py	/^import logging$/;"	i
logging	stanford-augmented-image-classification/stanford_car_dataset.py	/^import logging$/;"	i
logging	stanford-augmented-image-classification/stanford_car_dataset_augmented.py	/^import logging$/;"	i
logging	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^import logging$/;"	i
logging	stanford-augmented-image-classification/stanford_cars_cli.py	/^import logging$/;"	i
logging	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^import logging$/;"	i
logging	stanford-augmented-image-classification/stanford_cars_data_config.py	/^import logging$/;"	i
logging	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^import logging$/;"	i
logging	stanford-car-classification/resnet.py	/^import logging$/;"	i
logging	stanford-car-classification/resnet_stanford_cars_cli.py	/^import logging$/;"	i
logging	stanford-car-classification/run_resnet_training_cli.py	/^import logging$/;"	i
logging	stanford-car-classification/stanford_cars.py	/^import logging$/;"	i
loss_function	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                           loss_function=cross_entropy_loss,$/;"	v	class:OrchestrateCLI.run.Multitask
lr	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                                        lr=np.exp(sigopt.get_parameter(Hyperparameters.LEARNING_RATE.value)),$/;"	v	class:OrchestrateCLI.run.Multitask
main	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^def main(ray_config_dict):$/;"	f
main	bert-distillation-multimetric/sigopt_optimization_wrapper/runs_optimize_squad_distillation.py	/^def main(args_dict, config_dict, sigopt_experiment_id, suggestion_id):$/;"	f
main	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^def main(args_dict):$/;"	f
main	reinforcement-learning/dqn.py	/^def main():$/;"	f
master	parallel/parallel.py	/^  master = Master()$/;"	v	class:Worker
math	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^import math$/;"	i
math	reinforcement-learning/dqn.py	/^import math$/;"	i
math	sigopt-beats-vegas/boxscores/scraper/scraper.py	/^import math$/;"	i
math	stanford-augmented-image-classification/orchestrate_stanford_cars_augmentation_cli.py	/^import math$/;"	i
math	stanford-augmented-image-classification/orchestrate_stanford_cars_cli.py	/^import math$/;"	i
math	stanford-augmented-image-classification/stanford_car_dataset.py	/^import math$/;"	i
math	stanford-augmented-image-classification/stanford_car_dataset_augmented.py	/^import math$/;"	i
math	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^import math$/;"	i
math	stanford-car-classification/stanford_cars.py	/^import math$/;"	i
math	tensorflow-cnn/python/cnn_example_cpu.py	/^import math$/;"	i
math	tensorflow-cnn/python/cnn_example_gpu.py	/^import math$/;"	i
math	text-classifier/python/sentiment_classifier.py	/^import json, math, numpy$/;"	i
math	unsupervised-model/unsupervised_model.py	/^import math, numpy, datetime$/;"	i
max_depth	xgboost-py-regression/xgboost_py_regressor.py	/^                        max_depth=4,$/;"	v
max_features	random-forest/python/random_forest.py	/^    max_features=best_assignments['max_features'],$/;"	v
max_features	random-forest/python/random_forest.sklearn.py	/^  max_features=(1, len(iris) - 2),$/;"	v
max_missed_fraud	orchestrate/models/example/data_and_model_setup.py	/^def max_missed_fraud(prediction, label, amount):$/;"	f
max_missed_valid	orchestrate/models/example/data_and_model_setup.py	/^def max_missed_valid(prediction, label, amount):$/;"	f
max_pool_2x2	tensorflow-cnn/python/cnn_example_cpu.py	/^  def max_pool_2x2(x):$/;"	f
max_pool_2x2	tensorflow-cnn/python/cnn_example_gpu.py	/^  def max_pool_2x2(x):$/;"	f
mean_absolute_error	surprise-py-recsys/surprise_recommender.py	/^from sklearn.metrics import mean_absolute_error$/;"	i
mean_squared_error	xgb-integration-py-reg/xgb-integration-py-reg.py	/^from sklearn.metrics import mean_squared_error$/;"	i
mean_squared_error	xgboost-py-regression/xgboost_py_regressor.py	/^from sklearn.metrics import mean_squared_error$/;"	i
medium	stanford-augmented-image-classification/i_orchestrate_multitask.py	/^    medium = 0.50$/;"	v	class:Multitask
medium	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^            medium = math.ceil(parsed_cli_arguments[CLI.EPOCHS.value] * 0.50)$/;"	v	class:OrchestrateCLI.run.Multitask
mesh_r	unsupervised-model/unsupervised_model.py	/^  mesh_r  = 2                              # (what is the pooling res in pixels)$/;"	v
metadata	multimetric-timeseries/main.py	/^        metadata=metadata$/;"	v
metadata	parallel/parallel.py	/^  def metadata(self):$/;"	m	class:Worker
metrics	dnn-tuning-nervana/nervana_all_cnn.py	/^  metrics=[dict(name='mlp_score', objective='maximize')],$/;"	v
metrics	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^        metrics=[$/;"	v
metrics	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^        metrics=[$/;"	v
metrics	dnn-tuning-nvidia-mxnet/run_experiments.py	/^                         metrics=[dict(name='dev_acc', objective='maximize')],$/;"	v
metrics	multimetric-timeseries/main.py	/^    metrics = METRICS,$/;"	v
metrics	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^from sklearn import cross_validation, metrics$/;"	i
metrics	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^from sklearn import cross_validation, metrics$/;"	i
metrics	random-forest/python/random_forest.py	/^  metrics=[dict(name='accuracy', objective='maximize')],$/;"	v
metrics	surprise-py-recsys/surprise_recommender.py	/^  metrics=[$/;"	v
metrics	tensorflow-cnn/python/cnn_example_cpu.py	/^  metrics=[dict(name='accuracy', objective='maximize')],$/;"	v
metrics	tensorflow-cnn/python/cnn_example_gpu.py	/^  metrics=[dict(name='accuracy', objective='maximize')],$/;"	v
metrics	test/with_new_experiment	/^    metrics=[dict(name='score', objective='maximize')],$/;"	v
metrics	text-classifier/python/sentiment_classifier.py	/^  metrics=[dict(name='cv_scores', objective='maximize')],$/;"	v
metrics	unsupervised-model/unsupervised_model.py	/^  metrics=[dict(name='accuracy', objective='maximize')],$/;"	v
metrics	xgb-integration-py-class/xgb-integration-py-class.py	/^    metrics=[$/;"	v
metrics	xgboost-py-classifier/xgboost_py_classifier.py	/^    metrics=[$/;"	v
metrics	xgboost-py-regression/xgboost_py_regressor.py	/^    metrics=[$/;"	v
metrics_list	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/random_search_parameters_config.py	/^metrics_list = [dict(name="accuracy", objective="maximize")]$/;"	v
metrics_list	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_conditionals_parameters_config.py	/^metrics_list = [dict(name="accuracy", objective="maximize")]$/;"	v
metrics_list	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_parameters_config.py	/^metrics_list = [dict(name="accuracy", objective="maximize")]$/;"	v
min_child_weight	xgboost-py-regression/xgboost_py_regressor.py	/^                        min_child_weight=3,$/;"	v
min_samples_leaf	random-forest/python/random_forest.py	/^    min_samples_leaf=best_assignments['min_samples_leaf']$/;"	v
min_samples_leaf	random-forest/python/random_forest.sklearn.py	/^  min_samples_leaf=(1, 10),$/;"	v
mlp	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^mlp = Model(layers=layers)$/;"	v
mlp	dnn-tuning-nervana/nervana_all_cnn.py	/^  mlp = Model(layers=layers)$/;"	v
mode	xgboost-py-classifier/xgboost_py_classifier.py	/^import warnings  # `do not disturbe` mode$/;"	i
model	sigopt-beats-vegas/predictor/run_model.py	/^import model$/;"	i
model	xgboost-py-classifier/xgboost_py_classifier.py	/^model = xgb.XGBClassifier($/;"	v
model_checkpointing	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                           model_checkpointing=parsed_cli_arguments[CLI.CHECKPOINT_FREQUENCY.value])$/;"	v	class:OrchestrateCLI.run.Multitask
model_spec	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        model_spec = build_model_spec($/;"	v
model_type_mapping	stanford-augmented-image-classification/resnet.py	/^model_type_mapping = {'ResNet18': torchvision.models.resnet18, 'ResNet50': torchvision.models.resnet50}$/;"	v
model_type_mapping	stanford-car-classification/resnet.py	/^model_type_mapping = {'ResNet18': torchvision.models.resnet18, 'ResNet50': torchvision.models.resnet50}$/;"	v
modelfit	xgboost-py-classifier/xgboost_py_classifier.py	/^modelfit = model.fit(X_train, y_train, eval_metric='logloss')$/;"	v
momentum	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                                        momentum=sigopt.get_parameter(Hyperparameters.MOMENTUM.value),$/;"	v	class:OrchestrateCLI.run.Multitask
momentum_coef	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^    momentum_coef=float(args.momentum_coef),$/;"	v
momentum_coef	dnn-tuning-nervana/nervana_all_cnn.py	/^    	momentum_coef=float(assignments.get("momentum_coef")),$/;"	v
mu	unsupervised-model/unsupervised_model.py	/^  mu = numpy.mean(X_unlab_patches, axis=0)$/;"	v
mx	dnn-tuning-nvidia-mxnet/cnn_text/evaluate.py	/^import mxnet as mx$/;"	i
mx	dnn-tuning-nvidia-mxnet/cnn_text/graph.py	/^import mxnet as mx$/;"	i
mx	dnn-tuning-nvidia-mxnet/cnn_text/model.py	/^import mxnet as mx$/;"	i
my_config	xgb-integration-py-class/xgb-integration-py-class.py	/^my_config = dict($/;"	v
my_config	xgb-integration-py-reg/xgb-integration-py-reg.py	/^my_config = dict($/;"	v
n_clust	unsupervised-model/unsupervised_model.py	/^  n_clust = int(params['km_n_clusters'])   # SIGOPT param  (num of centroids to learn)$/;"	v
n_estimators	random-forest/python/random_forest.py	/^    n_estimators=best_assignments['n_estimators'],$/;"	v
n_estimators	random-forest/python/random_forest.sklearn.py	/^  n_estimators=(1, 100),$/;"	v
n_estimators	xgboost-py-regression/xgboost_py_regressor.py	/^                        n_estimators=30000,$/;"	v
n_iter	random-forest/python/random_forest.sklearn.py	/^  n_iter=60$/;"	v
n_jobs	xgboost-py-classifier/xgboost_py_classifier.py	/^                          n_jobs = 4,$/;"	v
name	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        name=name,$/;"	v
name	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^    name = args.name$/;"	v
name	dnn-tuning-nervana/nervana_all_cnn.py	/^  name='Nervana All CNN GPU '+datetime.datetime.now().strftime("%Y_%m_%d_%I%M_%S"),$/;"	v
name	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^        name=exp_name,$/;"	v
name	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^        name=exp_name,$/;"	v
name	dnn-tuning-nvidia-mxnet/run_experiments.py	/^                         name=exp_name,$/;"	v
name	multimetric-timeseries/main.py	/^    name=EXPERIMENT_NAME,$/;"	v
name	random-forest/python/random_forest.py	/^  name="Random Forest (Python)",$/;"	v
name	surprise-py-recsys/surprise_recommender.py	/^  name='Surprise Movies-100k Recommender',$/;"	v
name	tensorflow-cnn/python/cnn_example_cpu.py	/^  name='SVHN ConvNet',$/;"	v
name	tensorflow-cnn/python/cnn_example_gpu.py	/^  name='SVHN ConvNet',$/;"	v
name	test/with_new_experiment	/^    name='sigopt-examples test experiment',$/;"	v
name	text-classifier/python/sentiment_classifier.py	/^  name='Sentiment LR Classifier (Python)',$/;"	v
name	unsupervised-model/unsupervised_model.py	/^  name='SVHN Classifier',$/;"	v
name	xgb-integration-py-class/xgb-integration-py-class.py	/^    name="XGBoost Fraud Detection Experiment",$/;"	v
name	xgb-integration-py-reg/xgb-integration-py-reg.py	/^    name="XGBoost MB Test Time Predictor Experiment",$/;"	v
name	xgboost-py-classifier/xgboost_py_classifier.py	/^    name="Cancer Prediction XGB - Vanilla SigOpt",$/;"	v
name	xgboost-py-regression/xgboost_py_regressor.py	/^    name="CA House Pricing XGB - Vanilla SigOpt",$/;"	v
namedtuple	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^from collections import namedtuple$/;"	i
namedtuple	classifier/constant.py	/^from collections import namedtuple$/;"	i
namedtuple	dnn-tuning-nvidia-mxnet/cnn_text/dataset.py	/^from collections import namedtuple$/;"	i
namedtuple	dnn-tuning-nvidia-mxnet/cnn_text/evaluate.py	/^from collections import namedtuple$/;"	i
namedtuple	dnn-tuning-nvidia-mxnet/cnn_text/model.py	/^from collections import namedtuple$/;"	i
namedtuple	sigopt-beats-vegas/predictor/features.py	/^from collections import namedtuple$/;"	i
ncloud_train_from_assignments	dnn-tuning-nervana/sigopt_nervana.py	/^  def ncloud_train_from_assignments(assignments):$/;"	m	class:JobRunner
nesterov	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                                        nesterov=sigopt.get_parameter(Hyperparameters.NESTEROV.value))$/;"	v	class:OrchestrateCLI.run.Multitask
normalize	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^    normalize=False,$/;"	v
normalize	dnn-tuning-nervana/nervana_all_cnn.py	/^    normalize=False,$/;"	v
normalize_prob	maze-solving-mouse/maze_tools.py	/^        def normalize_prob(check):$/;"	f	function:RightTurnSolver.generate_random_maze
not	xgboost-py-classifier/xgboost_py_classifier.py	/^import warnings  # `do not disturbe` mode$/;"	i
np	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_hyperparameter_definition.py	/^import numpy as np$/;"	i
np	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^import numpy as np$/;"	i
np	bert-distillation-multimetric/squad_fine_tuning/set_seed_and_dist.py	/^import numpy as np$/;"	i
np	dnn-tuning-nvidia-mxnet/cnn_text/dataset.py	/^import numpy as np$/;"	i
np	dnn-tuning-nvidia-mxnet/cnn_text/evaluate.py	/^import numpy as np$/;"	i
np	dnn-tuning-nvidia-mxnet/cnn_text/objective.py	/^import numpy as np$/;"	i
np	dnn-tuning-nvidia-mxnet/cnn_text/preprocess.py	/^import numpy as np$/;"	i
np	multimetric-timeseries/config.py	/^import numpy as np$/;"	i
np	multimetric-timeseries/train.py	/^import numpy as np$/;"	i
np	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/data_utils.py	/^import numpy as np$/;"	i
np	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^import numpy as np$/;"	i
np	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^import numpy as np$/;"	i
np	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^import numpy as np$/;"	i
np	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/random_search_parameters_config.py	/^import numpy as np$/;"	i
np	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_conditionals_parameters_config.py	/^import numpy as np$/;"	i
np	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^import numpy as np$/;"	i
np	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_parameters_config.py	/^import numpy as np$/;"	i
np	orchestrate/models/example/data_and_model_setup.py	/^import numpy as np$/;"	i
np	reinforcement-learning/dqn.py	/^import numpy as np$/;"	i
np	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^import numpy as np$/;"	i
np	stanford-augmented-image-classification/a_stanford_car_dataset.py	/^import numpy as np$/;"	i
np	stanford-augmented-image-classification/resnet.py	/^import numpy as np$/;"	i
np	stanford-augmented-image-classification/stanford_car_dataset.py	/^import numpy as np$/;"	i
np	stanford-augmented-image-classification/stanford_car_dataset_augmented.py	/^import numpy as np$/;"	i
np	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^import numpy as np$/;"	i
np	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^import numpy as np$/;"	i
np	stanford-car-classification/resnet.py	/^import numpy as np$/;"	i
np	stanford-car-classification/stanford_cars.py	/^import numpy as np$/;"	i
np	xgb-integration-py-class/xgb-integration-py-class.py	/^import numpy as np$/;"	i
np	xgb-integration-py-reg/xgb-integration-py-reg.py	/^import numpy as np$/;"	i
np	xgboost-py-classifier/xgboost_py_classifier.py	/^import numpy as np$/;"	i
np	xgboost-py-regression/xgboost_py_regressor.py	/^import numpy as np$/;"	i
np_utils	multimetric-timeseries/train.py	/^from keras.utils import np_utils$/;"	i
num_epochs	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^num_epochs = args.epochs$/;"	v
num_epochs	dnn-tuning-nervana/nervana_all_cnn.py	/^  num_epochs = int(assignments.get("epochs"))$/;"	v
number_of_labels	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                                                                number_of_labels=parsed_cli_arguments[$/;"	v	class:OrchestrateCLI.run.Multitask
numpy	classifier/classifier_tuner.py	/^import numpy$/;"	i
numpy	maze-solving-mouse/maze_tools.py	/^import numpy$/;"	i
numpy	maze-solving-mouse/sigopt_maze_analysis.py	/^import numpy$/;"	i
numpy	parallel/data.py	/^import numpy$/;"	i
numpy	random-forest/python/random_forest.py	/^import numpy$/;"	i
numpy	sigopt-beats-vegas/predictor/bet_reader.py	/^import numpy$/;"	i
numpy	sigopt-beats-vegas/predictor/evaluator.py	/^import numpy$/;"	i
numpy	sigopt-beats-vegas/predictor/game_stats.py	/^import numpy$/;"	i
numpy	sigopt-beats-vegas/predictor/model.py	/^import numpy$/;"	i
numpy	sigopt-beats-vegas/predictor/run_model.py	/^import numpy$/;"	i
numpy	tensorflow-cnn/python/cnn_example_cpu.py	/^import numpy$/;"	i
numpy	tensorflow-cnn/python/cnn_example_gpu.py	/^import numpy$/;"	i
numpy	text-classifier/python/sentiment_classifier.py	/^import json, math, numpy$/;"	i
numpy	unsupervised-model/unsupervised_model.py	/^import math, numpy, datetime$/;"	i
objective	xgboost-py-classifier/xgboost_py_classifier.py	/^                          objective='binary:logistic',$/;"	v
observation	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^    observation = conn.experiments(experiment.id).observations().create(**create_observation_dict(suggestion))$/;"	v
observation	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^    observation = conn.experiments(experiment.id).observations().create(**create_observation_dict(suggestion))$/;"	v
observation	dnn-tuning-nvidia-mxnet/run_experiments.py	/^    observation = conn.experiments(experiment.id).observations().create($/;"	v
observation_budget	dnn-tuning-nervana/nervana_all_cnn.py	/^  observation_budget=150,$/;"	v
observation_budget	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^        observation_budget=30 * len(hyperparams),$/;"	v
observation_budget	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^        observation_budget=30 * len(hyperparams),$/;"	v
observation_budget	dnn-tuning-nvidia-mxnet/run_experiments.py	/^                         observation_budget=40*len(hyperparams))$/;"	v
observation_budget	multimetric-timeseries/main.py	/^    observation_budget = OBSERVATION_BUDGET$/;"	v
observation_budget	surprise-py-recsys/surprise_recommender.py	/^  observation_budget=50,$/;"	v
observation_budget	tensorflow-cnn/python/cnn_example_cpu.py	/^  observation_budget=100,$/;"	v
observation_budget	tensorflow-cnn/python/cnn_example_gpu.py	/^  observation_budget=100,$/;"	v
observation_budget	text-classifier/python/sentiment_classifier.py	/^  observation_budget=60,$/;"	v
observation_budget	unsupervised-model/unsupervised_model.py	/^  observation_budget=90,$/;"	v
observation_budget	xgboost-py-classifier/xgboost_py_classifier.py	/^    observation_budget = 120,$/;"	v
observation_budget	xgboost-py-regression/xgboost_py_regressor.py	/^    observation_budget = 120,$/;"	v
od	xgb-integration-py-class/xgb-integration-py-class.py	/^import opendatasets as od$/;"	i
od	xgb-integration-py-reg/xgb-integration-py-reg.py	/^import opendatasets as od$/;"	i
on_epoch_end	orchestrate/models/example/data_and_model_setup.py	/^    def on_epoch_end(self, epoch, logs=None):$/;"	m	class:CheckpointCB
on_train_begin	orchestrate/models/example/data_and_model_setup.py	/^    def on_train_begin(self, logs=None):$/;"	m	class:CheckpointCB
on_trial_complete	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^    def on_trial_complete(self,$/;"	m	class:SigOptMultimetricSearch
on_trial_result	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^    def on_trial_result(self, trial_id, result):$/;"	m	class:SigOptMultimetricSearch
one_hot_enc	tensorflow-cnn/python/cnn_example_cpu.py	/^one_hot_enc = preprocessing.OneHotEncoder(sparse=False)$/;"	v
one_hot_enc	tensorflow-cnn/python/cnn_example_gpu.py	/^one_hot_enc = preprocessing.OneHotEncoder(sparse=False)$/;"	v
opt_chunk	tensorflow-cnn/python/cnn_example_cpu.py	/^  opt_chunk = 10$/;"	v
opt_chunk	tensorflow-cnn/python/cnn_example_gpu.py	/^  opt_chunk = 1000$/;"	v
opt_gdm	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^opt_gdm = GradientDescentMomentum($/;"	v
opt_gdm	dnn-tuning-nervana/nervana_all_cnn.py	/^  opt_gdm = GradientDescentMomentum($/;"	v
opt_metric	dnn-tuning-nervana/nervana_all_cnn.py	/^  opt_metric = 1.0 - mlp.eval(valid_set, metric=Misclassification())$/;"	v
opt_metric	tensorflow-cnn/python/cnn_example_cpu.py	/^  opt_metric = 0.0$/;"	v
opt_metric	tensorflow-cnn/python/cnn_example_gpu.py	/^  opt_metric = 0.0$/;"	v
opt_metric	text-classifier/python/sentiment_classifier.py	/^    opt_metric = sentiment_metric(POSITIVE_TEXT, NEGATIVE_TEXT, suggestion.assignments)$/;"	v
opt_metric	unsupervised-model/unsupervised_model.py	/^  opt_metric = accuracy_score(valid_y, y_valid_pred)$/;"	v
optimization_cli	bert-distillation-multimetric/sigopt_optimization_cli.py	/^    optimization_cli = SigOptDistilBertQuadCLI()$/;"	v
optimizer_mapping	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^optimizer_mapping = {SGDOptimizer.ADAM.value: tf.train.AdamOptimizer, SGDOptimizer.ADAGRAD.value: tf.train.AdagradOptimizer,$/;"	v
orchestrate_augmentation_cli	stanford-augmented-image-classification/orchestrate_stanford_cars_augmentation_cli.py	/^    orchestrate_augmentation_cli = OrchestrateAugmentationCLI()$/;"	v	class:OrchestrateAugmentationCLI
orchestrate_cli	stanford-augmented-image-classification/orchestrate_stanford_cars_cli.py	/^    orchestrate_cli = OrchestrateCLI()$/;"	v	class:OrchestrateCLI
orchestrate_cli	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^    orchestrate_cli = OrchestrateCLI()$/;"	v	class:OrchestrateCLI
os	amazon-ml-hyperparameter-optimization/evaluation.py	/^import os$/;"	i
os	amazon-ml-hyperparameter-optimization/fold.py	/^import os$/;"	i
os	bert-distillation-multimetric/distilbert_data_model_loaders/load_squad_dataset.py	/^import os$/;"	i
os	bert-distillation-multimetric/logger.py	/^import os$/;"	i
os	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^import os$/;"	i
os	bert-distillation-multimetric/sigopt_optimization_cli.py	/^import os$/;"	i
os	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^import os$/;"	i
os	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^import os$/;"	i
os	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^import os$/;"	i
os	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^import os$/;"	i
os	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^import os$/;"	i
os	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^import os$/;"	i
os	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^    import os$/;"	i
os	dnn-tuning-nervana/sigopt_nervana.py	/^import os$/;"	i
os	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^import os$/;"	i
os	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^import os$/;"	i
os	dnn-tuning-nvidia-mxnet/run_experiments.py	/^import os, json, argparse$/;"	i
os	multimetric-timeseries/config.py	/^import os, json$/;"	i
os	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/data_utils.py	/^import os$/;"	i
os	other-languages/other_languages.py	/^import os$/;"	i
os	sigopt-beats-vegas/boxscores/scraper/reduce.py	/^import os$/;"	i
os	sigopt-beats-vegas/boxscores/scraper/scraper.py	/^import os$/;"	i
os	sigopt-beats-vegas/predictor/run_model.py	/^import os$/;"	i
os	sigopt-beats-vegas/predictor/stand_alone.py	/^import datetime, os$/;"	i
os	stanford-augmented-image-classification/resnet.py	/^import os$/;"	i
os	stanford-augmented-image-classification/stanford_car_dataset.py	/^import os$/;"	i
os	stanford-augmented-image-classification/stanford_car_dataset_augmented.py	/^import os$/;"	i
os	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^import os$/;"	i
os	stanford-augmented-image-classification/stanford_cars_cli.py	/^import os$/;"	i
os	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^import os$/;"	i
os	stanford-car-classification/resnet.py	/^import os$/;"	i
os	stanford-car-classification/stanford_cars.py	/^import os$/;"	i
os	test/with_new_experiment	/^import os$/;"	i
outfile	sigopt-beats-vegas/boxscores/scraper/reduce.py	/^outfile = "all_boxscores.json"$/;"	v
output_score	classifier/classifier_tuner.py	/^    def output_score(self, experiment, assignments, score, fout, sigopt_post=False):$/;"	m	class:ExampleRunner
output_score	dnn-tuning-nervana/sigopt_nervana.py	/^  def output_score(self, experiment_id, assignments, suggestion_id, obj, obj_std):$/;"	m	class:JobRunner
p	multimetric-timeseries/main.py	/^    p = Process(target=evaluate_assignments, args=($/;"	v
p	test/with_new_experiment	/^  p = subprocess.Popen($/;"	v
pad_sentences	dnn-tuning-nvidia-mxnet/cnn_text/dataset.py	/^from preprocess import (load_data_and_labels, pad_sentences,$/;"	i
pad_sentences	dnn-tuning-nvidia-mxnet/cnn_text/preprocess.py	/^def pad_sentences(sentences, padding_word="<\/s>"):$/;"	f
parallel_bandwidth	surprise-py-recsys/surprise_recommender.py	/^  parallel_bandwidth=1,$/;"	v
param_filepath	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^        param_filepath = 'cnn_text\/long_hyperparams.json'$/;"	v
param_filepath	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^        param_filepath='cnn_text\/hyperparams.json'$/;"	v
param_filepath	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^        param_filepath = 'cnn_text\/long_hyperparams.json'$/;"	v
param_filepath	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^        param_filepath='cnn_text\/hyperparams.json'$/;"	v
param_filepath	dnn-tuning-nvidia-mxnet/run_experiments.py	/^        param_filepath = 'cnn_text\/long_hyperparams.json'$/;"	v
param_filepath	dnn-tuning-nvidia-mxnet/run_experiments.py	/^        param_filepath='cnn_text\/hyperparams.json'$/;"	v
param_grid	surprise-py-recsys/surprise_recommender.py	/^param_grid = {'n_epochs': [5, 10], 'lr_all': [0.002, 0.005],$/;"	v
parameters	dnn-tuning-nervana/nervana_all_cnn.py	/^  parameters=[$/;"	v
parameters	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^        parameters=hyperparams,$/;"	v
parameters	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^        parameters=hyperparams,$/;"	v
parameters	dnn-tuning-nvidia-mxnet/run_experiments.py	/^                         parameters=hyperparams,$/;"	v
parameters	multimetric-timeseries/main.py	/^    parameters=PARAMETERS,$/;"	v
parameters	random-forest/python/random_forest.py	/^  parameters=[$/;"	v
parameters	surprise-py-recsys/surprise_recommender.py	/^  parameters=[$/;"	v
parameters	tensorflow-cnn/python/cnn_example_cpu.py	/^  parameters=[$/;"	v
parameters	tensorflow-cnn/python/cnn_example_gpu.py	/^  parameters=[$/;"	v
parameters	test/with_new_experiment	/^    parameters=[$/;"	v
parameters	text-classifier/python/sentiment_classifier.py	/^  parameters=[$/;"	v
parameters	unsupervised-model/unsupervised_model.py	/^  parameters=[$/;"	v
parameters	xgboost-py-classifier/xgboost_py_classifier.py	/^    parameters=[$/;"	v
parameters	xgboost-py-regression/xgboost_py_regressor.py	/^    parameters=[$/;"	v
parameters_list	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/random_search_parameters_config.py	/^parameters_list = [dict(name=ParametersList.LEARNING_RATE.value, bounds=dict(min=np.log(10e-7), max=np.log(1)), type="double"),$/;"	v
parameters_list	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_conditionals_parameters_config.py	/^parameters_list = [dict(name=ParametersList.LEARNING_RATE.value, bounds=dict(min=np.log(10e-7), max=np.log(1)), type="double",$/;"	v
parameters_list	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_parameters_config.py	/^parameters_list = [dict(name=ParametersList.LEARNING_RATE.value, bounds=dict(min=np.log(10e-7), max=np.log(1)), type="double"),$/;"	v
params	tensorflow-cnn/python/cnn_example_cpu.py	/^  params = suggestion.assignments$/;"	v
params	tensorflow-cnn/python/cnn_example_gpu.py	/^  params = suggestion.assignments$/;"	v
params	unsupervised-model/unsupervised_model.py	/^  params = suggestion.assignments$/;"	v
parse_stories	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/data_utils.py	/^def parse_stories(lines, only_supporting=False):$/;"	f
parser	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^    parser = argparse.ArgumentParser($/;"	v
parser	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^    parser = cli.get_commandline_args()$/;"	v	class:RunDistilBertSquadCLI
parser	classifier/classifier_tuner.py	/^    parser = argparse.ArgumentParser(description='Classifier Tuner')$/;"	v	class:ExampleRunner
parser	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^parser = NeonArgparser(__doc__)$/;"	v
parser	dnn-tuning-nervana/nervana_all_cnn.py	/^parser = NeonArgparser(__doc__)$/;"	v
parser	dnn-tuning-nervana/sigopt_nervana.py	/^  parser = argparse.ArgumentParser(description='Run Nervana POC.')$/;"	v	class:JobRunner
parser	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^parser = argparse.ArgumentParser(description='cnn text classification with SigOpt')$/;"	v
parser	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^parser = argparse.ArgumentParser(description='cnn text classification with SigOpt')$/;"	v
parser	dnn-tuning-nvidia-mxnet/run_experiments.py	/^parser = argparse.ArgumentParser(description='cnn text classification with SigOpt')$/;"	v
parser	other-languages/other_languages.py	/^  parser = argparse.ArgumentParser()$/;"	v	class:SubProcessEvaluator
parser	test/with_new_experiment	/^  parser = argparse.ArgumentParser()$/;"	v
parser_prefix	bert-distillation-multimetric/squad_distillation_abstract_clis/a_run_squad_w_distillation_cli.py	/^    parser_prefix = "--"$/;"	v	class:ARunDistilBertSquadCLI
patches	unsupervised-model/unsupervised_model.py	/^    patches = view_as_windows(unlab_X[:, :, i], (w, w), step=s)$/;"	v
path	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^    path=args.data_dir,$/;"	v
path	dnn-tuning-nervana/nervana_all_cnn.py	/^    path=DATA_DIR,$/;"	v
patience	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                                                                             patience=sigopt.get_parameter($/;"	v	class:OrchestrateCLI.run.Multitask
pd	multimetric-timeseries/train.py	/^import pandas as pd$/;"	i
pd	orchestrate/models/example/data_and_model_setup.py	/^import pandas as pd$/;"	i
pd	xgb-integration-py-class/xgb-integration-py-class.py	/^import pandas as pd$/;"	i
pd	xgb-integration-py-reg/xgb-integration-py-reg.py	/^import pandas as pd$/;"	i
pd	xgboost-py-classifier/xgboost_py_classifier.py	/^import pandas as pd$/;"	i
pd	xgboost-py-regression/xgboost_py_regressor.py	/^import pandas as pd$/;"	i
pickle	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^import pickle$/;"	i
pickle	sigopt-beats-vegas/predictor/bet_reader.py	/^import pickle$/;"	i
platform	orchestrate/models/example/keras_model.py	/^import platform$/;"	i
platform	orchestrate/models/example/xgboost_model.py	/^import platform$/;"	i
plot_hist_prop	maze-solving-mouse/sigopt_maze_analysis.py	/^def plot_hist_prop(data, plot_it=False, **histogram_kwargs):$/;"	f
plot_maze	maze-solving-mouse/maze_tools.py	/^    def plot_maze(self, ax=None, figsize=(10, 5), also_solution=False, markersize=20):$/;"	m	class:RightTurnSolver
plot_pareto_frontier	maze-solving-mouse/sigopt_maze_analysis.py	/^def plot_pareto_frontier(pareto_front, non_pareto_front, mean_on_y_axis=PREFER_MEAN_ON_Y_AXIS, fontsize=20):$/;"	f
plt	maze-solving-mouse/maze_tools.py	/^        from matplotlib import pyplot as plt$/;"	i
plt	maze-solving-mouse/sigopt_maze_analysis.py	/^        from matplotlib import pyplot as plt$/;"	i
plt	maze-solving-mouse/sigopt_maze_analysis.py	/^    from matplotlib import pyplot as plt$/;"	i
poll_eval	amazon-ml-hyperparameter-optimization/evaluation.py	/^    def poll_eval(cls):$/;"	f
poll_ncloud	dnn-tuning-nervana/sigopt_nervana.py	/^  def poll_ncloud(self, active_job_ids):$/;"	m	class:JobRunner
pos_weight	xgb-integration-py-class/xgb-integration-py-class.py	/^pos_weight = (y_train == 0).sum() \/ (y_train == 1).sum()$/;"	v
position_encoding	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^def position_encoding(sentence_size, embedding_size):$/;"	f
predict	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^    def predict(self, stories, queries):$/;"	m	class:MemN2N
predict	reinforcement-learning/dqn.py	/^  def predict(self, session, state):$/;"	m	class:QNetwork
predict_log_proba	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^    def predict_log_proba(self, stories, queries):$/;"	m	class:MemN2N
predict_proba	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^    def predict_proba(self, stories, queries):$/;"	m	class:MemN2N
prediction	xgboost-py-classifier/xgboost_py_classifier.py	/^prediction = modelfit.predict(X_test)$/;"	v
predictions	surprise-py-recsys/surprise_recommender.py	/^predictions = algo.test(testset)$/;"	v
prepare_data	multimetric-timeseries/main.py	/^from train import prepare_data, evaluate_assignments$/;"	i
prepare_data	multimetric-timeseries/train.py	/^def prepare_data(dataset_path):$/;"	f
preprocess_data	stanford-augmented-image-classification/a_stanford_data_processor.py	/^    def preprocess_data(self, path_to_matdata, validation_percentage, data_subset):$/;"	m	class:AStanfordDataProcessor
preprocess_data	stanford-augmented-image-classification/stanford_augmented_data_processor.py	/^    def preprocess_data(self, augmented_mat_data, validation_percentage, data_subset):$/;"	m	class:StanfordAugmentedDataProcessor
preprocess_data	stanford-augmented-image-classification/stanford_augmented_data_processor.py	/^from stanford_car_dataset_augmented import preprocess_data$/;"	i
preprocess_data	stanford-augmented-image-classification/stanford_car_dataset.py	/^def preprocess_data(path_to_matdata, validation_percentage, data_subset):$/;"	f
preprocess_data	stanford-augmented-image-classification/stanford_car_dataset_augmented.py	/^def preprocess_data(augmented_matdata, validation_percentage, data_subset):$/;"	f
preprocess_data	stanford-augmented-image-classification/stanford_cars_cli.py	/^from stanford_car_dataset import StanfordCarDataset, preprocess_data$/;"	i
preprocess_data	stanford-augmented-image-classification/stanford_data_processor.py	/^    def preprocess_data(self, path_to_matdata, validation_percentage, data_subset):$/;"	m	class:StanfordDataProcessor
preprocess_data	stanford-augmented-image-classification/stanford_data_processor.py	/^from stanford_car_dataset import preprocess_data$/;"	i
preprocess_data	stanford-car-classification/resnet_stanford_cars_cli.py	/^from stanford_cars import StanfordCars, preprocess_data$/;"	i
preprocess_data	stanford-car-classification/stanford_cars.py	/^def preprocess_data(path_to_matdata, validation_percentage, data_subset):$/;"	f
preprocessing	tensorflow-cnn/python/cnn_example_cpu.py	/^from sklearn import preprocessing$/;"	i
preprocessing	tensorflow-cnn/python/cnn_example_gpu.py	/^from sklearn import preprocessing$/;"	i
preprocessing	unsupervised-model/unsupervised_model.py	/^from sklearn import preprocessing$/;"	i
print_error	sigopt-beats-vegas/boxscores/scraper/scraper.py	/^  def print_error(request, e, **kwargs):$/;"	f	function:scrape
print_function	classifier/classifier_tuner.py	/^from __future__ import print_function$/;"	i
print_function	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^from __future__ import print_function$/;"	i
print_function	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^from __future__ import print_function$/;"	i
print_function	test/with_new_experiment	/^from __future__ import print_function$/;"	i
print_function	unsupervised-model/unsupervised_model.py	/^from __future__ import print_function$/;"	i
probabilities	xgboost-py-classifier/xgboost_py_classifier.py	/^probabilities = modelfit.predict_proba(X_test)$/;"	v
process_chunk	unsupervised-model/unsupervised_model.py	/^  def process_chunk(lower, upper, X):$/;"	f
project	dnn-tuning-nervana/nervana_all_cnn.py	/^  project='sigopt-examples',$/;"	v
project	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^        project='sigopt-examples',$/;"	v
project	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^        project='sigopt-examples',$/;"	v
project	dnn-tuning-nvidia-mxnet/run_experiments.py	/^                         project='sigopt-examples',$/;"	v
project	multimetric-timeseries/main.py	/^    project=PROJECT_NAME,$/;"	v
project	random-forest/python/random_forest.py	/^  project="sigopt-examples",$/;"	v
project	tensorflow-cnn/python/cnn_example_cpu.py	/^  project='sigopt-examples',$/;"	v
project	tensorflow-cnn/python/cnn_example_gpu.py	/^  project='sigopt-examples',$/;"	v
project	test/with_new_experiment	/^    project='sigopt-examples',$/;"	v
project	text-classifier/python/sentiment_classifier.py	/^  project='sigopt-examples',$/;"	v
project	unsupervised-model/unsupervised_model.py	/^  project='sigopt-examples',$/;"	v
prune_heads	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^def prune_heads(model, default_n_heads, parameter_n_heads, parameter_n_layers):$/;"	f
q	multimetric-timeseries/main.py	/^q = Queue()$/;"	v
q	unsupervised-model/unsupervised_model.py	/^  q = params['sparse_p']                   # SIGOPT param  (percentile of active centroid distances)$/;"	v
random	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^import random$/;"	i
random	bert-distillation-multimetric/squad_fine_tuning/set_seed_and_dist.py	/^import random$/;"	i
random	unsupervised-model/unsupervised_model.py	/^import random$/;"	i
random_forest	random-forest/python/random_forest.sklearn.py	/^random_forest = RandomForestClassifier()$/;"	v
random_forest_parameters	random-forest/python/random_forest.sklearn.py	/^random_forest_parameters = dict($/;"	v
random_generator	classifier/classifier_tuner.py	/^    def random_generator(self, experiment):$/;"	m	class:ExampleRunner
random_no	xgb-integration-py-class/xgb-integration-py-class.py	/^random_no = 5$/;"	v
random_no	xgb-integration-py-reg/xgb-integration-py-reg.py	/^random_no = 42$/;"	v
random_search_parameters_config	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^from sigopt_memn2n_setup import sigopt_parameters_config, random_search_parameters_config, sigopt_conditionals_parameters_config$/;"	i
range	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^from six.moves import range, reduce$/;"	i
range	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^from six.moves import range$/;"	i
range	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^from six.moves import range, reduce$/;"	i
ray	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^import ray$/;"	i
ray_optimize_squad_distillation	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^from raytune_wrapper import sigopt_ray_multimetric_wrapper_distilbert, ray_optimize_squad_distillation$/;"	i
re	dnn-tuning-nvidia-mxnet/cnn_text/preprocess.py	/^import re$/;"	i
re	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/data_utils.py	/^import re$/;"	i
re_shaped	unsupervised-model/unsupervised_model.py	/^    re_shaped = numpy.reshape(patches, (patches.shape[0]*patches.shape[0], w * w))$/;"	v
re_shaped	unsupervised-model/unsupervised_model.py	/^    re_shaped = preprocessing.scale(re_shaped, axis=1)$/;"	v
read_box_scores	sigopt-beats-vegas/predictor/read_data.py	/^def read_box_scores(file_name='..\/boxscores\/all_boxscores.json'):$/;"	f
read_data	sigopt-beats-vegas/predictor/stand_alone.py	/^import read_data$/;"	i
read_info	sigopt-beats-vegas/predictor/bet_reader.py	/^def read_info(filename="bet_info.pkl", start_date=SEASON_1415_START, end_date=SEASON_1516_END):$/;"	f
readucr	multimetric-timeseries/train.py	/^def readucr(filename):$/;"	f
recipe	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        recipe = recipe_f.read()$/;"	v
reduce	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^from six.moves import range, reduce$/;"	i
reduce	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^from six.moves import range, reduce$/;"	i
regularization_amount	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^            regularization_amount=math.exp(assignments['log_regularization_amount']),$/;"	v
regularization_type	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^            regularization_type=assignments['regularization_type'],$/;"	v
relu	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^relu = Rectlin()$/;"	v
relu	dnn-tuning-nervana/nervana_all_cnn.py	/^  relu = Rectlin()$/;"	v
remaining_observations	parallel/parallel.py	/^  def remaining_observations(self):$/;"	m	class:Master
remaining_observations	parallel/parallel.py	/^  def remaining_observations(self):$/;"	m	class:Worker
replay_history	sigopt-beats-vegas/predictor/history_player.py	/^def replay_history(bet_info, estimates, history, start='2014-10-28', end='2015-04-15'):$/;"	f
requests	sigopt-beats-vegas/predictor/bet_reader.py	/^import requests$/;"	i
reset_solver	maze-solving-mouse/maze_tools.py	/^    def reset_solver(self):$/;"	m	class:RightTurnSolver
resnet_augmented_training	stanford-augmented-image-classification/resnet_stanford_cars_augmented_training.py	/^    resnet_augmented_training = ResNetAugmentedTraining()$/;"	v
resnet_training	stanford-augmented-image-classification/resnet_stanford_cars_training.py	/^    resnet_training = ResNetTraining()$/;"	v
resnet_training_cli	stanford-car-classification/run_resnet_training_cli.py	/^    resnet_training_cli = ResnetTrainingCLI()$/;"	v	class:ResnetTrainingCLI
restore	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^    def restore(self, checkpoint_dir):$/;"	m	class:SigOptMultimetricSearch
restructure_n_head_parameter	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^def restructure_n_head_parameter(parameter_values):$/;"	f
retry	stanford-augmented-image-classification/resnet.py	/^from retrying import retry$/;"	i
retry	stanford-car-classification/resnet.py	/^from retrying import retry$/;"	i
rf	random-forest/python/random_forest.py	/^rf = RandomForestClassifier($/;"	v
rgb2gray	tensorflow-cnn/python/cnn_example_cpu.py	/^from skimage.color import rgb2gray$/;"	i
rgb2gray	tensorflow-cnn/python/cnn_example_gpu.py	/^from skimage.color import rgb2gray$/;"	i
rgb2gray	unsupervised-model/unsupervised_model.py	/^from skimage.color import rgb2gray$/;"	i
rms_decay	tensorflow-cnn/python/cnn_example_cpu.py	/^  rms_decay = params['rms_decay']$/;"	v
rms_decay	tensorflow-cnn/python/cnn_example_gpu.py	/^  rms_decay = params['rms_decay']$/;"	v
rms_lr	tensorflow-cnn/python/cnn_example_cpu.py	/^  rms_lr = math.exp(params['log_rms_lr'])$/;"	v
rms_lr	tensorflow-cnn/python/cnn_example_gpu.py	/^  rms_lr = math.exp(params['log_rms_lr'])$/;"	v
rms_mom	tensorflow-cnn/python/cnn_example_cpu.py	/^  rms_mom = params['rms_mom']$/;"	v
rms_mom	tensorflow-cnn/python/cnn_example_gpu.py	/^  rms_mom = params['rms_mom']$/;"	v
rootLogger	stanford-augmented-image-classification/resnet.py	/^rootLogger = logging.getLogger()$/;"	v
rootLogger	stanford-car-classification/resnet.py	/^rootLogger = logging.getLogger()$/;"	v
run	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^from ray.tune import run$/;"	i
run	parallel/parallel.py	/^  def run(self):$/;"	m	class:Master
run	parallel/parallel.py	/^  def run(self):$/;"	m	class:Worker
run	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    def run(self, parameter_arguments, num_epochs, training_data, validation_data):$/;"	m	class:AStanfordCarsCLI
run	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^    def run(self, parsed_cli_arguments, training_data, validation_data):$/;"	m	class:OrchestrateCLI
run	stanford-car-classification/resnet_stanford_cars_cli.py	/^    def run(self, parsed_cli_arguments, training_data, validation_data):$/;"	m	class:StanfordCarsCLI
run	stanford-car-classification/run_resnet_training_cli.py	/^    def run(self, parsed_cli_arguments, training_data, validation_data):$/;"	m	class:ResnetTrainingCLI
run_all	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^    def run_all(self):$/;"	m	class:AStanfordCarsCLI
run_all	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^    def run_all(self):$/;"	m	class:StanfordCarsAugmentationCLI
run_all	stanford-augmented-image-classification/stanford_cars_cli.py	/^    def run_all(self):$/;"	m	class:StanfordCarsCLI
run_all	stanford-car-classification/resnet_stanford_cars_cli.py	/^    def run_all(self):$/;"	m	class:StanfordCarsCLI
run_checks	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^    def run_checks(self):$/;"	m	class:ARunSquadDistillation
run_distillation_tuning	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^    def run_distillation_tuning(self, run_training_squad_distillation, all_parameters, model, sigopt_run):$/;"	m	class:OptimizeSquadDistillation
run_environment	reinforcement-learning/dqn.py	/^def run_environment($/;"	f
run_eval	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^    def run_eval(self, run_training_squad_distillation, all_parameters):$/;"	m	class:RunSquadDistillation
run_eval	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^    def run_eval(self, all_parameters):$/;"	m	class:RunTrainingSquadDistillation
run_example	classifier/classifier_tuner.py	/^    def run_example(self, experiment, generator, sigopt_post=False, output_file=None):$/;"	m	class:ExampleRunner
run_example	dnn-tuning-nervana/sigopt_nervana.py	/^  def run_example(self, experiment_id=None):$/;"	m	class:JobRunner
run_example	sigopt-beats-vegas/predictor/stand_alone.py	/^def run_example(sigopt_width=1, sigopt_depth=100):$/;"	f
run_memn2n_joint_training	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^def run_memn2n_joint_training(tensorflow_commandline_flags):$/;"	f
run_memn2n_single_training	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^def run_memn2n_single_training(tensorflow_commandline_flags):$/;"	f
run_optimization_cycle	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_runs_optimization_cycle.py	/^    def run_optimization_cycle(self, sigopt_experiment, run_parameters):$/;"	m	class:SigOptCycle
run_params_dict	bert-distillation-multimetric/sigopt_optimization_cli.py	/^    run_params_dict = dict()$/;"	v
run_sigopt	sigopt-beats-vegas/predictor/stand_alone.py	/^def run_sigopt(box_scores, historical_games, historical_games_training_set, bet_info, sigopt_width=1, sigopt_depth=100):$/;"	f
run_training	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^    def run_training(self, run_training_squad_distillation, all_parameters, model):$/;"	m	class:RunSquadDistillation
run_trainining_and_save	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^    def run_trainining_and_save(self, all_parameters, model, sigopt_run):$/;"	m	class:RunTrainingSquadDistillation
runner	dnn-tuning-nervana/sigopt_nervana.py	/^  runner = JobRunner()$/;"	v	class:JobRunner
runner	sigopt-beats-vegas/predictor/run_model.py	/^def runner(historical_games_trunc, historical_games_by_tuple, bet_info, all_stats, tunable_param_lists):$/;"	f
runner	sigopt-beats-vegas/predictor/stand_alone.py	/^from run_model import runner$/;"	i
runs_optimize_squad_distillation	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_runs_optimization_cycle.py	/^from sigopt_optimization_wrapper import runs_optimize_squad_distillation$/;"	i
s	unsupervised-model/unsupervised_model.py	/^  s = int(params['slide_w'])               # SIGOPT param  (held fixed at 2)$/;"	v
save	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^    def save(self, checkpoint_dir):$/;"	m	class:SigOptMultimetricSearch
save_json	sigopt-beats-vegas/boxscores/scraper/scraper.py	/^  def save_json(response, **kwargs):$/;"	f	function:scrape
save_trained_model	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^    def save_trained_model(self, all_parameters, model):$/;"	m	class:RunTrainingSquadDistillation
save_transform_to_disk	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^    def save_transform_to_disk(self, index, augmented_data_directory, transformed_image):$/;"	m	class:StanfordCarsDataAugmentation
save_transform_to_s3	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^    def save_transform_to_s3(self, s3_client, s3_bucket_name, transformed_image_path):$/;"	m	class:StanfordCarsDataAugmentation
scale_dataset	orchestrate/models/example/data_and_model_setup.py	/^    def scale_dataset(self, trainX, testX):$/;"	m	class:LoadTransformData
scale_pos_weight	xgboost-py-classifier/xgboost_py_classifier.py	/^                          scale_pos_weight = weights,$/;"	v
schedule	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^    schedule=Schedule(step_config=step_config, change=float(args.momentum_step_change)),$/;"	v
schedule	dnn-tuning-nervana/nervana_all_cnn.py	/^    	schedule=Schedule(step_config=step_config, change=float(assignments.get("momentum_step_change"))),$/;"	v
schema	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        schema = schema_f.read()$/;"	v
schema	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        schema=schema,$/;"	v
scipy	tensorflow-cnn/python/cnn_example_cpu.py	/^import scipy$/;"	i
scipy	tensorflow-cnn/python/cnn_example_cpu.py	/^import scipy.io$/;"	i
scipy	tensorflow-cnn/python/cnn_example_gpu.py	/^import scipy$/;"	i
scipy	tensorflow-cnn/python/cnn_example_gpu.py	/^import scipy.io$/;"	i
scipy	unsupervised-model/unsupervised_model.py	/^import scipy$/;"	i
scipy	unsupervised-model/unsupervised_model.py	/^import scipy.io$/;"	i
score	reinforcement-learning/dqn.py	/^  def score(self):$/;"	m	class:Agent
scrape	sigopt-beats-vegas/boxscores/scraper/scraper.py	/^def scrape(start, stop, season):$/;"	f
sentiment_metric	text-classifier/python/sentiment_classifier.py	/^def sentiment_metric(POS_TEXT, NEG_TEXT, params):$/;"	f
separate_config	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^from squad_fine_tuning.a_squad_w_distillation import separate_config$/;"	i
separate_config	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^def separate_config(all_args_dict):$/;"	f
separate_config	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^from squad_fine_tuning.a_squad_w_distillation import separate_config$/;"	i
sess	tensorflow-cnn/python/cnn_example_cpu.py	/^  sess = tf.InteractiveSession()$/;"	v
sess	tensorflow-cnn/python/cnn_example_gpu.py	/^  sess = tf.InteractiveSession()$/;"	v
set_maze	maze-solving-mouse/maze_tools.py	/^    def set_maze(self, new_maze, start=None, end=None):$/;"	m	class:RightTurnSolver
set_parameter_values	bert-distillation-multimetric/squad_fine_tuning/a_squad_w_distillation.py	/^    def set_parameter_values(self, parameter_values):$/;"	m	class:ARunSquadDistillation
set_run_output_directory	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^    def set_run_output_directory(self, suggestion_id):$/;"	m	class:OptimizeSquadDistillation
set_seed	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^from squad_fine_tuning.set_seed_and_dist import setup_dist_training, set_seed, DEVICE$/;"	i
set_seed	bert-distillation-multimetric/squad_fine_tuning/set_seed_and_dist.py	/^def set_seed(args_dict):$/;"	f
set_seed	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^from squad_fine_tuning.set_seed_and_dist import setup_dist_training, set_seed, DEVICE$/;"	i
set_seed	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from squad_fine_tuning.set_seed_and_dist import set_seed, N_GPU, DEVICE$/;"	i
setup_adadelta	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^def setup_adadelta(sigopt_experiment_assignments):$/;"	f
setup_adagrad	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^def setup_adagrad(sigopt_experiment_assignments):$/;"	f
setup_adam_optimizer	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^def setup_adam_optimizer(sigopt_experiment_assignments):$/;"	f
setup_dist_training	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^from squad_fine_tuning.set_seed_and_dist import setup_dist_training, set_seed, DEVICE$/;"	i
setup_dist_training	bert-distillation-multimetric/squad_fine_tuning/set_seed_and_dist.py	/^def setup_dist_training(args_dict):$/;"	f
setup_dist_training	bert-distillation-multimetric/squad_fine_tuning/squad_w_distillation.py	/^from squad_fine_tuning.set_seed_and_dist import setup_dist_training, set_seed, DEVICE$/;"	i
setup_gradient_descent_momentum	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^def setup_gradient_descent_momentum(sigopt_experiment_assignments):$/;"	f
setup_parameters	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^    def setup_parameters(self, config_dict):$/;"	m	class:OptimizeSquadDistillation
setup_rmsprop	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^def setup_rmsprop(sigopt_experiment_assignments):$/;"	f
setup_run	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^    def setup_run(self, suggestion_id, args_dict, config_dict):$/;"	m	class:OptimizeSquadDistillation
setup_sigopt_memn2n_experiment	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^def setup_sigopt_memn2n_experiment(tensorflow_commandline_flags):$/;"	f
shape	maze-solving-mouse/maze_tools.py	/^    def shape(self):$/;"	m	class:RightTurnSolver
shuffle	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                                                                                           shuffle=True),$/;"	v	class:OrchestrateCLI.run.Multitask
shuffle	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                                                                                         shuffle=True),$/;"	v	class:OrchestrateCLI.run.Multitask
shutil	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^import shutil$/;"	i
shutil	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^import shutil$/;"	i
shutil	stanford-augmented-image-classification/resnet.py	/^import shutil$/;"	i
shutil	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^import shutil$/;"	i
shutil	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^import shutil$/;"	i
shutil	stanford-car-classification/resnet.py	/^import shutil$/;"	i
sigopt	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^import sigopt$/;"	i
sigopt	bert-distillation-multimetric/sigopt_optimization_wrapper/runs_optimize_squad_distillation.py	/^import sigopt$/;"	i
sigopt	dnn-tuning-nervana/nervana_all_cnn.py	/^import sigopt.interface$/;"	i
sigopt	dnn-tuning-nervana/sigopt_nervana.py	/^import sigopt.interface$/;"	i
sigopt	orchestrate/models/example/data_and_model_setup.py	/^import sigopt$/;"	i
sigopt	orchestrate/models/example/keras_model.py	/^import sigopt$/;"	i
sigopt	orchestrate/models/example/xgboost_model.py	/^import sigopt$/;"	i
sigopt	reinforcement-learning/dqn.py	/^import sigopt$/;"	i
sigopt	sigopt-beats-vegas/predictor/stand_alone.py	/^import sigopt$/;"	i
sigopt	stanford-augmented-image-classification/i_orchestrate_multitask.py	/^import sigopt$/;"	i
sigopt	stanford-augmented-image-classification/resnet.py	/^import sigopt$/;"	i
sigopt	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^import sigopt$/;"	i
sigopt	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^import sigopt$/;"	i
sigopt	stanford-car-classification/resnet.py	/^import sigopt$/;"	i
sigopt	tensorflow-cnn/python/cnn_example_cpu.py	/^import sigopt$/;"	i
sigopt	tensorflow-cnn/python/cnn_example_gpu.py	/^import sigopt$/;"	i
sigopt	test/with_new_experiment	/^import sigopt$/;"	i
sigopt	text-classifier/python/sentiment_classifier.py	/^import sigopt$/;"	i
sigopt	unsupervised-model/unsupervised_model.py	/^import sigopt$/;"	i
sigopt	xgb-integration-py-class/xgb-integration-py-class.py	/^import sigopt.xgboost$/;"	i
sigopt	xgb-integration-py-reg/xgb-integration-py-reg.py	/^import sigopt.xgboost$/;"	i
sigopt	xgboost-py-classifier/xgboost_py_classifier.py	/^import sigopt$/;"	i
sigopt	xgboost-py-regression/xgboost_py_regressor.py	/^import sigopt$/;"	i
sigopt_api_token	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^    sigopt_api_token = args.sigopt_api_token$/;"	v
sigopt_client	bert-distillation-multimetric/sigopt_optimization_cli.py	/^    sigopt_client = sigopt_experiment_client.SigOptExperiment(connection=sigopt_client_connection)$/;"	v
sigopt_client_connection	bert-distillation-multimetric/sigopt_optimization_cli.py	/^    sigopt_client_connection = Connection(client_token=args_dict[OptimizationRunParameters.API_TOKEN.value])$/;"	v
sigopt_conditionals_parameters_config	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^from sigopt_memn2n_setup import sigopt_parameters_config, random_search_parameters_config, sigopt_conditionals_parameters_config$/;"	i
sigopt_cycle	bert-distillation-multimetric/sigopt_optimization_cli.py	/^    sigopt_cycle = sigopt_runs_optimization_cycle.SigOptCycle(sigopt_experiment_client=sigopt_client,$/;"	v
sigopt_experiment_client	bert-distillation-multimetric/sigopt_optimization_cli.py	/^from sigopt_clients import sigopt_experiment_client$/;"	i
sigopt_experiment_client	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^from sigopt_clients import sigopt_experiment_client$/;"	i
sigopt_experiment_datatypes	bert-distillation-multimetric/sigopt_optimization_wrapper/sigopt_hyperparameter_definition.py	/^from sigopt_clients import sigopt_experiment_datatypes$/;"	i
sigopt_f1	xgb-integration-py-class/xgb-integration-py-class.py	/^sigopt_f1 = f1_score(y_test, sigopt_preds)$/;"	v
sigopt_generator	classifier/classifier_tuner.py	/^    def sigopt_generator(self, experiment):$/;"	m	class:ExampleRunner
sigopt_generator	dnn-tuning-nervana/sigopt_nervana.py	/^  def sigopt_generator(self, experiment_id):$/;"	m	class:JobRunner
sigopt_hyperparameter_definition	bert-distillation-multimetric/sigopt_optimization_cli.py	/^from sigopt_optimization_wrapper import sigopt_hyperparameter_definition$/;"	i
sigopt_hyperparameter_definition	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^from sigopt_optimization_wrapper import sigopt_hyperparameter_definition$/;"	i
sigopt_memn2n_experiment_setup	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^from sigopt_memn2n_setup import sigopt_memn2n_experiment_setup$/;"	i
sigopt_memn2n_experiment_setup	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^from sigopt_memn2n_setup import sigopt_memn2n_experiment_setup$/;"	i
sigopt_parameters_config	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^from sigopt_memn2n_setup import sigopt_parameters_config, random_search_parameters_config, sigopt_conditionals_parameters_config$/;"	i
sigopt_preds	xgb-integration-py-class/xgb-integration-py-class.py	/^sigopt_preds = (sigopt_probs > 0.5).astype(int) #convert probabilities to class labels$/;"	v
sigopt_preds	xgb-integration-py-reg/xgb-integration-py-reg.py	/^sigopt_preds = sigopt_model.predict(dtest)$/;"	v
sigopt_probs	xgb-integration-py-class/xgb-integration-py-class.py	/^sigopt_probs = sigopt_model.predict(dtest)$/;"	v
sigopt_ray_multimetric_wrapper_distilbert	bert-distillation-multimetric/sigopt_ray_optimization_cli.py	/^from raytune_wrapper import sigopt_ray_multimetric_wrapper_distilbert, ray_optimize_squad_distillation$/;"	i
sigopt_rmse	xgb-integration-py-reg/xgb-integration-py-reg.py	/^sigopt_rmse = mean_squared_error(y_test, sigopt_preds, squared=False)$/;"	v
sigopt_runs_optimization_cycle	bert-distillation-multimetric/sigopt_optimization_cli.py	/^from sigopt_optimization_wrapper import sigopt_runs_optimization_cycle$/;"	i
sigopt_runs_update	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    def sigopt_runs_update(self, sigopt_run, current_loss, current_lr, results):$/;"	m	class:TrainSquadDistillation
single	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_optimization_run.py	/^from memn2n import joint, single$/;"	i
sklearn	unsupervised-model/unsupervised_model.py	/^import sklearn$/;"	i
sklearn	unsupervised-model/unsupervised_model.py	/^import sklearn.cluster$/;"	i
small	stanford-augmented-image-classification/i_orchestrate_multitask.py	/^    small = 0.10$/;"	v	class:Multitask
small	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^            small = math.ceil(parsed_cli_arguments[CLI.EPOCHS.value] * 0.10)$/;"	v	class:OrchestrateCLI.run.Multitask
sns	xgboost-py-classifier/xgboost_py_classifier.py	/^import seaborn as sns$/;"	i
sns	xgboost-py-regression/xgboost_py_regressor.py	/^import seaborn as sns$/;"	i
socket	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^import socket$/;"	i
solve	maze-solving-mouse/maze_tools.py	/^    def solve(self, start=None, end=None, max_steps=None, verbose=False):$/;"	m	class:RightTurnSolver
squad_convert_examples_to_features	bert-distillation-multimetric/distilbert_data_model_loaders/load_squad_dataset.py	/^from transformers import SquadV2Processor, SquadV1Processor, squad_convert_examples_to_features$/;"	i
squad_evaluate	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^    squad_evaluate$/;"	i
squad_fine_tuning	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^import squad_fine_tuning.squad_w_distillation$/;"	i
squad_w_distillation	bert-distillation-multimetric/run_squad_w_distillation_cli.py	/^import squad_fine_tuning.squad_w_distillation$/;"	i
start	xgboost-py-classifier/xgboost_py_classifier.py	/^start = time.time()$/;"	v
stderr	test/with_new_experiment	/^    stderr=subprocess.PIPE,$/;"	v
stdout	test/with_new_experiment	/^    stdout=subprocess.PIPE,$/;"	v
step_config	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^step_config = [int(args.momentum_step_schedule_start + i*args.momentum_step_schedule_step_width) for i in range(int(args.momentum_step_schedule_steps))]$/;"	v
step_config	dnn-tuning-nervana/nervana_all_cnn.py	/^  step_config = [int(assignments.get("momentum_step_schedule_start") + i*assignments.get("momentum_step_schedule_step_width")) for i in range(int(assignments.get("momentum_step_schedule_steps")))]$/;"	v
store_hist	multimetric-timeseries/train.py	/^def store_hist(hist, experiment, suggestion):$/;"	f
string_to_optimizer_object	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^def string_to_optimizer_object(string_argument, sigopt_experiment_assignments):$/;"	f
subprocess	dnn-tuning-nervana/sigopt_nervana.py	/^import subprocess$/;"	i
subprocess	test/with_new_experiment	/^import subprocess$/;"	i
subsample	xgboost-py-regression/xgboost_py_regressor.py	/^                        subsample=.8,$/;"	v
suggest	bert-distillation-multimetric/raytune_wrapper/sigopt_ray_multimetric_wrapper_distilbert.py	/^    def suggest(self, trial_id):$/;"	m	class:SigOptMultimetricSearch
suggestion	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^            suggestion=suggestion.id,$/;"	v
suggestion	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
suggestion	dnn-tuning-nervana/nervana_all_cnn.py	/^  suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
suggestion	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^    suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
suggestion	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^    suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
suggestion	dnn-tuning-nvidia-mxnet/run_experiments.py	/^                                suggestion=suggestion.id)$/;"	v
suggestion	dnn-tuning-nvidia-mxnet/run_experiments.py	/^    suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
suggestion	multimetric-timeseries/main.py	/^        suggestion=suggestion.id,$/;"	v
suggestion	multimetric-timeseries/main.py	/^    suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
suggestion	random-forest/python/random_forest.py	/^        suggestion=suggestion.id,$/;"	v
suggestion	random-forest/python/random_forest.py	/^    suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
suggestion	surprise-py-recsys/surprise_recommender.py	/^    suggestion=suggestion.id,$/;"	v
suggestion	surprise-py-recsys/surprise_recommender.py	/^  suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
suggestion	tensorflow-cnn/python/cnn_example_cpu.py	/^  suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
suggestion	tensorflow-cnn/python/cnn_example_gpu.py	/^  suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
suggestion	text-classifier/python/sentiment_classifier.py	/^        suggestion=suggestion.id,$/;"	v
suggestion	text-classifier/python/sentiment_classifier.py	/^    suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
suggestion	unsupervised-model/unsupervised_model.py	/^  suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
suggestion	xgboost-py-classifier/xgboost_py_classifier.py	/^        suggestion=suggestion.id,$/;"	v
suggestion	xgboost-py-classifier/xgboost_py_classifier.py	/^    suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
suggestion	xgboost-py-regression/xgboost_py_regressor.py	/^        suggestion=suggestion.id,$/;"	v
suggestion	xgboost-py-regression/xgboost_py_regressor.py	/^    suggestion = conn.experiments(experiment.id).suggestions().create()$/;"	v
svm	classifier/classifier_tuner.py	/^from sklearn import datasets, svm, ensemble$/;"	i
sync_ray_checkpoints	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^    def sync_ray_checkpoints(self, args_dict):$/;"	m	class:RayTuneOptimizeSquadDistillation
sync_ray_output	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^def sync_ray_output(ray_output_directory, s3_bucket, output_directory, sigopt_run_directory):$/;"	f
sys	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^import sys$/;"	i
sys	classifier/classifier_tuner.py	/^import sys$/;"	i
sys	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^import logging, sys$/;"	i
sys	dnn-tuning-nervana/nervana_all_cnn.py	/^import logging, sys$/;"	i
sys	dnn-tuning-nvidia-mxnet/cnn_text/evaluate.py	/^import sys, time$/;"	i
sys	dnn-tuning-nvidia-mxnet/cnn_text/graph.py	/^import sys$/;"	i
sys	other-languages/other_languages.py	/^import sys$/;"	i
sys	sigopt-beats-vegas/boxscores/scraper/reduce.py	/^import sys$/;"	i
sys	test/with_new_experiment	/^import sys$/;"	i
t0	tensorflow-cnn/python/cnn_example_cpu.py	/^  t0 = time.time()$/;"	v
t0	tensorflow-cnn/python/cnn_example_gpu.py	/^  t0 = time.time()$/;"	v
tarfile	dnn-tuning-nervana/sigopt_nervana.py	/^import tarfile$/;"	i
test_X	tensorflow-cnn/python/cnn_example_cpu.py	/^test_X = convert_rgb2gray(test_X)$/;"	v
test_X	tensorflow-cnn/python/cnn_example_cpu.py	/^test_X = scipy.io.loadmat("test_32x32.mat")['X'].astype('float64')$/;"	v
test_X	tensorflow-cnn/python/cnn_example_gpu.py	/^test_X = convert_rgb2gray(test_X)$/;"	v
test_X	tensorflow-cnn/python/cnn_example_gpu.py	/^test_X = scipy.io.loadmat("test_32x32.mat")['X'].astype('float64')$/;"	v
test_X	unsupervised-model/unsupervised_model.py	/^test_X = convert_rgb2gray(test_X)$/;"	v
test_X	unsupervised-model/unsupervised_model.py	/^test_X = scipy.io.loadmat("test_32x32.mat")['X'].astype('float64')$/;"	v
test_XZ	tensorflow-cnn/python/cnn_example_cpu.py	/^test_XZ = numpy.reshape(test_X.T, (test_X.shape[2], image_w * image_w))$/;"	v
test_XZ	tensorflow-cnn/python/cnn_example_cpu.py	/^test_XZ = preprocessing.scale(test_XZ, axis=1)$/;"	v
test_XZ	tensorflow-cnn/python/cnn_example_gpu.py	/^test_XZ = numpy.reshape(test_X.T, (test_X.shape[2], image_w * image_w))$/;"	v
test_XZ	tensorflow-cnn/python/cnn_example_gpu.py	/^test_XZ = preprocessing.scale(test_XZ, axis=1)$/;"	v
test_XZ	unsupervised-model/unsupervised_model.py	/^  test_XZ = numpy.vstack(test_XZ)$/;"	v
test_XZ	unsupervised-model/unsupervised_model.py	/^  test_XZ = process_chunk(0, test_X.shape[2], test_X)$/;"	v
test_y	tensorflow-cnn/python/cnn_example_cpu.py	/^test_y = scipy.io.loadmat("test_32x32.mat")['y'].astype('float64')$/;"	v
test_y	tensorflow-cnn/python/cnn_example_gpu.py	/^test_y = scipy.io.loadmat("test_32x32.mat")['y'].astype('float64')$/;"	v
test_y	unsupervised-model/unsupervised_model.py	/^test_y = scipy.io.loadmat("test_32x32.mat")['y'].astype('float64')$/;"	v
test_yZ	tensorflow-cnn/python/cnn_example_cpu.py	/^test_yZ = one_hot_enc.fit_transform(test_y)$/;"	v
test_yZ	tensorflow-cnn/python/cnn_example_gpu.py	/^test_yZ = one_hot_enc.fit_transform(test_y)$/;"	v
tf	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^import tensorflow as tf$/;"	i
tf	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^import tensorflow as tf$/;"	i
tf	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^import tensorflow as tf$/;"	i
tf	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_hyperparameters_enum.py	/^import tensorflow as tf$/;"	i
tf	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_memn2n_experiment_setup.py	/^import tensorflow as tf$/;"	i
tf	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_optimization_run.py	/^import tensorflow as tf$/;"	i
tf	orchestrate/models/example/keras_model.py	/^import tensorflow as tf$/;"	i
tf	reinforcement-learning/dqn.py	/^import tensorflow as tf$/;"	i
tf	tensorflow-cnn/python/cnn_example_cpu.py	/^import tensorflow as tf$/;"	i
tf	tensorflow-cnn/python/cnn_example_gpu.py	/^import tensorflow as tf$/;"	i
the_args	other-languages/other_languages.py	/^  the_args = parser.parse_args()$/;"	v	class:SubProcessEvaluator
threading	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^import threading$/;"	i
threading	parallel/parallel.py	/^import threading$/;"	i
time	amazon-ml-hyperparameter-optimization/evaluation.py	/^import time$/;"	i
time	dnn-tuning-nervana/nervana_all_cnn.py	/^import time$/;"	i
time	dnn-tuning-nervana/sigopt_nervana.py	/^import time$/;"	i
time	dnn-tuning-nvidia-mxnet/cnn_text/evaluate.py	/^import sys, time$/;"	i
time	dnn-tuning-nvidia-mxnet/cnn_text/evaluate.py	/^import time$/;"	i
time	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^import time$/;"	i
time	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^import time$/;"	i
time	multimetric-timeseries/train.py	/^import time$/;"	i
time	orchestrate/models/example/keras_model.py	/^import time$/;"	i
time	orchestrate/models/example/xgboost_model.py	/^import time$/;"	i
time	stanford-augmented-image-classification/resnet.py	/^import time$/;"	i
time	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^import time$/;"	i
time	stanford-car-classification/resnet.py	/^import time$/;"	i
time	tensorflow-cnn/python/cnn_example_cpu.py	/^import time$/;"	i
time	tensorflow-cnn/python/cnn_example_gpu.py	/^import time$/;"	i
time	xgboost-py-classifier/xgboost_py_classifier.py	/^import time$/;"	i
time	xgboost-py-regression/xgboost_py_regressor.py	/^import time$/;"	i
timeit	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^import timeit$/;"	i
to_list	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^def to_list(tensor):$/;"	f
tokenize	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/data_utils.py	/^def tokenize(sent):$/;"	f
torch	bert-distillation-multimetric/distilbert_data_model_loaders/load_squad_dataset.py	/^import torch$/;"	i
torch	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^import torch$/;"	i
torch	bert-distillation-multimetric/squad_fine_tuning/set_seed_and_dist.py	/^import torch$/;"	i
torch	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^import torch$/;"	i
torch	bert-distillation-multimetric/squad_fine_tuning/training_run_squad_distillation.py	/^import torch$/;"	i
torch	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^import torch$/;"	i
torch	stanford-augmented-image-classification/resnet.py	/^import torch$/;"	i
torch	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^import torch$/;"	i
torch	stanford-car-classification/resnet.py	/^import torch$/;"	i
torch	stanford-car-classification/run_resnet_training_cli.py	/^import torch$/;"	i
torch_checkpoint_location	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                           torch_checkpoint_location=parsed_cli_arguments[CLI.CHECKPOINT.value],$/;"	v	class:OrchestrateCLI.run.Multitask
torchvision	stanford-augmented-image-classification/a_resnet_training_common_cli.py	/^import torchvision$/;"	i
torchvision	stanford-augmented-image-classification/resnet.py	/^import torchvision$/;"	i
torchvision	stanford-augmented-image-classification/stanford_car_dataset.py	/^import torchvision$/;"	i
torchvision	stanford-augmented-image-classification/stanford_car_dataset_augmented.py	/^import torchvision$/;"	i
torchvision	stanford-augmented-image-classification/stanford_cars_augmentation_cli.py	/^import torchvision$/;"	i
torchvision	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^import torchvision$/;"	i
torchvision	stanford-car-classification/resnet.py	/^import torchvision$/;"	i
torchvision	stanford-car-classification/resnet_stanford_cars_cli.py	/^import torchvision$/;"	i
torchvision	stanford-car-classification/stanford_cars.py	/^import torchvision$/;"	i
tqdm	bert-distillation-multimetric/squad_fine_tuning/eval_squad_distillation.py	/^from tqdm import tqdm$/;"	i
tqdm	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from tqdm import trange, tqdm$/;"	i
traceback	sigopt-beats-vegas/boxscores/scraper/scraper.py	/^import traceback$/;"	i
train	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^    def train(self, model, args_dict, train_dataset, sigopt_run):$/;"	m	class:TrainSquadDistillation
train	xgb-integration-py-class/xgb-integration-py-class.py	/^train = pd.merge(train_transaction, train_identity, on="TransactionID", how="left")$/;"	v
train	xgb-integration-py-reg/xgb-integration-py-reg.py	/^train = pd.read_csv(".\/mercedes-benz-greener-manufacturing\/train.csv.zip")$/;"	v
train_X	tensorflow-cnn/python/cnn_example_cpu.py	/^train_X = convert_rgb2gray(train_X)$/;"	v
train_X	tensorflow-cnn/python/cnn_example_cpu.py	/^train_X = scipy.io.loadmat("train_32x32.mat")['X'].astype('float64')$/;"	v
train_X	tensorflow-cnn/python/cnn_example_gpu.py	/^train_X = convert_rgb2gray(train_X)$/;"	v
train_X	tensorflow-cnn/python/cnn_example_gpu.py	/^train_X = scipy.io.loadmat("train_32x32.mat")['X'].astype('float64')$/;"	v
train_X	unsupervised-model/unsupervised_model.py	/^train_X = convert_rgb2gray(train_X)$/;"	v
train_X	unsupervised-model/unsupervised_model.py	/^train_X = scipy.io.loadmat("train_32x32.mat")['X'].astype('float64')$/;"	v
train_XZ	tensorflow-cnn/python/cnn_example_cpu.py	/^train_XZ = numpy.reshape(train_X.T, (train_X.shape[2], image_w * image_w))$/;"	v
train_XZ	tensorflow-cnn/python/cnn_example_cpu.py	/^train_XZ = preprocessing.scale(train_XZ, axis=1)$/;"	v
train_XZ	tensorflow-cnn/python/cnn_example_gpu.py	/^train_XZ = numpy.reshape(train_X.T, (train_X.shape[2], image_w * image_w))$/;"	v
train_XZ	tensorflow-cnn/python/cnn_example_gpu.py	/^train_XZ = preprocessing.scale(train_XZ, axis=1)$/;"	v
train_XZ	unsupervised-model/unsupervised_model.py	/^  train_XZ = numpy.vstack(train_XZ)$/;"	v
train_XZ	unsupervised-model/unsupervised_model.py	/^  train_XZ = process_chunk(0, train_X.shape[2], train_X)$/;"	v
train_identity	xgb-integration-py-class/xgb-integration-py-class.py	/^train_identity = pd.read_csv(".\/ieee-fraud-detection\/train_identity.csv")$/;"	v
train_keras_model	orchestrate/models/example/keras_model.py	/^def train_keras_model(dataset):$/;"	f
train_model	stanford-augmented-image-classification/resnet.py	/^    def train_model(self, training_data, validation_data, number_of_labels):$/;"	m	class:ResNet
train_model	stanford-car-classification/resnet.py	/^    def train_model(self, training_data, validation_data, number_of_labels):$/;"	m	class:PalmNet
train_set	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^train_set = DataIterator(X_train, y_train, nclass=16, lshape=(3, 32, 32))$/;"	v
train_set	dnn-tuning-nervana/nervana_all_cnn.py	/^train_set = DataIterator(X_train, y_train, nclass=16, lshape=(3, 32, 32))$/;"	v
train_step	tensorflow-cnn/python/cnn_example_cpu.py	/^  train_step = tf.train.RMSPropOptimizer(rms_lr, decay=rms_decay, momentum=rms_mom).minimize(cross_entropy)$/;"	v
train_step	tensorflow-cnn/python/cnn_example_gpu.py	/^  train_step = tf.train.RMSPropOptimizer(rms_lr, decay=rms_decay, momentum=rms_mom).minimize(cross_entropy)$/;"	v
train_test_split	orchestrate/models/example/data_and_model_setup.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	surprise-py-recsys/surprise_recommender.py	/^from surprise.model_selection import train_test_split$/;"	i
train_test_split	tensorflow-cnn/python/cnn_example_cpu.py	/^from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	tensorflow-cnn/python/cnn_example_gpu.py	/^from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	unsupervised-model/unsupervised_model.py	/^from sklearn.cross_validation import train_test_split$/;"	i
train_test_split	xgb-integration-py-class/xgb-integration-py-class.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	xgb-integration-py-reg/xgb-integration-py-reg.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	xgboost-py-classifier/xgboost_py_classifier.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_test_split	xgboost-py-regression/xgboost_py_regressor.py	/^from sklearn.model_selection import train_test_split$/;"	i
train_transaction	xgb-integration-py-class/xgb-integration-py-class.py	/^train_transaction = pd.read_csv(".\/ieee-fraud-detection\/train_transaction.csv")$/;"	v
train_xgboost_model	orchestrate/models/example/xgboost_model.py	/^def train_xgboost_model(dataset, random_state=1):$/;"	f
train_y	tensorflow-cnn/python/cnn_example_cpu.py	/^train_y = scipy.io.loadmat("train_32x32.mat")['y'].astype('float64')$/;"	v
train_y	tensorflow-cnn/python/cnn_example_gpu.py	/^train_y = scipy.io.loadmat("train_32x32.mat")['y'].astype('float64')$/;"	v
train_y	unsupervised-model/unsupervised_model.py	/^train_y = scipy.io.loadmat("train_32x32.mat")['y'].astype('float64')$/;"	v
train_yZ	tensorflow-cnn/python/cnn_example_cpu.py	/^train_yZ = one_hot_enc.fit_transform(train_y)$/;"	v
train_yZ	tensorflow-cnn/python/cnn_example_gpu.py	/^train_yZ = one_hot_enc.fit_transform(train_y)$/;"	v
training_pass	stanford-augmented-image-classification/resnet.py	/^    def training_pass(self, inputs, labels, enable_gradients):$/;"	m	class:ResNet
training_pass	stanford-car-classification/resnet.py	/^    def training_pass(self, inputs, labels, enable_gradients):$/;"	m	class:PalmNet
trange	bert-distillation-multimetric/squad_fine_tuning/train_squad_distillation.py	/^from tqdm import trange, tqdm$/;"	i
transform_old_format	sigopt-beats-vegas/predictor/bet_reader.py	/^def transform_old_format(old_bet_info):$/;"	f
transform_parameters	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^    def transform_parameters(self, parameter_values):$/;"	m	class:OptimizeSquadDistillation
try_distillation_tuning	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^    def try_distillation_tuning(self, run_training_squad_distillation, all_parameters, model, run):$/;"	m	class:OptimizeSquadDistillation
tune	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^from ray import tune$/;"	i
tune_track_metrics	bert-distillation-multimetric/raytune_wrapper/ray_optimize_squad_distillation.py	/^def tune_track_metrics(evaluated_values):$/;"	f
type	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        type=int,$/;"	v
unlab_X	unsupervised-model/unsupervised_model.py	/^unlab_X = convert_rgb2gray(unlab_X)$/;"	v
unlab_X	unsupervised-model/unsupervised_model.py	/^unlab_X = scipy.io.loadmat("extra_32x32.mat")['X'].astype('float64')$/;"	v
unnest_data_mat	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^    def unnest_data_mat(self, index):$/;"	m	class:StanfordCarsDataAugmentation
update_experiment	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def update_experiment(self, experiment, suggestion, evaluated_value):$/;"	m	class:SigOptExperiment
update_experiment	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def update_experiment(self, experiment, suggestion, evaluated_value):$/;"	m	class:SigOptExperiment
update_experiment_metadata	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def update_experiment_metadata(self, experiment, suggestion, evaluated_value, metadata_dict):$/;"	m	class:SigOptExperiment
update_experiment_multimetric	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def update_experiment_multimetric(self, experiment, suggestion, evaluated_values, failed=False):$/;"	m	class:SigOptExperiment
update_experiment_multimetric	optimizing-memn2n/end2end_mem_nn_tensorflow/sigopt_memn2n_setup/sigopt_experiment_client.py	/^    def update_experiment_multimetric(self, experiment, suggestion, evaluated_value):$/;"	m	class:SigOptExperiment
update_experiment_multimetric_metadata	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def update_experiment_multimetric_metadata(self, experiment, suggestion, evaluated_value, metadata_dict, failed=False):$/;"	m	class:SigOptExperiment
update_suggestion	bert-distillation-multimetric/sigopt_clients/sigopt_experiment_client.py	/^    def update_suggestion(self, experiment_id, suggestion_id, metadata_dict):$/;"	m	class:SigOptExperiment
upload_run_output_to_s3	bert-distillation-multimetric/squad_fine_tuning/optimize_squad_distillation.py	/^def upload_run_output_to_s3(s3_bucket_name, local_output_directory, parent_output_dir):$/;"	f
urllib2	dnn-tuning-nvidia-mxnet/cnn_text/preprocess.py	/^import urllib2$/;"	i
usage	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^        usage="%(prog)s [--name][--debug] kfolds",$/;"	v
use_label_encoder	xgboost-py-classifier/xgboost_py_classifier.py	/^                          use_label_encoder = False$/;"	v
uuid	stanford-augmented-image-classification/stanford_cars_data_augmentation.py	/^import uuid$/;"	i
valid_set	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^valid_set = DataIterator(X_test, y_test, nclass=16, lshape=(3, 32, 32))$/;"	v
valid_set	dnn-tuning-nervana/nervana_all_cnn.py	/^valid_set = DataIterator(X_test, y_test, nclass=16, lshape=(3, 32, 32))$/;"	v
validation_data	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                                                                validation_data=DataLoader(validation_data,$/;"	v	class:OrchestrateCLI.run.Multitask
validation_frequency	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                           validation_frequency=parsed_cli_arguments[CLI.VALIDATION_FREQUENCY.value],$/;"	v	class:OrchestrateCLI.run.Multitask
value	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^            value=avg_auc,$/;"	v
value	dnn-tuning-nvidia-mxnet/run_experiments.py	/^                                value=dev_acc,$/;"	v
value	random-forest/python/random_forest.py	/^        value=value,$/;"	v
value	text-classifier/python/sentiment_classifier.py	/^        value=opt_metric,$/;"	v
value	xgboost-py-classifier/xgboost_py_classifier.py	/^        value=value$/;"	v
value	xgboost-py-classifier/xgboost_py_classifier.py	/^    value = evaluate_model(assignments)$/;"	v
value_dicts	surprise-py-recsys/surprise_recommender.py	/^  value_dicts = evaluate_model(suggestion.assignments)$/;"	v
value_dicts	xgboost-py-regression/xgboost_py_regressor.py	/^    value_dicts = evaluate_model(assignments)$/;"	v
value_stddev	amazon-ml-hyperparameter-optimization/hyperparameter_optimization.py	/^            value_stddev=std_auc,$/;"	v
value_stddev	random-forest/python/random_forest.py	/^        value_stddev=std,$/;"	v
values	multimetric-timeseries/main.py	/^        values = metrics,$/;"	v
values	surprise-py-recsys/surprise_recommender.py	/^    values=value_dicts,$/;"	v
values	xgboost-py-regression/xgboost_py_regressor.py	/^        values=value_dicts$/;"	v
vectorize_data	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/data_utils.py	/^def vectorize_data(data, word_idx, sentence_size, memory_size):$/;"	f
vectorize_data	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/joint.py	/^from memn2n.data_utils import load_task, vectorize_data$/;"	i
vectorize_data	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/single.py	/^from memn2n.data_utils import load_task, vectorize_data$/;"	i
verbose	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                                                                             verbose=True)$/;"	v	class:OrchestrateCLI.run.Multitask
verbose	xgboost-py-regression/xgboost_py_regressor.py	/^                    verbose=False$/;"	v
view_as_windows	unsupervised-model/unsupervised_model.py	/^from skimage.util import view_as_windows$/;"	i
w	unsupervised-model/unsupervised_model.py	/^  w = int(params['filter_w'])              # SIGOPT param  (filter width in pixels)$/;"	v
warnings	multimetric-timeseries/train.py	/^import warnings$/;"	i
warnings	xgboost-py-classifier/xgboost_py_classifier.py	/^import warnings  # `do not disturbe` mode$/;"	i
warnings	xgboost-py-regression/xgboost_py_regressor.py	/^import warnings$/;"	i
wdecay	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^    wdecay=float(args.weight_decay),$/;"	v
wdecay	dnn-tuning-nervana/nervana_all_cnn.py	/^    	wdecay=float(10.0**assignments.get("log(weight_decay)")),$/;"	v
weight_decay	stanford-car-classification/orchestrate_experiment_wrapper_stanford_cars_cli.py	/^                                        weight_decay=np.exp($/;"	v	class:OrchestrateCLI.run.Multitask
weight_variable	tensorflow-cnn/python/cnn_example_cpu.py	/^  def weight_variable(shape):$/;"	f
weight_variable	tensorflow-cnn/python/cnn_example_gpu.py	/^  def weight_variable(shape):$/;"	f
weighted_sum_scalarization	maze-solving-mouse/sigopt_maze_analysis.py	/^    def weighted_sum_scalarization(mean_weight, mean, sd):$/;"	m	class:SigOptMazeWeightedSumFrontierSolver
weights	xgboost-py-classifier/xgboost_py_classifier.py	/^weights = (y == 0).sum() \/ (1.0 * (y == 1).sum())$/;"	v
whiten	dnn-tuning-nervana/cifar10_allcnn_newargs.py	/^    whiten=False,$/;"	v
whiten	dnn-tuning-nervana/nervana_all_cnn.py	/^    whiten=False,$/;"	v
with_architecture	dnn-tuning-nvidia-mxnet/multi_run_experiments.py	/^with_architecture = args.with_architecture$/;"	v
with_architecture	dnn-tuning-nvidia-mxnet/multi_run_experiments_with_failures.py	/^with_architecture = args.with_architecture$/;"	v
with_architecture	dnn-tuning-nvidia-mxnet/run_experiments.py	/^                                with_architecture=with_architecture)$/;"	v
with_architecture	dnn-tuning-nvidia-mxnet/run_experiments.py	/^with_architecture = args.with_architecture$/;"	v
wrapper	multimetric-timeseries/train.py	/^    def wrapper(q, *args, **kwargs):$/;"	f	function:add_to_queue
x	tensorflow-cnn/python/cnn_example_cpu.py	/^  x = tf.placeholder(tf.float32, shape=[None, image_w * image_w])$/;"	v
x	tensorflow-cnn/python/cnn_example_gpu.py	/^  x = tf.placeholder(tf.float32, shape=[None, image_w * image_w])$/;"	v
x_image	tensorflow-cnn/python/cnn_example_cpu.py	/^  x_image = tf.reshape(x, [-1,image_w,image_w,1], name='reshape1')$/;"	v
x_image	tensorflow-cnn/python/cnn_example_gpu.py	/^  x_image = tf.reshape(x, [-1,image_w,image_w,1], name='reshape1')$/;"	v
xgb	unsupervised-model/unsupervised_model.py	/^import xgboost as xgb$/;"	i
xgb	xgb-integration-py-class/xgb-integration-py-class.py	/^import xgboost as xgb$/;"	i
xgb	xgb-integration-py-reg/xgb-integration-py-reg.py	/^import xgboost as xgb$/;"	i
xgb	xgboost-py-classifier/xgboost_py_classifier.py	/^import xgboost as xgb$/;"	i
xgb	xgboost-py-regression/xgboost_py_regressor.py	/^import xgboost as xgb$/;"	i
xgboost	xgb-integration-py-class/xgb-integration-py-class.py	/^import sigopt.xgboost$/;"	i
xgboost	xgb-integration-py-reg/xgb-integration-py-reg.py	/^import sigopt.xgboost$/;"	i
y	parallel/data.py	/^y = iris.target$/;"	v
y	random-forest/python/random_forest.py	/^y = iris.target$/;"	v
y	random-forest/python/random_forest.sklearn.py	/^y = iris.target$/;"	v
y	xgb-integration-py-class/xgb-integration-py-class.py	/^y = train['isFraud']$/;"	v
y	xgb-integration-py-reg/xgb-integration-py-reg.py	/^y = train['y']$/;"	v
y	xgboost-py-classifier/xgboost_py_classifier.py	/^y = bc_dataset.target$/;"	v
y	xgboost-py-classifier/xgboost_py_classifier.py	/^y = label_encoder.transform(y)$/;"	v
y	xgboost-py-regression/xgboost_py_regressor.py	/^y = target$/;"	v
y_	tensorflow-cnn/python/cnn_example_cpu.py	/^  y_ = tf.placeholder(tf.float32, shape=[None, 10])$/;"	v
y_	tensorflow-cnn/python/cnn_example_gpu.py	/^  y_ = tf.placeholder(tf.float32, shape=[None, 10])$/;"	v
y_conv	tensorflow-cnn/python/cnn_example_cpu.py	/^  y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)$/;"	v
y_conv	tensorflow-cnn/python/cnn_example_gpu.py	/^  y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)$/;"	v
y_valid_pred	unsupervised-model/unsupervised_model.py	/^  y_valid_pred = clf.predict(valid_XZ)$/;"	v
zca_eps	unsupervised-model/unsupervised_model.py	/^  zca_eps = math.exp(params['zca_eps'])$/;"	v
zero_nil_slot	optimizing-memn2n/end2end_mem_nn_tensorflow/memn2n/memn2n_components.py	/^def zero_nil_slot(t, name=None):$/;"	f
zipfile	dnn-tuning-nervana/sigopt_nervana.py	/^import zipfile$/;"	i
